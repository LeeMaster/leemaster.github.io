{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1570851324000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1570851324000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1570851324000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1570851324000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1570851324000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1570851324000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1570851324000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1570851324000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1570851324000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1570851324000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1570851324000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1570851324000},{"_id":"themes/next/_config.yml","hash":"54475342b6e2c44c90eacee7bec64e03d0cdf0b4","modified":1570851324000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1570851324000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1570851324000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1570851324000},{"_id":"source/_posts/leetcode-91.md","hash":"de4cb28b4d59a7a6b9f9857b46d4898f4440c245","modified":1570851335000},{"_id":"source/_posts/mapreduce.md","hash":"598c8f4cbdde92b59013635d8541d70747077f31","modified":1570851335000},{"_id":"source/_posts/leetcode-72.md","hash":"3d0a5dfba2059a2c46e0b6e9efa13c6db1802c3a","modified":1570851324000},{"_id":"source/_posts/rust-proc-marco.md","hash":"235f5cc4478f0532cf21c4e45ac9c6f2711b4edb","modified":1570851324000},{"_id":"source/_posts/skiplist-design.md","hash":"8dbd33f3b0364bde07836cdbc79190ac72732c16","modified":1570851335000},{"_id":"source/_posts/skiplist-leveldb.md","hash":"b420fc5cd98b3215b80a1f48ea761ccf0ccce5fb","modified":1570851335000},{"_id":"source/_posts/rust-variables.md","hash":"9226b2bde78af06491909c07ffdf231f71ec8ea1","modified":1570851324000},{"_id":"source/_posts/visitor-pattern.md","hash":"21f908cf756e22db87f55756730f6b65bfc92089","modified":1570851324000},{"_id":"source/about/index.md","hash":"03ae6310375967b8bf919b57370292e012848f6f","modified":1570851324000},{"_id":"source/categories/index.md","hash":"fa0c2a86c245ea40acd18d10e6be29d81515f370","modified":1570851324000},{"_id":"source/links/index.md","hash":"a36cccfca37a01969daff772108eb8726c555426","modified":1570851324000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1570851324000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1570851324000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1570851324000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1570851324000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1570851324000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1570851324000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1570851324000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1570851324000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1570851324000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1570851324000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1570851324000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1570851324000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1570851324000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1570851324000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1570851324000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1570851324000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1570851324000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1570851324000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1570851324000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1570851324000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1570851324000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1570851324000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1570851324000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1570851324000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1570851324000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1570851324000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1570851324000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1570851324000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1570851324000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1570851324000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1570851324000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1570851324000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1570851324000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1570851324000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1570851324000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1570851324000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1570851324000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1570851324000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1570851324000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1570851324000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1570851324000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1570851324000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1570851324000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1570851324000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1570851324000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1570851324000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1570851324000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1570851324000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1570851324000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1570851324000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1570851324000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1570851324000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1570851324000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1570851324000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1570851324000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1570851324000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1570851324000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1570851324000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1570851324000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1570851324000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1570851324000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1570851324000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1570851324000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1570851324000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1570851324000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1570851324000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1570851324000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1570851324000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1570851324000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1570851324000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1570851324000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1570851324000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1570851324000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1570851324000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1570851324000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1570851324000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1570851324000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1570851324000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1570851324000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1570851324000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1570851324000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1570851324000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1570851324000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1570851324000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1570851324000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1570851324000},{"_id":"source/_posts/skiplist-design/skiplist.pdf","hash":"04f020a4ab2134db6f9e98eadf216d94d440414a","modified":1570851335000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570851324000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1570851324000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1570851324000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1570851324000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1570851324000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1570851324000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1570851324000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1570851324000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1570851324000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1570851324000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1570851324000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1570851324000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1570851324000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1570851324000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1570851324000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1570851324000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1570851324000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1570851324000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1570851324000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1570851324000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1570851324000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1570851324000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1570851324000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1570851324000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1570851324000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1570851324000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1570851324000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1570851324000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1570851324000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1570851324000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1570851324000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1570851324000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1570851324000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1570851324000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1570851324000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1570851324000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1570851324000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1570851324000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1570851324000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1570851324000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1570851324000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1570851324000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1570851324000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1570851324000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1570851324000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1570851324000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1570851324000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1570851324000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1570851324000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1570851324000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1570851324000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1570851324000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1570851324000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1570851324000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1570851324000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1570851324000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1570851324000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1570851324000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1570851324000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1570851324000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1570851324000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1570851324000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1570851324000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1570851324000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1570851324000},{"_id":"source/_posts/visitor-pattern/pattern.png","hash":"28aa2dd1b7ad30b0e55c49c59a0f0c7f496d3ec8","modified":1570851324000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1570851324000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1570851324000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1570851324000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1570851324000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1570851324000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1570851324000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1570851324000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1570851324000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1570851324000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1570851324000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1570851324000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1570851324000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1570851324000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1570851324000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1570851324000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1570851324000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1570851324000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1570851324000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1570851324000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1570851324000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1570851324000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1570851324000}],"Category":[],"Data":[],"Page":[{"title":"关于我？","date":"2018-05-13T18:20:44.000Z","mathjax":true,"_content":"\n***我们需要一个合适的机会去一起观察未来是什么样的！！！***\n\n# 基本信息\n\n* **Name** Xiaoyu Lee\n* **Birth** 1995 11 19\n* **Location** BeiJing\n* **Github** github.com/leemaster\n* **Want to do** Rust 工程师 / Golang 工程师 / Faas 容器方向\n\n\n目前我正在 [MTDP(BeiJing)](https://www.meituan.com) 工作，目前的主要参与美团点评私有云建设（MWS）。主要负责：\n\n* MWS 平台能力建设\n* MWS 消息中心建设\n* MWS 管理平台建设\n\n\n# 技能\n\n## 语言栈\n\n* Java\n    * JAVA Stream API 熟练使用\n    * Spring 全家桶\n    * JVM，目前正在写一个Rust版本的玩具JVM [GearFactory](https://github.com/gearfactory/GFJvm)\n\n* Golang \n    * 熟练使用 Golang ，熟悉Channel 和 Golang的内存模型（CSP）\n\n* Rust \n    * 熟练使用Rust\n\n## 框架/工具栈\n\n* Netty \n* Spring \n* Redis \n* RabbitMQ \n* MySQL \n* Tokio \n* Gin \n* Docker / K8S\n\n## 文档技能\n\n能编写高质量的开发文档，熟悉敏捷开发流程，无障碍的英文文献阅读能力。\n\n## 开源和社区\n\nRCTT（Rust China Translate Team） 成员，负责Rust标准库的翻译。\n\n### 开源项目\n\n* inkfish 一个沙箱环境 [GearFactory](https://github.com/gearfactory/inkfish)\n\n\n\n\n# 联系我 \n\n* Mail : leemast3r@outlook.com\n* Phone : 17710529596\n* QQ 627459763\n* Wechat 17710529596\n\n","source":"about/index.md","raw":"---\ntitle: 关于我？\ndate: 2018-05-13 18:20:44\nmathjax: true\n---\n\n***我们需要一个合适的机会去一起观察未来是什么样的！！！***\n\n# 基本信息\n\n* **Name** Xiaoyu Lee\n* **Birth** 1995 11 19\n* **Location** BeiJing\n* **Github** github.com/leemaster\n* **Want to do** Rust 工程师 / Golang 工程师 / Faas 容器方向\n\n\n目前我正在 [MTDP(BeiJing)](https://www.meituan.com) 工作，目前的主要参与美团点评私有云建设（MWS）。主要负责：\n\n* MWS 平台能力建设\n* MWS 消息中心建设\n* MWS 管理平台建设\n\n\n# 技能\n\n## 语言栈\n\n* Java\n    * JAVA Stream API 熟练使用\n    * Spring 全家桶\n    * JVM，目前正在写一个Rust版本的玩具JVM [GearFactory](https://github.com/gearfactory/GFJvm)\n\n* Golang \n    * 熟练使用 Golang ，熟悉Channel 和 Golang的内存模型（CSP）\n\n* Rust \n    * 熟练使用Rust\n\n## 框架/工具栈\n\n* Netty \n* Spring \n* Redis \n* RabbitMQ \n* MySQL \n* Tokio \n* Gin \n* Docker / K8S\n\n## 文档技能\n\n能编写高质量的开发文档，熟悉敏捷开发流程，无障碍的英文文献阅读能力。\n\n## 开源和社区\n\nRCTT（Rust China Translate Team） 成员，负责Rust标准库的翻译。\n\n### 开源项目\n\n* inkfish 一个沙箱环境 [GearFactory](https://github.com/gearfactory/inkfish)\n\n\n\n\n# 联系我 \n\n* Mail : leemast3r@outlook.com\n* Phone : 17710529596\n* QQ 627459763\n* Wechat 17710529596\n\n","updated":"2019-10-12T03:35:24.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1n0ktl700013yxxa563gphf","content":"<p><strong><em>我们需要一个合适的机会去一起观察未来是什么样的！！！</em></strong></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><ul>\n<li><strong>Name</strong> Xiaoyu Lee</li>\n<li><strong>Birth</strong> 1995 11 19</li>\n<li><strong>Location</strong> BeiJing</li>\n<li><strong>Github</strong> github.com/leemaster</li>\n<li><strong>Want to do</strong> Rust 工程师 / Golang 工程师 / Faas 容器方向</li>\n</ul>\n<p>目前我正在 <a href=\"https://www.meituan.com\" target=\"_blank\" rel=\"noopener\">MTDP(BeiJing)</a> 工作，目前的主要参与美团点评私有云建设（MWS）。主要负责：</p>\n<ul>\n<li>MWS 平台能力建设</li>\n<li>MWS 消息中心建设</li>\n<li>MWS 管理平台建设</li>\n</ul>\n<h1 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h1><h2 id=\"语言栈\"><a href=\"#语言栈\" class=\"headerlink\" title=\"语言栈\"></a>语言栈</h2><ul>\n<li><p>Java</p>\n<ul>\n<li>JAVA Stream API 熟练使用</li>\n<li>Spring 全家桶</li>\n<li>JVM，目前正在写一个Rust版本的玩具JVM <a href=\"https://github.com/gearfactory/GFJvm\" target=\"_blank\" rel=\"noopener\">GearFactory</a></li>\n</ul>\n</li>\n<li><p>Golang </p>\n<ul>\n<li>熟练使用 Golang ，熟悉Channel 和 Golang的内存模型（CSP）</li>\n</ul>\n</li>\n<li><p>Rust </p>\n<ul>\n<li>熟练使用Rust</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"框架-工具栈\"><a href=\"#框架-工具栈\" class=\"headerlink\" title=\"框架/工具栈\"></a>框架/工具栈</h2><ul>\n<li>Netty </li>\n<li>Spring </li>\n<li>Redis </li>\n<li>RabbitMQ </li>\n<li>MySQL </li>\n<li>Tokio </li>\n<li>Gin </li>\n<li>Docker / K8S</li>\n</ul>\n<h2 id=\"文档技能\"><a href=\"#文档技能\" class=\"headerlink\" title=\"文档技能\"></a>文档技能</h2><p>能编写高质量的开发文档，熟悉敏捷开发流程，无障碍的英文文献阅读能力。</p>\n<h2 id=\"开源和社区\"><a href=\"#开源和社区\" class=\"headerlink\" title=\"开源和社区\"></a>开源和社区</h2><p>RCTT（Rust China Translate Team） 成员，负责Rust标准库的翻译。</p>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ul>\n<li>inkfish 一个沙箱环境 <a href=\"https://github.com/gearfactory/inkfish\" target=\"_blank\" rel=\"noopener\">GearFactory</a></li>\n</ul>\n<h1 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h1><ul>\n<li>Mail : leemast3r@outlook.com</li>\n<li>Phone : 17710529596</li>\n<li>QQ 627459763</li>\n<li>Wechat 17710529596</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><em>我们需要一个合适的机会去一起观察未来是什么样的！！！</em></strong></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><ul>\n<li><strong>Name</strong> Xiaoyu Lee</li>\n<li><strong>Birth</strong> 1995 11 19</li>\n<li><strong>Location</strong> BeiJing</li>\n<li><strong>Github</strong> github.com/leemaster</li>\n<li><strong>Want to do</strong> Rust 工程师 / Golang 工程师 / Faas 容器方向</li>\n</ul>\n<p>目前我正在 <a href=\"https://www.meituan.com\" target=\"_blank\" rel=\"noopener\">MTDP(BeiJing)</a> 工作，目前的主要参与美团点评私有云建设（MWS）。主要负责：</p>\n<ul>\n<li>MWS 平台能力建设</li>\n<li>MWS 消息中心建设</li>\n<li>MWS 管理平台建设</li>\n</ul>\n<h1 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h1><h2 id=\"语言栈\"><a href=\"#语言栈\" class=\"headerlink\" title=\"语言栈\"></a>语言栈</h2><ul>\n<li><p>Java</p>\n<ul>\n<li>JAVA Stream API 熟练使用</li>\n<li>Spring 全家桶</li>\n<li>JVM，目前正在写一个Rust版本的玩具JVM <a href=\"https://github.com/gearfactory/GFJvm\" target=\"_blank\" rel=\"noopener\">GearFactory</a></li>\n</ul>\n</li>\n<li><p>Golang </p>\n<ul>\n<li>熟练使用 Golang ，熟悉Channel 和 Golang的内存模型（CSP）</li>\n</ul>\n</li>\n<li><p>Rust </p>\n<ul>\n<li>熟练使用Rust</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"框架-工具栈\"><a href=\"#框架-工具栈\" class=\"headerlink\" title=\"框架/工具栈\"></a>框架/工具栈</h2><ul>\n<li>Netty </li>\n<li>Spring </li>\n<li>Redis </li>\n<li>RabbitMQ </li>\n<li>MySQL </li>\n<li>Tokio </li>\n<li>Gin </li>\n<li>Docker / K8S</li>\n</ul>\n<h2 id=\"文档技能\"><a href=\"#文档技能\" class=\"headerlink\" title=\"文档技能\"></a>文档技能</h2><p>能编写高质量的开发文档，熟悉敏捷开发流程，无障碍的英文文献阅读能力。</p>\n<h2 id=\"开源和社区\"><a href=\"#开源和社区\" class=\"headerlink\" title=\"开源和社区\"></a>开源和社区</h2><p>RCTT（Rust China Translate Team） 成员，负责Rust标准库的翻译。</p>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ul>\n<li>inkfish 一个沙箱环境 <a href=\"https://github.com/gearfactory/inkfish\" target=\"_blank\" rel=\"noopener\">GearFactory</a></li>\n</ul>\n<h1 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h1><ul>\n<li>Mail : leemast3r@outlook.com</li>\n<li>Phone : 17710529596</li>\n<li>QQ 627459763</li>\n<li>Wechat 17710529596</li>\n</ul>\n"},{"title":"categories","date":"2018-05-15T08:56:35.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-15 08:56:35\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-10-12T03:35:24.000Z","path":"categories/index.html","layout":"page","_id":"ck1n0ktlc00033yxx3hyqm05t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello My Friend","date":"2018-05-15T11:04:01.000Z","_content":"\n# Friends \n\n* [CodingStar](http://www.codingstar.cn/)\n* [MianShiting](http://www.mianshiting.com/)\n* [Aermin](http://www.aermin.top/)\n* [51ac](https://51ac.club/)","source":"links/index.md","raw":"---\ntitle: Hello My Friend\ndate: 2018-05-15 11:04:01\n---\n\n# Friends \n\n* [CodingStar](http://www.codingstar.cn/)\n* [MianShiting](http://www.mianshiting.com/)\n* [Aermin](http://www.aermin.top/)\n* [51ac](https://51ac.club/)","updated":"2019-10-12T03:35:24.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"ck1n0ktli00063yxxgmgs27zu","content":"<h1 id=\"Friends\"><a href=\"#Friends\" class=\"headerlink\" title=\"Friends\"></a>Friends</h1><ul>\n<li><a href=\"http://www.codingstar.cn/\" target=\"_blank\" rel=\"noopener\">CodingStar</a></li>\n<li><a href=\"http://www.mianshiting.com/\" target=\"_blank\" rel=\"noopener\">MianShiting</a></li>\n<li><a href=\"http://www.aermin.top/\" target=\"_blank\" rel=\"noopener\">Aermin</a></li>\n<li><a href=\"https://51ac.club/\" target=\"_blank\" rel=\"noopener\">51ac</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Friends\"><a href=\"#Friends\" class=\"headerlink\" title=\"Friends\"></a>Friends</h1><ul>\n<li><a href=\"http://www.codingstar.cn/\" target=\"_blank\" rel=\"noopener\">CodingStar</a></li>\n<li><a href=\"http://www.mianshiting.com/\" target=\"_blank\" rel=\"noopener\">MianShiting</a></li>\n<li><a href=\"http://www.aermin.top/\" target=\"_blank\" rel=\"noopener\">Aermin</a></li>\n<li><a href=\"https://51ac.club/\" target=\"_blank\" rel=\"noopener\">51ac</a></li>\n</ul>\n"}],"Post":[{"title":"leetcode 91题","date":"2019-10-11T22:29:27.000Z","mathjax":true,"_content":"\n解码方法，通过从尾部分析开始得到转移方程和边界条件。\n\n<!--more-->\n\n# 分析问题\n\n首先这个问题的目标是求解有多少种解码方法，即给定的一串数字串有多少种解码方法。通俗一点理解这个目标就是，找到一个纯数字字符串有多少种拆分的方法。\n\n那么根据编码规则我们可以得到以下规则\n\n1. 对于1-9的数字，自然可以成为一个解码位\n2. 对于0-6的数字，如果其前方数字为1-2那么这两个数字可以作为一个解码位\n\n但是问题的关键问题是，如何确定是某个位置的数字是作为单一编码（1-9）还是组合编码（10-26）所以有\n \n1. 当一个位置的字符是0，如果其前面数字为1，2，那么一定要和前面的数字共同进行组合成为一个解码位，其他情况直接报错\n2. 当一个位置的字符是7-9时，那么其自然是一个单解码位\n3. 当一个位置的字符是1-6时，如果前面的字符为1，2那么有两种方式 *选择DP的原因*，否则只有一种方式 \n\n考虑边界条件\n\n1. 字符串长度为0，返回0\n2. 字符串首字母为0，返回0\n3. 字符串中出现0且前面的数字不为1，2返回0\n\n# 解决问题\n\n在明确了使用DP解决问题之后，找到转移方程就可以做出来了。\n\n假设解决问题的函数为  $F$ 字符串为 $S$ 则根据问题可以得到\n\n1. 当 $i$ 位置的数字可以单独成为一个编码的时候，则 $F \\left( i \\right) = F \\left( i-1 \\right)$\n2. 当 $i$ 位置的数字可以和前一个数字组成一个编码的时候 $F \\left( i \\right) = F \\left( i-2 \\right)$\n3. 结合前两个条件，便可以得到，当 $i$ 位置的数字同时符合1、2条件的时候 $F \\left( i \\right) = F \\left( i-1 \\right) +  F \\left( i-2 \\right)$\n4. 当 $i$ 的值为0时，那么如果不能和前一位数字组成编码，则不能解码返回0，否则 $F \\left( i \\right) = F \\left( i-1 \\right)$\n\n## C++ 答案\n\n```cpp\n#include<string>\n#include<vector>\nusing namespace std;\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        int n=s.size();\n        if(s.empty()) return 0;\n        if(s[0]=='0') return 0;\n\n        vector<int> dp(n+1,0); // 默认都是第四个条件\n\n        dp[0]=1;\n        dp[1]=1; // 如果只有一个字符且不为0则一定为1\n\n        for(int i=2;i<n+1;++i)\n        {\n            if(s[i-1]!='0') dp[i]+=dp[i-1]; // 分析条件中的第一个条件命中\n\n            if(s.substr(i - 2, 2) <= \"26\" && s.substr(i - 2, 2) >= \"10\") dp[i]+=dp[i-2]; // 分析条件中的第二个条件命中\n\n            // 两个条件组合命中则为第三个条件命中\n        } \n        return dp[n];\n    }\n\n};\n```\n\n## C++ 优化空间后的答案\n\n优化思路，将第四个条件放入循环中进行判断？ TODO。。。\n\n```cpp\n#include<string>\n#include<vector>\nusing namespace std;\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        int n=s.size();\n        if(s.empty()) return 0;\n        if(s[0]=='0') return 0;\n\n        vector<int> dp(n+1,0);\n\n        dp[0]=1;\n        dp[1]=1;\n\n        for(int i=2;i<n+1;++i)\n        {\n            if(s[i-1]!='0') dp[i]+=dp[i-1];\n            if(s.substr(i - 2, 2) <= \"26\" && s.substr(i - 2, 2) >= \"10\") dp[i]+=dp[i-2];\n        }\n        return dp[n];\n    }\n\n};\n```\n","source":"_posts/leetcode-91.md","raw":"---\ntitle: leetcode 91题\ndate: 2019-10-11 22:29:27\nmathjax: true\ntags:\n- leetcode\n- DP\n---\n\n解码方法，通过从尾部分析开始得到转移方程和边界条件。\n\n<!--more-->\n\n# 分析问题\n\n首先这个问题的目标是求解有多少种解码方法，即给定的一串数字串有多少种解码方法。通俗一点理解这个目标就是，找到一个纯数字字符串有多少种拆分的方法。\n\n那么根据编码规则我们可以得到以下规则\n\n1. 对于1-9的数字，自然可以成为一个解码位\n2. 对于0-6的数字，如果其前方数字为1-2那么这两个数字可以作为一个解码位\n\n但是问题的关键问题是，如何确定是某个位置的数字是作为单一编码（1-9）还是组合编码（10-26）所以有\n \n1. 当一个位置的字符是0，如果其前面数字为1，2，那么一定要和前面的数字共同进行组合成为一个解码位，其他情况直接报错\n2. 当一个位置的字符是7-9时，那么其自然是一个单解码位\n3. 当一个位置的字符是1-6时，如果前面的字符为1，2那么有两种方式 *选择DP的原因*，否则只有一种方式 \n\n考虑边界条件\n\n1. 字符串长度为0，返回0\n2. 字符串首字母为0，返回0\n3. 字符串中出现0且前面的数字不为1，2返回0\n\n# 解决问题\n\n在明确了使用DP解决问题之后，找到转移方程就可以做出来了。\n\n假设解决问题的函数为  $F$ 字符串为 $S$ 则根据问题可以得到\n\n1. 当 $i$ 位置的数字可以单独成为一个编码的时候，则 $F \\left( i \\right) = F \\left( i-1 \\right)$\n2. 当 $i$ 位置的数字可以和前一个数字组成一个编码的时候 $F \\left( i \\right) = F \\left( i-2 \\right)$\n3. 结合前两个条件，便可以得到，当 $i$ 位置的数字同时符合1、2条件的时候 $F \\left( i \\right) = F \\left( i-1 \\right) +  F \\left( i-2 \\right)$\n4. 当 $i$ 的值为0时，那么如果不能和前一位数字组成编码，则不能解码返回0，否则 $F \\left( i \\right) = F \\left( i-1 \\right)$\n\n## C++ 答案\n\n```cpp\n#include<string>\n#include<vector>\nusing namespace std;\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        int n=s.size();\n        if(s.empty()) return 0;\n        if(s[0]=='0') return 0;\n\n        vector<int> dp(n+1,0); // 默认都是第四个条件\n\n        dp[0]=1;\n        dp[1]=1; // 如果只有一个字符且不为0则一定为1\n\n        for(int i=2;i<n+1;++i)\n        {\n            if(s[i-1]!='0') dp[i]+=dp[i-1]; // 分析条件中的第一个条件命中\n\n            if(s.substr(i - 2, 2) <= \"26\" && s.substr(i - 2, 2) >= \"10\") dp[i]+=dp[i-2]; // 分析条件中的第二个条件命中\n\n            // 两个条件组合命中则为第三个条件命中\n        } \n        return dp[n];\n    }\n\n};\n```\n\n## C++ 优化空间后的答案\n\n优化思路，将第四个条件放入循环中进行判断？ TODO。。。\n\n```cpp\n#include<string>\n#include<vector>\nusing namespace std;\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        int n=s.size();\n        if(s.empty()) return 0;\n        if(s[0]=='0') return 0;\n\n        vector<int> dp(n+1,0);\n\n        dp[0]=1;\n        dp[1]=1;\n\n        for(int i=2;i<n+1;++i)\n        {\n            if(s[i-1]!='0') dp[i]+=dp[i-1];\n            if(s.substr(i - 2, 2) <= \"26\" && s.substr(i - 2, 2) >= \"10\") dp[i]+=dp[i-2];\n        }\n        return dp[n];\n    }\n\n};\n```\n","slug":"leetcode-91","published":1,"updated":"2019-10-12T03:35:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1n0ktl300003yxx3s95ex4s","content":"<p>解码方法，通过从尾部分析开始得到转移方程和边界条件。</p>\n<a id=\"more\"></a>\n<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><p>首先这个问题的目标是求解有多少种解码方法，即给定的一串数字串有多少种解码方法。通俗一点理解这个目标就是，找到一个纯数字字符串有多少种拆分的方法。</p>\n<p>那么根据编码规则我们可以得到以下规则</p>\n<ol>\n<li>对于1-9的数字，自然可以成为一个解码位</li>\n<li>对于0-6的数字，如果其前方数字为1-2那么这两个数字可以作为一个解码位</li>\n</ol>\n<p>但是问题的关键问题是，如何确定是某个位置的数字是作为单一编码（1-9）还是组合编码（10-26）所以有</p>\n<ol>\n<li>当一个位置的字符是0，如果其前面数字为1，2，那么一定要和前面的数字共同进行组合成为一个解码位，其他情况直接报错</li>\n<li>当一个位置的字符是7-9时，那么其自然是一个单解码位</li>\n<li>当一个位置的字符是1-6时，如果前面的字符为1，2那么有两种方式 <em>选择DP的原因</em>，否则只有一种方式 </li>\n</ol>\n<p>考虑边界条件</p>\n<ol>\n<li>字符串长度为0，返回0</li>\n<li>字符串首字母为0，返回0</li>\n<li>字符串中出现0且前面的数字不为1，2返回0</li>\n</ol>\n<h1 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h1><p>在明确了使用DP解决问题之后，找到转移方程就可以做出来了。</p>\n<p>假设解决问题的函数为  $F$ 字符串为 $S$ 则根据问题可以得到</p>\n<ol>\n<li>当 $i$ 位置的数字可以单独成为一个编码的时候，则 $F \\left( i \\right) = F \\left( i-1 \\right)$</li>\n<li>当 $i$ 位置的数字可以和前一个数字组成一个编码的时候 $F \\left( i \\right) = F \\left( i-2 \\right)$</li>\n<li>结合前两个条件，便可以得到，当 $i$ 位置的数字同时符合1、2条件的时候 $F \\left( i \\right) = F \\left( i-1 \\right) +  F \\left( i-2 \\right)$</li>\n<li>当 $i$ 的值为0时，那么如果不能和前一位数字组成编码，则不能解码返回0，否则 $F \\left( i \\right) = F \\left( i-1 \\right)$</li>\n</ol>\n<h2 id=\"C-答案\"><a href=\"#C-答案\" class=\"headerlink\" title=\"C++ 答案\"></a>C++ 答案</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=s.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>); <span class=\"comment\">// 默认都是第四个条件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=<span class=\"number\">1</span>; <span class=\"comment\">// 如果只有一个字符且不为0则一定为1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i<span class=\"number\">-1</span>]!=<span class=\"string\">'0'</span>) dp[i]+=dp[i<span class=\"number\">-1</span>]; <span class=\"comment\">// 分析条件中的第一个条件命中</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &lt;= <span class=\"string\">\"26\"</span> &amp;&amp; s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &gt;= <span class=\"string\">\"10\"</span>) dp[i]+=dp[i<span class=\"number\">-2</span>]; <span class=\"comment\">// 分析条件中的第二个条件命中</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 两个条件组合命中则为第三个条件命中</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-优化空间后的答案\"><a href=\"#C-优化空间后的答案\" class=\"headerlink\" title=\"C++ 优化空间后的答案\"></a>C++ 优化空间后的答案</h2><p>优化思路，将第四个条件放入循环中进行判断？ TODO。。。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=s.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i<span class=\"number\">-1</span>]!=<span class=\"string\">'0'</span>) dp[i]+=dp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &lt;= <span class=\"string\">\"26\"</span> &amp;&amp; s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &gt;= <span class=\"string\">\"10\"</span>) dp[i]+=dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>解码方法，通过从尾部分析开始得到转移方程和边界条件。</p>","more":"<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><p>首先这个问题的目标是求解有多少种解码方法，即给定的一串数字串有多少种解码方法。通俗一点理解这个目标就是，找到一个纯数字字符串有多少种拆分的方法。</p>\n<p>那么根据编码规则我们可以得到以下规则</p>\n<ol>\n<li>对于1-9的数字，自然可以成为一个解码位</li>\n<li>对于0-6的数字，如果其前方数字为1-2那么这两个数字可以作为一个解码位</li>\n</ol>\n<p>但是问题的关键问题是，如何确定是某个位置的数字是作为单一编码（1-9）还是组合编码（10-26）所以有</p>\n<ol>\n<li>当一个位置的字符是0，如果其前面数字为1，2，那么一定要和前面的数字共同进行组合成为一个解码位，其他情况直接报错</li>\n<li>当一个位置的字符是7-9时，那么其自然是一个单解码位</li>\n<li>当一个位置的字符是1-6时，如果前面的字符为1，2那么有两种方式 <em>选择DP的原因</em>，否则只有一种方式 </li>\n</ol>\n<p>考虑边界条件</p>\n<ol>\n<li>字符串长度为0，返回0</li>\n<li>字符串首字母为0，返回0</li>\n<li>字符串中出现0且前面的数字不为1，2返回0</li>\n</ol>\n<h1 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h1><p>在明确了使用DP解决问题之后，找到转移方程就可以做出来了。</p>\n<p>假设解决问题的函数为  $F$ 字符串为 $S$ 则根据问题可以得到</p>\n<ol>\n<li>当 $i$ 位置的数字可以单独成为一个编码的时候，则 $F \\left( i \\right) = F \\left( i-1 \\right)$</li>\n<li>当 $i$ 位置的数字可以和前一个数字组成一个编码的时候 $F \\left( i \\right) = F \\left( i-2 \\right)$</li>\n<li>结合前两个条件，便可以得到，当 $i$ 位置的数字同时符合1、2条件的时候 $F \\left( i \\right) = F \\left( i-1 \\right) +  F \\left( i-2 \\right)$</li>\n<li>当 $i$ 的值为0时，那么如果不能和前一位数字组成编码，则不能解码返回0，否则 $F \\left( i \\right) = F \\left( i-1 \\right)$</li>\n</ol>\n<h2 id=\"C-答案\"><a href=\"#C-答案\" class=\"headerlink\" title=\"C++ 答案\"></a>C++ 答案</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=s.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>); <span class=\"comment\">// 默认都是第四个条件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=<span class=\"number\">1</span>; <span class=\"comment\">// 如果只有一个字符且不为0则一定为1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i<span class=\"number\">-1</span>]!=<span class=\"string\">'0'</span>) dp[i]+=dp[i<span class=\"number\">-1</span>]; <span class=\"comment\">// 分析条件中的第一个条件命中</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &lt;= <span class=\"string\">\"26\"</span> &amp;&amp; s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &gt;= <span class=\"string\">\"10\"</span>) dp[i]+=dp[i<span class=\"number\">-2</span>]; <span class=\"comment\">// 分析条件中的第二个条件命中</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 两个条件组合命中则为第三个条件命中</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-优化空间后的答案\"><a href=\"#C-优化空间后的答案\" class=\"headerlink\" title=\"C++ 优化空间后的答案\"></a>C++ 优化空间后的答案</h2><p>优化思路，将第四个条件放入循环中进行判断？ TODO。。。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=s.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i<span class=\"number\">-1</span>]!=<span class=\"string\">'0'</span>) dp[i]+=dp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &lt;= <span class=\"string\">\"26\"</span> &amp;&amp; s.substr(i - <span class=\"number\">2</span>, <span class=\"number\">2</span>) &gt;= <span class=\"string\">\"10\"</span>) dp[i]+=dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Google Map Reduce Paper","date":"2019-10-10T04:27:29.000Z","_content":"\nGoogle 三驾马车论文之，MapReduce论文阅读思考。\n\n<!--more-->\n\n\n","source":"_posts/mapreduce.md","raw":"---\ntitle: Google Map Reduce Paper\ndate: 2019-10-10 04:27:29\ntags:\n- 分布式系统\n---\n\nGoogle 三驾马车论文之，MapReduce论文阅读思考。\n\n<!--more-->\n\n\n","slug":"mapreduce","published":1,"updated":"2019-10-12T03:35:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1n0ktla00023yxxx1kasq06","content":"<p>Google 三驾马车论文之，MapReduce论文阅读思考。</p>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<p>Google 三驾马车论文之，MapReduce论文阅读思考。</p>","more":""},{"title":"Skiplist 设计实现","date":"2019-10-12T09:58:45.000Z","mathjax":true,"_content":"\n跳跃表论文学习和Golang实现。\n\n[Skip Lists: A Probabilistic Alternative to Balanced Trees](https://epaperpress.com/sortsearch/download/skiplist.pdf).\n\n<!--more-->\n\n\n","source":"_posts/skiplist-design.md","raw":"---\ntitle: Skiplist 设计实现\ndate: 2019-10-12 09:58:45\nmathjax: true\ntags:\n- Data Structure\n---\n\n跳跃表论文学习和Golang实现。\n\n[Skip Lists: A Probabilistic Alternative to Balanced Trees](https://epaperpress.com/sortsearch/download/skiplist.pdf).\n\n<!--more-->\n\n\n","slug":"skiplist-design","published":1,"updated":"2019-10-12T03:35:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1n0ktlg00053yxxyp0ya9vz","content":"<p>跳跃表论文学习和Golang实现。</p>\n<p><a href=\"https://epaperpress.com/sortsearch/download/skiplist.pdf\" target=\"_blank\" rel=\"noopener\">Skip Lists: A Probabilistic Alternative to Balanced Trees</a>.</p>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<p>跳跃表论文学习和Golang实现。</p>\n<p><a href=\"https://epaperpress.com/sortsearch/download/skiplist.pdf\" target=\"_blank\" rel=\"noopener\">Skip Lists: A Probabilistic Alternative to Balanced Trees</a>.</p>","more":""},{"title":"leetcode 72题","date":"2019-10-09T21:43:26.000Z","mathjax":true,"_content":"\n字符串编辑距离\n\n<!--more-->\n\n# 分析问题\n\n首先看到题目，明确目标，确定最小的编辑距离。\n\n再得知对两个字符串的处理有三种方式：\n\n1. 插入一个字符\n2. 删除一个字符\n3. 替换一个字符\n\n那么假设有两个字符串 $S_1$ 和 $S_2$ \n\n可以做出如下推导，对于 $S_1$ 和 $S_2$ 可以有 $S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 两个子串\n\n那么两个子串的编辑距离可以从其子问题得到解决即 $S_1 \\left[ 0 ... i-1 \\right]$ 和 $S_2 \\left[ 0 ... j-1 \\right]$ 的编辑距离\n\n二者的关系是，字符串的编辑距离等于其子串编辑距离和两个子串下一个字符的比较结果得到，即\n\n$S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 的编辑距离为\n\n$S_1 \\left[ 0 ... i-1 \\right]$ 和 $S_2 \\left[ 0 ... j-1 \\right]$ 的结果为 $L$ 那么\n\n对于 $S_1 \\left[ i \\right]$ 和 $S_2 \\left[ j \\right]$ 有两种情况 \n\n1. 两个字符相等，则 $S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 的编辑距离为 $L$\n2. 两个字符不想等，则有 $S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 的编辑距离为 $min \\left( L ,S , R \\right)$ 其中 $S$ 为 $S_1 \\left[ 0 ... i-1 \\right]$ 进行三种操作的结果 + 1，同理可知 $R$\n\n\n# 解决问题\n\n通过分析我们发现了，这个题目下，有重叠子问题，那么可以使用动态规划来解决。\n\n首先考虑初始条件，初始化的条件就是假设每个字符串都有长度为0的可能性，那么当其中任意一个字符串长度为0的话，另外一个字符串的编辑距离是随着长度递增的。\n\n## C++ 答案\n\n```cpp\n#include<vector>\nusing namespace std;\nclass Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        int len1 = word1.size();\n        int len2 = word2.size();\n        if(len1 == 0)return len2;\n        if(len2 == 0)return len1;\n        vector<vector<int>> dp(len1,vector<int>(len2));\n        // 初始化\n        for(int i = 0;i < len1;i++)dp[i][0] = i;\n        for(int i = 0;i < len2;i++)dp[0][i] = i;\n\n        for(int i = 1;i < len1;i++){\n          for(int j = 1;j < len2;j++){\n            // 如果相等则编辑距离不变，如果不想等则三种操作选取最小的\n            if(word1[i] == word2[j])dp[i][j] = dp[i-1][j-1];\n            elsedp[i][j]=min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j])+1);\n          }\n        }\n\n        return dp[len1-1][len2-1];\n    }\n};\n```\n\n## Golang 答案\n\n```golang\nfunc minDistance(word1 string, word2 string) int {\n    len1 := len(word1)\n    len2 := len(word2)\n\n    if len1 == 0 {\n      return len2\n    }\n\n    if len2 == 0 {\n      return len1\n    }\n\n    dp := [len1][len2]int\n\n}\n```\n\n## Rust 答案\n\n```rust\nimpl Solution {\n    pub fn min_distance(word1: String, word2: String) -> i32 {\n        \n    }\n}\n```","source":"_posts/leetcode-72.md","raw":"---\ntitle: leetcode 72题\ndate: 2019-10-09 21:43:26\nmathjax: true\ntags:\n- leetcode\n- DP\n---\n\n字符串编辑距离\n\n<!--more-->\n\n# 分析问题\n\n首先看到题目，明确目标，确定最小的编辑距离。\n\n再得知对两个字符串的处理有三种方式：\n\n1. 插入一个字符\n2. 删除一个字符\n3. 替换一个字符\n\n那么假设有两个字符串 $S_1$ 和 $S_2$ \n\n可以做出如下推导，对于 $S_1$ 和 $S_2$ 可以有 $S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 两个子串\n\n那么两个子串的编辑距离可以从其子问题得到解决即 $S_1 \\left[ 0 ... i-1 \\right]$ 和 $S_2 \\left[ 0 ... j-1 \\right]$ 的编辑距离\n\n二者的关系是，字符串的编辑距离等于其子串编辑距离和两个子串下一个字符的比较结果得到，即\n\n$S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 的编辑距离为\n\n$S_1 \\left[ 0 ... i-1 \\right]$ 和 $S_2 \\left[ 0 ... j-1 \\right]$ 的结果为 $L$ 那么\n\n对于 $S_1 \\left[ i \\right]$ 和 $S_2 \\left[ j \\right]$ 有两种情况 \n\n1. 两个字符相等，则 $S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 的编辑距离为 $L$\n2. 两个字符不想等，则有 $S_1 \\left[ 0 ... i \\right]$ 和 $S_2 \\left[ 0 ... j \\right]$ 的编辑距离为 $min \\left( L ,S , R \\right)$ 其中 $S$ 为 $S_1 \\left[ 0 ... i-1 \\right]$ 进行三种操作的结果 + 1，同理可知 $R$\n\n\n# 解决问题\n\n通过分析我们发现了，这个题目下，有重叠子问题，那么可以使用动态规划来解决。\n\n首先考虑初始条件，初始化的条件就是假设每个字符串都有长度为0的可能性，那么当其中任意一个字符串长度为0的话，另外一个字符串的编辑距离是随着长度递增的。\n\n## C++ 答案\n\n```cpp\n#include<vector>\nusing namespace std;\nclass Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        int len1 = word1.size();\n        int len2 = word2.size();\n        if(len1 == 0)return len2;\n        if(len2 == 0)return len1;\n        vector<vector<int>> dp(len1,vector<int>(len2));\n        // 初始化\n        for(int i = 0;i < len1;i++)dp[i][0] = i;\n        for(int i = 0;i < len2;i++)dp[0][i] = i;\n\n        for(int i = 1;i < len1;i++){\n          for(int j = 1;j < len2;j++){\n            // 如果相等则编辑距离不变，如果不想等则三种操作选取最小的\n            if(word1[i] == word2[j])dp[i][j] = dp[i-1][j-1];\n            elsedp[i][j]=min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j])+1);\n          }\n        }\n\n        return dp[len1-1][len2-1];\n    }\n};\n```\n\n## Golang 答案\n\n```golang\nfunc minDistance(word1 string, word2 string) int {\n    len1 := len(word1)\n    len2 := len(word2)\n\n    if len1 == 0 {\n      return len2\n    }\n\n    if len2 == 0 {\n      return len1\n    }\n\n    dp := [len1][len2]int\n\n}\n```\n\n## Rust 答案\n\n```rust\nimpl Solution {\n    pub fn min_distance(word1: String, word2: String) -> i32 {\n        \n    }\n}\n```","slug":"leetcode-72","published":1,"updated":"2019-10-12T03:35:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1n0ktlj00073yxxxe9xdl4d","content":"<p>字符串编辑距离</p>\n<a id=\"more\"></a>\n<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><p>首先看到题目，明确目标，确定最小的编辑距离。</p>\n<p>再得知对两个字符串的处理有三种方式：</p>\n<ol>\n<li>插入一个字符</li>\n<li>删除一个字符</li>\n<li>替换一个字符</li>\n</ol>\n<p>那么假设有两个字符串 $S_1$ 和 $S_2$ </p>\n<p>可以做出如下推导，对于 $S_1$ 和 $S_2$ 可以有 $S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 两个子串</p>\n<p>那么两个子串的编辑距离可以从其子问题得到解决即 $S_1 \\left[ 0 … i-1 \\right]$ 和 $S_2 \\left[ 0 … j-1 \\right]$ 的编辑距离</p>\n<p>二者的关系是，字符串的编辑距离等于其子串编辑距离和两个子串下一个字符的比较结果得到，即</p>\n<p>$S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 的编辑距离为</p>\n<p>$S_1 \\left[ 0 … i-1 \\right]$ 和 $S_2 \\left[ 0 … j-1 \\right]$ 的结果为 $L$ 那么</p>\n<p>对于 $S_1 \\left[ i \\right]$ 和 $S_2 \\left[ j \\right]$ 有两种情况 </p>\n<ol>\n<li>两个字符相等，则 $S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 的编辑距离为 $L$</li>\n<li>两个字符不想等，则有 $S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 的编辑距离为 $min \\left( L ,S , R \\right)$ 其中 $S$ 为 $S_1 \\left[ 0 … i-1 \\right]$ 进行三种操作的结果 + 1，同理可知 $R$</li>\n</ol>\n<h1 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h1><p>通过分析我们发现了，这个题目下，有重叠子问题，那么可以使用动态规划来解决。</p>\n<p>首先考虑初始条件，初始化的条件就是假设每个字符串都有长度为0的可能性，那么当其中任意一个字符串长度为0的话，另外一个字符串的编辑距离是随着长度递增的。</p>\n<h2 id=\"C-答案\"><a href=\"#C-答案\" class=\"headerlink\" title=\"C++ 答案\"></a>C++ 答案</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minDistance</span><span class=\"params\">(<span class=\"built_in\">string</span> word1, <span class=\"built_in\">string</span> word2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1 = word1.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2 = word2.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len1 == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> len2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len2 == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> len1;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; dp(len1,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(len2));</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; len1;i++)dp[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; len2;i++)dp[<span class=\"number\">0</span>][i] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt; len1;i++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j &lt; len2;j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果相等则编辑距离不变，如果不想等则三种操作选取最小的</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(word1[i] == word2[j])dp[i][j] = dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            elsedp[i][j]=min(dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>],min(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j])+<span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len1<span class=\"number\">-1</span>][len2<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Golang-答案\"><a href=\"#Golang-答案\" class=\"headerlink\" title=\"Golang 答案\"></a>Golang 答案</h2><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minDistance</span><span class=\"params\">(word1 <span class=\"keyword\">string</span>, word2 <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    len1 := <span class=\"built_in\">len</span>(word1)</span><br><span class=\"line\">    len2 := <span class=\"built_in\">len</span>(word2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len1 == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> len2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len2 == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> len1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dp := [len1][len2]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rust-答案\"><a href=\"#Rust-答案\" class=\"headerlink\" title=\"Rust 答案\"></a>Rust 答案</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> Solution &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">min_distance</span></span>(word1: <span class=\"built_in\">String</span>, word2: <span class=\"built_in\">String</span>) -&gt; <span class=\"built_in\">i32</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>字符串编辑距离</p>","more":"<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><p>首先看到题目，明确目标，确定最小的编辑距离。</p>\n<p>再得知对两个字符串的处理有三种方式：</p>\n<ol>\n<li>插入一个字符</li>\n<li>删除一个字符</li>\n<li>替换一个字符</li>\n</ol>\n<p>那么假设有两个字符串 $S_1$ 和 $S_2$ </p>\n<p>可以做出如下推导，对于 $S_1$ 和 $S_2$ 可以有 $S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 两个子串</p>\n<p>那么两个子串的编辑距离可以从其子问题得到解决即 $S_1 \\left[ 0 … i-1 \\right]$ 和 $S_2 \\left[ 0 … j-1 \\right]$ 的编辑距离</p>\n<p>二者的关系是，字符串的编辑距离等于其子串编辑距离和两个子串下一个字符的比较结果得到，即</p>\n<p>$S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 的编辑距离为</p>\n<p>$S_1 \\left[ 0 … i-1 \\right]$ 和 $S_2 \\left[ 0 … j-1 \\right]$ 的结果为 $L$ 那么</p>\n<p>对于 $S_1 \\left[ i \\right]$ 和 $S_2 \\left[ j \\right]$ 有两种情况 </p>\n<ol>\n<li>两个字符相等，则 $S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 的编辑距离为 $L$</li>\n<li>两个字符不想等，则有 $S_1 \\left[ 0 … i \\right]$ 和 $S_2 \\left[ 0 … j \\right]$ 的编辑距离为 $min \\left( L ,S , R \\right)$ 其中 $S$ 为 $S_1 \\left[ 0 … i-1 \\right]$ 进行三种操作的结果 + 1，同理可知 $R$</li>\n</ol>\n<h1 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h1><p>通过分析我们发现了，这个题目下，有重叠子问题，那么可以使用动态规划来解决。</p>\n<p>首先考虑初始条件，初始化的条件就是假设每个字符串都有长度为0的可能性，那么当其中任意一个字符串长度为0的话，另外一个字符串的编辑距离是随着长度递增的。</p>\n<h2 id=\"C-答案\"><a href=\"#C-答案\" class=\"headerlink\" title=\"C++ 答案\"></a>C++ 答案</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minDistance</span><span class=\"params\">(<span class=\"built_in\">string</span> word1, <span class=\"built_in\">string</span> word2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1 = word1.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2 = word2.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len1 == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> len2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len2 == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> len1;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; dp(len1,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(len2));</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; len1;i++)dp[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; len2;i++)dp[<span class=\"number\">0</span>][i] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt; len1;i++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j &lt; len2;j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果相等则编辑距离不变，如果不想等则三种操作选取最小的</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(word1[i] == word2[j])dp[i][j] = dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            elsedp[i][j]=min(dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>],min(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j])+<span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len1<span class=\"number\">-1</span>][len2<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Golang-答案\"><a href=\"#Golang-答案\" class=\"headerlink\" title=\"Golang 答案\"></a>Golang 答案</h2><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minDistance</span><span class=\"params\">(word1 <span class=\"keyword\">string</span>, word2 <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    len1 := <span class=\"built_in\">len</span>(word1)</span><br><span class=\"line\">    len2 := <span class=\"built_in\">len</span>(word2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len1 == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> len2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len2 == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> len1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dp := [len1][len2]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rust-答案\"><a href=\"#Rust-答案\" class=\"headerlink\" title=\"Rust 答案\"></a>Rust 答案</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> Solution &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">min_distance</span></span>(word1: <span class=\"built_in\">String</span>, word2: <span class=\"built_in\">String</span>) -&gt; <span class=\"built_in\">i32</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LevelDB 中Skiplist实现分析","date":"2019-10-12T09:58:55.000Z","_content":"\nLevelDB 中的Skiplist 源码分析\n\n<!--more-->","source":"_posts/skiplist-leveldb.md","raw":"---\ntitle: LevelDB 中Skiplist实现分析\ndate: 2019-10-12 09:58:55\ntags:\n- leveldb\n---\n\nLevelDB 中的Skiplist 源码分析\n\n<!--more-->","slug":"skiplist-leveldb","published":1,"updated":"2019-10-12T03:35:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1n0ktll00083yxxp0cxhqsz","content":"<p>LevelDB 中的Skiplist 源码分析</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>LevelDB 中的Skiplist 源码分析</p>","more":""},{"title":"访问者模式","date":"2019-05-12T23:36:45.000Z","_content":"\n在实现编译器的时候，需要对AST进行访问遍历以及获取属性等一些操作，所以访问者模式是一定会用上的。主要用于访问AST的时候动态获取属性，并且进行语义规约的时候可以修改一些属性。\n\n<!--more-->\n\n# 访问者设计模式\n\n首先看一下类图\n\n![](visitor-pattern/pattern.png)\n\n","source":"_posts/visitor-pattern.md","raw":"---\ntitle: 访问者模式\ndate: 2019-05-12 23:36:45\ntags:\n---\n\n在实现编译器的时候，需要对AST进行访问遍历以及获取属性等一些操作，所以访问者模式是一定会用上的。主要用于访问AST的时候动态获取属性，并且进行语义规约的时候可以修改一些属性。\n\n<!--more-->\n\n# 访问者设计模式\n\n首先看一下类图\n\n![](visitor-pattern/pattern.png)\n\n","slug":"visitor-pattern","published":1,"updated":"2019-10-12T03:35:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1n0ktlo000a3yxxpbr1ou7u","content":"<p>在实现编译器的时候，需要对AST进行访问遍历以及获取属性等一些操作，所以访问者模式是一定会用上的。主要用于访问AST的时候动态获取属性，并且进行语义规约的时候可以修改一些属性。</p>\n<a id=\"more\"></a>\n<h1 id=\"访问者设计模式\"><a href=\"#访问者设计模式\" class=\"headerlink\" title=\"访问者设计模式\"></a>访问者设计模式</h1><p>首先看一下类图</p>\n<p><img src=\"visitor-pattern/pattern.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在实现编译器的时候，需要对AST进行访问遍历以及获取属性等一些操作，所以访问者模式是一定会用上的。主要用于访问AST的时候动态获取属性，并且进行语义规约的时候可以修改一些属性。</p>","more":"<h1 id=\"访问者设计模式\"><a href=\"#访问者设计模式\" class=\"headerlink\" title=\"访问者设计模式\"></a>访问者设计模式</h1><p>首先看一下类图</p>\n<p><img src=\"visitor-pattern/pattern.png\" alt=\"\"></p>"},{"title":"Rust 中令人迷惑的所有权和生命周期","date":"2019-05-06T11:10:56.000Z","_content":"\n# 编程语言中的值和引用\n\n在任何一个语言中都有值和引用的概念，这是一个很简单的概念，但是也很容易让人忽略内存本质的概念。\n\n<!--more-->\n\n冯诺伊曼体系，以内存为中心的计算机体系结构，提供了这两个概念存在的理论基础。\n\n什么是值，什么是引用，并没有一个很良好的定义，因为在不同的语言中行为是不同的。在解释这个事情之前，首先解释一下在运行时内存的粗略划分。大家应该都知道在运行时有两个内存区域，一个是栈空间，一个是堆空间。\n\n## 栈空间\n\n栈空间，在运行时用于存储临时变量，包括传递到函数内实际参数和在函数内部出现的生命语句，都有可能产生栈上变量，而变量一定是有值的，哪怕是NULL这种零值。这个值存在哪呢？\n\n这个值可能存在在栈空间，也有可能存在在堆空间。比如机器的字长是32位的时候，那么一个栈空间的分配单位自然也是32位，而32位足够来放一个32位整型的值，所以这个时候，值是存在在栈空间的，当然长整型也是可以的。那么在C语言中常见的 **char\\*** 呢？有的小伙伴可能会想到，一个char是8位，那么三个char的字符串就放在栈空间不就好了吗？很显然这样会给编译器带来额外的解释翻译负担，所以 **char\\*** 其实是一个32位的地址，用于指向堆空间的某块内存。这时会将堆空间的地址给程序中的变量。在栈空间进行存储。\n\n大部分语言实现栈空间存储地址的时候，都会封装一个对象进行存储形如：\n\n```C\nstruct reference{\n  void * ptr ;\n}\n```\n\n栈上分配变量，应该是顺序分配的，也就是按照声明顺序进行分配地址空间。\n\n## 堆空间\n\n堆空间，自然是很大的空间，在堆空间分配内存，可能并不连续，比如经典的数据结构链表。\n\n那么堆空间的内存应该是可以被访问的，如何访问呢？首先需要得到一个地址，并且拿到类型，我们讨论一下数组类型，这个类型需要一个地址，需要一个长度，也需要一个内部元素类型，知道这三个元信息就可以对数组进行访问了。 大多数的实现应该和下方C代码一样的形式。\n\n```C\nstruct arr_ref {\n  void * ptr;\n  size_t len;\n  size_t type_len;\n}\n```\n\n当我们拥有一个arr_ref 类型的时候，就可以对数组进行访问了，包括遍历和获取其中的值，修改其中的值。\n\n## 从栈到堆\n\n在上面解释了，什么是栈，什么是堆，那么从栈到堆是一个必然的过程，因为极少数的可能性是，直接使用栈就足够满足一个函数的内存需求的。从栈到堆其实就是一个解开引用，获取一些用于访问内存的元信息。\n\n比如经常用的元信息：\n\n* 地址\n* 长度\n* 读写权限\n\n那么这些元信息，基本都是基本类型，也就是一个int或者一个long可以存储的类型，自然编译器就会让这些变量去栈上分配内存，并生成一个从栈到堆的凭证。这里我认为 **arr_ref** 类型就是一个访问内存的凭证。\n\n所以从栈到堆，是一个对引用进行解析，并最终返回使用引用操作内存的结果。\n\n# Rust 所有权和Move 语义\n\nRust 不允许使用未经初始化的变量，是在编译期进行解决和实现的。接下来主要讨论Rust中的值，可以认为是在栈上进行分配释放的变量。\n\n## 初始化和移动初步\n\n在Rust 中，当程序运行时，一个值只能有一个owner ，语义表明一个值只能被一个变量所拥有，这里的值包括，Vec的凭证，所有基本类型，Vec的分配比较特殊。Vec 中的元素会存放到堆空间中去，但是内存凭证会存放到栈空间中去。当使用一个Vec的时候\n\n```rust\nlet v = vec![1,2,3,4];\n```\n\n变量v 是拥有一个Vec的所有权的，拥有的是一个vec_ref类型的值的所有权。\n\n```C\nstruct vec_ref {\n  void * buffer;\n  size_t capcity;\n  size_t length;\n}\n```\n\n当出现下面情况的时候 \n\n```rust\nlet v2 = v;\n```\n\n这个时候，编译器会将代码转换成如下的c代码的语义。\n\n```C\nint[] v2 = v;\nv = NULL;\n```\n\n这个时候，v变量变得不可用了，但是C的编译器并不能在编译时检查到，v已经变成了NULL，而接下来使用v进行操作的时候，就会出现悬垂问题。\n\n## 自动释放\n\nRust 使用scope 来决定一个变量中的值是否释放。scope 就是编译中的变量作用域概念。\n\n例如 ：\n\n```rust\nlet v = vec![1,2,3];\n{\n  let s = v;\n}\nprintln!(\"{}\",v);\n```\n\n这段代码中，因为v已经将所有权交给了s，但是s的作用域只在，全局作用域的下面的子作用域，而通过上面的分析来看，v已经为NULL了，Rust 编译器会检查这个问题，从而抛错误出来；\n\n而s 也会在离开作用域的时候被释放掉。上述代码在C中语义如下；\n\n```C\narr_ref v = arr_ref{ptr,3,3};\n\n{\n  arr_ref s = v;\n  v = NULL;\n  s = NULL;\n  free(s.ptr);\n}\n\n// 使用 v  自然出错\n```\n\n## 再看移动\n\nRust 中大多数的类型，在进行为变量绑定值的过程和传递函数参数的过程中，都不会执行拷贝动作，而是使用move代替，将原有的值带入一个新的作用域中。变量离开作用域，值也被销毁。\n\n但是在上面代码中，vec会出现移动后调用失败现象，那么对于基本类型呢？\n\n```rust\nlet v : i32 = 1;\n{\n  let s : i32 = v;\n}\nprintln!(\"{}\",v);\n```\n\n这个代码并不会产生任何编译器异常，因为i32类型实现了Copy 特性，用于拷贝，s 和 v 变量是两个不同的地址，同时值是相同的，也就是拷贝的语义。如果实现了拷贝Copy 的类型在进行赋值和函数传递的时候，并不会出现移动，而是用拷贝代替。\n\n### 嵌套结构移动\n\n在C++ 中下面的操作是很正常的。\n\n```c++\nvector<string> vec;\nvec.psuh_back(\"sss\");\nvec.push_back(\"sss\");\n\nstring a = vec[0];\n```\n\n但是Rust中同样的写法会出错，这个原因解释起来可以很形象，我们思考一下，在孤儿院中都是没有父母的小孩，那么我们可以收养一个孤儿，但是我们并不能收养一个有父母的小孩，在Rust中透过父亲来移动一个孩子的所有权。\n\n```rust\nstruct P {\n  c : i32\n}\n\nlet p = P{c:15};\n\nlet child = p.c;\n\n```\n\n但是上面的代码是可以通过编译的，因为i32实现了Copy语义，并不会发生移动，但是如果移动string类型的时候，因为string类型并没有实现Copy，因此这个string的所有权是归Vec所有的，自然通过父亲来拿儿子的时候会法生产错误。\n\n因为Vec实现了Index特性，所以会有一些限制。\n\n# Rust 引用\n\nTODO ...","source":"_posts/rust-variables.md","raw":"---\ntitle: Rust 中令人迷惑的所有权和生命周期\ndate: 2019-05-06 11:10:56\ntags:\n- Rust\n---\n\n# 编程语言中的值和引用\n\n在任何一个语言中都有值和引用的概念，这是一个很简单的概念，但是也很容易让人忽略内存本质的概念。\n\n<!--more-->\n\n冯诺伊曼体系，以内存为中心的计算机体系结构，提供了这两个概念存在的理论基础。\n\n什么是值，什么是引用，并没有一个很良好的定义，因为在不同的语言中行为是不同的。在解释这个事情之前，首先解释一下在运行时内存的粗略划分。大家应该都知道在运行时有两个内存区域，一个是栈空间，一个是堆空间。\n\n## 栈空间\n\n栈空间，在运行时用于存储临时变量，包括传递到函数内实际参数和在函数内部出现的生命语句，都有可能产生栈上变量，而变量一定是有值的，哪怕是NULL这种零值。这个值存在哪呢？\n\n这个值可能存在在栈空间，也有可能存在在堆空间。比如机器的字长是32位的时候，那么一个栈空间的分配单位自然也是32位，而32位足够来放一个32位整型的值，所以这个时候，值是存在在栈空间的，当然长整型也是可以的。那么在C语言中常见的 **char\\*** 呢？有的小伙伴可能会想到，一个char是8位，那么三个char的字符串就放在栈空间不就好了吗？很显然这样会给编译器带来额外的解释翻译负担，所以 **char\\*** 其实是一个32位的地址，用于指向堆空间的某块内存。这时会将堆空间的地址给程序中的变量。在栈空间进行存储。\n\n大部分语言实现栈空间存储地址的时候，都会封装一个对象进行存储形如：\n\n```C\nstruct reference{\n  void * ptr ;\n}\n```\n\n栈上分配变量，应该是顺序分配的，也就是按照声明顺序进行分配地址空间。\n\n## 堆空间\n\n堆空间，自然是很大的空间，在堆空间分配内存，可能并不连续，比如经典的数据结构链表。\n\n那么堆空间的内存应该是可以被访问的，如何访问呢？首先需要得到一个地址，并且拿到类型，我们讨论一下数组类型，这个类型需要一个地址，需要一个长度，也需要一个内部元素类型，知道这三个元信息就可以对数组进行访问了。 大多数的实现应该和下方C代码一样的形式。\n\n```C\nstruct arr_ref {\n  void * ptr;\n  size_t len;\n  size_t type_len;\n}\n```\n\n当我们拥有一个arr_ref 类型的时候，就可以对数组进行访问了，包括遍历和获取其中的值，修改其中的值。\n\n## 从栈到堆\n\n在上面解释了，什么是栈，什么是堆，那么从栈到堆是一个必然的过程，因为极少数的可能性是，直接使用栈就足够满足一个函数的内存需求的。从栈到堆其实就是一个解开引用，获取一些用于访问内存的元信息。\n\n比如经常用的元信息：\n\n* 地址\n* 长度\n* 读写权限\n\n那么这些元信息，基本都是基本类型，也就是一个int或者一个long可以存储的类型，自然编译器就会让这些变量去栈上分配内存，并生成一个从栈到堆的凭证。这里我认为 **arr_ref** 类型就是一个访问内存的凭证。\n\n所以从栈到堆，是一个对引用进行解析，并最终返回使用引用操作内存的结果。\n\n# Rust 所有权和Move 语义\n\nRust 不允许使用未经初始化的变量，是在编译期进行解决和实现的。接下来主要讨论Rust中的值，可以认为是在栈上进行分配释放的变量。\n\n## 初始化和移动初步\n\n在Rust 中，当程序运行时，一个值只能有一个owner ，语义表明一个值只能被一个变量所拥有，这里的值包括，Vec的凭证，所有基本类型，Vec的分配比较特殊。Vec 中的元素会存放到堆空间中去，但是内存凭证会存放到栈空间中去。当使用一个Vec的时候\n\n```rust\nlet v = vec![1,2,3,4];\n```\n\n变量v 是拥有一个Vec的所有权的，拥有的是一个vec_ref类型的值的所有权。\n\n```C\nstruct vec_ref {\n  void * buffer;\n  size_t capcity;\n  size_t length;\n}\n```\n\n当出现下面情况的时候 \n\n```rust\nlet v2 = v;\n```\n\n这个时候，编译器会将代码转换成如下的c代码的语义。\n\n```C\nint[] v2 = v;\nv = NULL;\n```\n\n这个时候，v变量变得不可用了，但是C的编译器并不能在编译时检查到，v已经变成了NULL，而接下来使用v进行操作的时候，就会出现悬垂问题。\n\n## 自动释放\n\nRust 使用scope 来决定一个变量中的值是否释放。scope 就是编译中的变量作用域概念。\n\n例如 ：\n\n```rust\nlet v = vec![1,2,3];\n{\n  let s = v;\n}\nprintln!(\"{}\",v);\n```\n\n这段代码中，因为v已经将所有权交给了s，但是s的作用域只在，全局作用域的下面的子作用域，而通过上面的分析来看，v已经为NULL了，Rust 编译器会检查这个问题，从而抛错误出来；\n\n而s 也会在离开作用域的时候被释放掉。上述代码在C中语义如下；\n\n```C\narr_ref v = arr_ref{ptr,3,3};\n\n{\n  arr_ref s = v;\n  v = NULL;\n  s = NULL;\n  free(s.ptr);\n}\n\n// 使用 v  自然出错\n```\n\n## 再看移动\n\nRust 中大多数的类型，在进行为变量绑定值的过程和传递函数参数的过程中，都不会执行拷贝动作，而是使用move代替，将原有的值带入一个新的作用域中。变量离开作用域，值也被销毁。\n\n但是在上面代码中，vec会出现移动后调用失败现象，那么对于基本类型呢？\n\n```rust\nlet v : i32 = 1;\n{\n  let s : i32 = v;\n}\nprintln!(\"{}\",v);\n```\n\n这个代码并不会产生任何编译器异常，因为i32类型实现了Copy 特性，用于拷贝，s 和 v 变量是两个不同的地址，同时值是相同的，也就是拷贝的语义。如果实现了拷贝Copy 的类型在进行赋值和函数传递的时候，并不会出现移动，而是用拷贝代替。\n\n### 嵌套结构移动\n\n在C++ 中下面的操作是很正常的。\n\n```c++\nvector<string> vec;\nvec.psuh_back(\"sss\");\nvec.push_back(\"sss\");\n\nstring a = vec[0];\n```\n\n但是Rust中同样的写法会出错，这个原因解释起来可以很形象，我们思考一下，在孤儿院中都是没有父母的小孩，那么我们可以收养一个孤儿，但是我们并不能收养一个有父母的小孩，在Rust中透过父亲来移动一个孩子的所有权。\n\n```rust\nstruct P {\n  c : i32\n}\n\nlet p = P{c:15};\n\nlet child = p.c;\n\n```\n\n但是上面的代码是可以通过编译的，因为i32实现了Copy语义，并不会发生移动，但是如果移动string类型的时候，因为string类型并没有实现Copy，因此这个string的所有权是归Vec所有的，自然通过父亲来拿儿子的时候会法生产错误。\n\n因为Vec实现了Index特性，所以会有一些限制。\n\n# Rust 引用\n\nTODO ...","slug":"rust-variables","published":1,"updated":"2019-10-12T03:35:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1n0ktlq000b3yxxge80kibo","content":"<h1 id=\"编程语言中的值和引用\"><a href=\"#编程语言中的值和引用\" class=\"headerlink\" title=\"编程语言中的值和引用\"></a>编程语言中的值和引用</h1><p>在任何一个语言中都有值和引用的概念，这是一个很简单的概念，但是也很容易让人忽略内存本质的概念。</p>\n<a id=\"more\"></a>\n<p>冯诺伊曼体系，以内存为中心的计算机体系结构，提供了这两个概念存在的理论基础。</p>\n<p>什么是值，什么是引用，并没有一个很良好的定义，因为在不同的语言中行为是不同的。在解释这个事情之前，首先解释一下在运行时内存的粗略划分。大家应该都知道在运行时有两个内存区域，一个是栈空间，一个是堆空间。</p>\n<h2 id=\"栈空间\"><a href=\"#栈空间\" class=\"headerlink\" title=\"栈空间\"></a>栈空间</h2><p>栈空间，在运行时用于存储临时变量，包括传递到函数内实际参数和在函数内部出现的生命语句，都有可能产生栈上变量，而变量一定是有值的，哪怕是NULL这种零值。这个值存在哪呢？</p>\n<p>这个值可能存在在栈空间，也有可能存在在堆空间。比如机器的字长是32位的时候，那么一个栈空间的分配单位自然也是32位，而32位足够来放一个32位整型的值，所以这个时候，值是存在在栈空间的，当然长整型也是可以的。那么在C语言中常见的 <strong>char*</strong> 呢？有的小伙伴可能会想到，一个char是8位，那么三个char的字符串就放在栈空间不就好了吗？很显然这样会给编译器带来额外的解释翻译负担，所以 <strong>char*</strong> 其实是一个32位的地址，用于指向堆空间的某块内存。这时会将堆空间的地址给程序中的变量。在栈空间进行存储。</p>\n<p>大部分语言实现栈空间存储地址的时候，都会封装一个对象进行存储形如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">reference</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> * ptr ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>栈上分配变量，应该是顺序分配的，也就是按照声明顺序进行分配地址空间。</p>\n<h2 id=\"堆空间\"><a href=\"#堆空间\" class=\"headerlink\" title=\"堆空间\"></a>堆空间</h2><p>堆空间，自然是很大的空间，在堆空间分配内存，可能并不连续，比如经典的数据结构链表。</p>\n<p>那么堆空间的内存应该是可以被访问的，如何访问呢？首先需要得到一个地址，并且拿到类型，我们讨论一下数组类型，这个类型需要一个地址，需要一个长度，也需要一个内部元素类型，知道这三个元信息就可以对数组进行访问了。 大多数的实现应该和下方C代码一样的形式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">arr_ref</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> * ptr;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> len;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> type_len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们拥有一个arr_ref 类型的时候，就可以对数组进行访问了，包括遍历和获取其中的值，修改其中的值。</p>\n<h2 id=\"从栈到堆\"><a href=\"#从栈到堆\" class=\"headerlink\" title=\"从栈到堆\"></a>从栈到堆</h2><p>在上面解释了，什么是栈，什么是堆，那么从栈到堆是一个必然的过程，因为极少数的可能性是，直接使用栈就足够满足一个函数的内存需求的。从栈到堆其实就是一个解开引用，获取一些用于访问内存的元信息。</p>\n<p>比如经常用的元信息：</p>\n<ul>\n<li>地址</li>\n<li>长度</li>\n<li>读写权限</li>\n</ul>\n<p>那么这些元信息，基本都是基本类型，也就是一个int或者一个long可以存储的类型，自然编译器就会让这些变量去栈上分配内存，并生成一个从栈到堆的凭证。这里我认为 <strong>arr_ref</strong> 类型就是一个访问内存的凭证。</p>\n<p>所以从栈到堆，是一个对引用进行解析，并最终返回使用引用操作内存的结果。</p>\n<h1 id=\"Rust-所有权和Move-语义\"><a href=\"#Rust-所有权和Move-语义\" class=\"headerlink\" title=\"Rust 所有权和Move 语义\"></a>Rust 所有权和Move 语义</h1><p>Rust 不允许使用未经初始化的变量，是在编译期进行解决和实现的。接下来主要讨论Rust中的值，可以认为是在栈上进行分配释放的变量。</p>\n<h2 id=\"初始化和移动初步\"><a href=\"#初始化和移动初步\" class=\"headerlink\" title=\"初始化和移动初步\"></a>初始化和移动初步</h2><p>在Rust 中，当程序运行时，一个值只能有一个owner ，语义表明一个值只能被一个变量所拥有，这里的值包括，Vec的凭证，所有基本类型，Vec的分配比较特殊。Vec 中的元素会存放到堆空间中去，但是内存凭证会存放到栈空间中去。当使用一个Vec的时候</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n<p>变量v 是拥有一个Vec的所有权的，拥有的是一个vec_ref类型的值的所有权。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">vec_ref</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> * buffer;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> capcity;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当出现下面情况的时候 </p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v2 = v;</span><br></pre></td></tr></table></figure>\n<p>这个时候，编译器会将代码转换成如下的c代码的语义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] v2 = v;</span><br><span class=\"line\">v = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<p>这个时候，v变量变得不可用了，但是C的编译器并不能在编译时检查到，v已经变成了NULL，而接下来使用v进行操作的时候，就会出现悬垂问题。</p>\n<h2 id=\"自动释放\"><a href=\"#自动释放\" class=\"headerlink\" title=\"自动释放\"></a>自动释放</h2><p>Rust 使用scope 来决定一个变量中的值是否释放。scope 就是编译中的变量作用域概念。</p>\n<p>例如 ：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>,v);</span><br></pre></td></tr></table></figure>\n<p>这段代码中，因为v已经将所有权交给了s，但是s的作用域只在，全局作用域的下面的子作用域，而通过上面的分析来看，v已经为NULL了，Rust 编译器会检查这个问题，从而抛错误出来；</p>\n<p>而s 也会在离开作用域的时候被释放掉。上述代码在C中语义如下；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr_ref v = arr_ref&#123;ptr,<span class=\"number\">3</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  arr_ref s = v;</span><br><span class=\"line\">  v = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(s.ptr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 v  自然出错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"再看移动\"><a href=\"#再看移动\" class=\"headerlink\" title=\"再看移动\"></a>再看移动</h2><p>Rust 中大多数的类型，在进行为变量绑定值的过程和传递函数参数的过程中，都不会执行拷贝动作，而是使用move代替，将原有的值带入一个新的作用域中。变量离开作用域，值也被销毁。</p>\n<p>但是在上面代码中，vec会出现移动后调用失败现象，那么对于基本类型呢？</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v : <span class=\"built_in\">i32</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s : <span class=\"built_in\">i32</span> = v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>,v);</span><br></pre></td></tr></table></figure>\n<p>这个代码并不会产生任何编译器异常，因为i32类型实现了Copy 特性，用于拷贝，s 和 v 变量是两个不同的地址，同时值是相同的，也就是拷贝的语义。如果实现了拷贝Copy 的类型在进行赋值和函数传递的时候，并不会出现移动，而是用拷贝代替。</p>\n<h3 id=\"嵌套结构移动\"><a href=\"#嵌套结构移动\" class=\"headerlink\" title=\"嵌套结构移动\"></a>嵌套结构移动</h3><p>在C++ 中下面的操作是很正常的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; vec;</span><br><span class=\"line\">vec.psuh_back(<span class=\"string\">\"sss\"</span>);</span><br><span class=\"line\">vec.push_back(<span class=\"string\">\"sss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> a = vec[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<p>但是Rust中同样的写法会出错，这个原因解释起来可以很形象，我们思考一下，在孤儿院中都是没有父母的小孩，那么我们可以收养一个孤儿，但是我们并不能收养一个有父母的小孩，在Rust中透过父亲来移动一个孩子的所有权。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">P</span></span> &#123;</span><br><span class=\"line\">  c : <span class=\"built_in\">i32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = P&#123;c:<span class=\"number\">15</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child = p.c;</span><br></pre></td></tr></table></figure>\n<p>但是上面的代码是可以通过编译的，因为i32实现了Copy语义，并不会发生移动，但是如果移动string类型的时候，因为string类型并没有实现Copy，因此这个string的所有权是归Vec所有的，自然通过父亲来拿儿子的时候会法生产错误。</p>\n<p>因为Vec实现了Index特性，所以会有一些限制。</p>\n<h1 id=\"Rust-引用\"><a href=\"#Rust-引用\" class=\"headerlink\" title=\"Rust 引用\"></a>Rust 引用</h1><p>TODO …</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"编程语言中的值和引用\"><a href=\"#编程语言中的值和引用\" class=\"headerlink\" title=\"编程语言中的值和引用\"></a>编程语言中的值和引用</h1><p>在任何一个语言中都有值和引用的概念，这是一个很简单的概念，但是也很容易让人忽略内存本质的概念。</p>","more":"<p>冯诺伊曼体系，以内存为中心的计算机体系结构，提供了这两个概念存在的理论基础。</p>\n<p>什么是值，什么是引用，并没有一个很良好的定义，因为在不同的语言中行为是不同的。在解释这个事情之前，首先解释一下在运行时内存的粗略划分。大家应该都知道在运行时有两个内存区域，一个是栈空间，一个是堆空间。</p>\n<h2 id=\"栈空间\"><a href=\"#栈空间\" class=\"headerlink\" title=\"栈空间\"></a>栈空间</h2><p>栈空间，在运行时用于存储临时变量，包括传递到函数内实际参数和在函数内部出现的生命语句，都有可能产生栈上变量，而变量一定是有值的，哪怕是NULL这种零值。这个值存在哪呢？</p>\n<p>这个值可能存在在栈空间，也有可能存在在堆空间。比如机器的字长是32位的时候，那么一个栈空间的分配单位自然也是32位，而32位足够来放一个32位整型的值，所以这个时候，值是存在在栈空间的，当然长整型也是可以的。那么在C语言中常见的 <strong>char*</strong> 呢？有的小伙伴可能会想到，一个char是8位，那么三个char的字符串就放在栈空间不就好了吗？很显然这样会给编译器带来额外的解释翻译负担，所以 <strong>char*</strong> 其实是一个32位的地址，用于指向堆空间的某块内存。这时会将堆空间的地址给程序中的变量。在栈空间进行存储。</p>\n<p>大部分语言实现栈空间存储地址的时候，都会封装一个对象进行存储形如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">reference</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> * ptr ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>栈上分配变量，应该是顺序分配的，也就是按照声明顺序进行分配地址空间。</p>\n<h2 id=\"堆空间\"><a href=\"#堆空间\" class=\"headerlink\" title=\"堆空间\"></a>堆空间</h2><p>堆空间，自然是很大的空间，在堆空间分配内存，可能并不连续，比如经典的数据结构链表。</p>\n<p>那么堆空间的内存应该是可以被访问的，如何访问呢？首先需要得到一个地址，并且拿到类型，我们讨论一下数组类型，这个类型需要一个地址，需要一个长度，也需要一个内部元素类型，知道这三个元信息就可以对数组进行访问了。 大多数的实现应该和下方C代码一样的形式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">arr_ref</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> * ptr;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> len;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> type_len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们拥有一个arr_ref 类型的时候，就可以对数组进行访问了，包括遍历和获取其中的值，修改其中的值。</p>\n<h2 id=\"从栈到堆\"><a href=\"#从栈到堆\" class=\"headerlink\" title=\"从栈到堆\"></a>从栈到堆</h2><p>在上面解释了，什么是栈，什么是堆，那么从栈到堆是一个必然的过程，因为极少数的可能性是，直接使用栈就足够满足一个函数的内存需求的。从栈到堆其实就是一个解开引用，获取一些用于访问内存的元信息。</p>\n<p>比如经常用的元信息：</p>\n<ul>\n<li>地址</li>\n<li>长度</li>\n<li>读写权限</li>\n</ul>\n<p>那么这些元信息，基本都是基本类型，也就是一个int或者一个long可以存储的类型，自然编译器就会让这些变量去栈上分配内存，并生成一个从栈到堆的凭证。这里我认为 <strong>arr_ref</strong> 类型就是一个访问内存的凭证。</p>\n<p>所以从栈到堆，是一个对引用进行解析，并最终返回使用引用操作内存的结果。</p>\n<h1 id=\"Rust-所有权和Move-语义\"><a href=\"#Rust-所有权和Move-语义\" class=\"headerlink\" title=\"Rust 所有权和Move 语义\"></a>Rust 所有权和Move 语义</h1><p>Rust 不允许使用未经初始化的变量，是在编译期进行解决和实现的。接下来主要讨论Rust中的值，可以认为是在栈上进行分配释放的变量。</p>\n<h2 id=\"初始化和移动初步\"><a href=\"#初始化和移动初步\" class=\"headerlink\" title=\"初始化和移动初步\"></a>初始化和移动初步</h2><p>在Rust 中，当程序运行时，一个值只能有一个owner ，语义表明一个值只能被一个变量所拥有，这里的值包括，Vec的凭证，所有基本类型，Vec的分配比较特殊。Vec 中的元素会存放到堆空间中去，但是内存凭证会存放到栈空间中去。当使用一个Vec的时候</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n<p>变量v 是拥有一个Vec的所有权的，拥有的是一个vec_ref类型的值的所有权。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">vec_ref</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> * buffer;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> capcity;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当出现下面情况的时候 </p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v2 = v;</span><br></pre></td></tr></table></figure>\n<p>这个时候，编译器会将代码转换成如下的c代码的语义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] v2 = v;</span><br><span class=\"line\">v = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<p>这个时候，v变量变得不可用了，但是C的编译器并不能在编译时检查到，v已经变成了NULL，而接下来使用v进行操作的时候，就会出现悬垂问题。</p>\n<h2 id=\"自动释放\"><a href=\"#自动释放\" class=\"headerlink\" title=\"自动释放\"></a>自动释放</h2><p>Rust 使用scope 来决定一个变量中的值是否释放。scope 就是编译中的变量作用域概念。</p>\n<p>例如 ：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>,v);</span><br></pre></td></tr></table></figure>\n<p>这段代码中，因为v已经将所有权交给了s，但是s的作用域只在，全局作用域的下面的子作用域，而通过上面的分析来看，v已经为NULL了，Rust 编译器会检查这个问题，从而抛错误出来；</p>\n<p>而s 也会在离开作用域的时候被释放掉。上述代码在C中语义如下；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr_ref v = arr_ref&#123;ptr,<span class=\"number\">3</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  arr_ref s = v;</span><br><span class=\"line\">  v = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(s.ptr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 v  自然出错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"再看移动\"><a href=\"#再看移动\" class=\"headerlink\" title=\"再看移动\"></a>再看移动</h2><p>Rust 中大多数的类型，在进行为变量绑定值的过程和传递函数参数的过程中，都不会执行拷贝动作，而是使用move代替，将原有的值带入一个新的作用域中。变量离开作用域，值也被销毁。</p>\n<p>但是在上面代码中，vec会出现移动后调用失败现象，那么对于基本类型呢？</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v : <span class=\"built_in\">i32</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s : <span class=\"built_in\">i32</span> = v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>,v);</span><br></pre></td></tr></table></figure>\n<p>这个代码并不会产生任何编译器异常，因为i32类型实现了Copy 特性，用于拷贝，s 和 v 变量是两个不同的地址，同时值是相同的，也就是拷贝的语义。如果实现了拷贝Copy 的类型在进行赋值和函数传递的时候，并不会出现移动，而是用拷贝代替。</p>\n<h3 id=\"嵌套结构移动\"><a href=\"#嵌套结构移动\" class=\"headerlink\" title=\"嵌套结构移动\"></a>嵌套结构移动</h3><p>在C++ 中下面的操作是很正常的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; vec;</span><br><span class=\"line\">vec.psuh_back(<span class=\"string\">\"sss\"</span>);</span><br><span class=\"line\">vec.push_back(<span class=\"string\">\"sss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> a = vec[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<p>但是Rust中同样的写法会出错，这个原因解释起来可以很形象，我们思考一下，在孤儿院中都是没有父母的小孩，那么我们可以收养一个孤儿，但是我们并不能收养一个有父母的小孩，在Rust中透过父亲来移动一个孩子的所有权。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">P</span></span> &#123;</span><br><span class=\"line\">  c : <span class=\"built_in\">i32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = P&#123;c:<span class=\"number\">15</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child = p.c;</span><br></pre></td></tr></table></figure>\n<p>但是上面的代码是可以通过编译的，因为i32实现了Copy语义，并不会发生移动，但是如果移动string类型的时候，因为string类型并没有实现Copy，因此这个string的所有权是归Vec所有的，自然通过父亲来拿儿子的时候会法生产错误。</p>\n<p>因为Vec实现了Index特性，所以会有一些限制。</p>\n<h1 id=\"Rust-引用\"><a href=\"#Rust-引用\" class=\"headerlink\" title=\"Rust 引用\"></a>Rust 引用</h1><p>TODO …</p>"}],"PostAsset":[{"_id":"source/_posts/visitor-pattern/pattern.png","slug":"pattern.png","post":"ck1n0ktlo000a3yxxpbr1ou7u","modified":1,"renderable":0},{"_id":"source/_posts/skiplist-design/skiplist.pdf","post":"ck1n0ktlg00053yxxyp0ya9vz","slug":"skiplist.pdf","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ck1n0ktl300003yxx3s95ex4s","tag_id":"ck1n0ktle00043yxxo9imb61g","_id":"ck1n0ktlv000d3yxx4ow9cfyl"},{"post_id":"ck1n0ktl300003yxx3s95ex4s","tag_id":"ck1n0ktln00093yxxxpl5gxak","_id":"ck1n0ktlv000e3yxxkmfxle3u"},{"post_id":"ck1n0ktla00023yxxx1kasq06","tag_id":"ck1n0ktlr000c3yxx7aio7oc0","_id":"ck1n0ktlw000g3yxx3lsq60r9"},{"post_id":"ck1n0ktlg00053yxxyp0ya9vz","tag_id":"ck1n0ktlv000f3yxxqenb11uc","_id":"ck1n0ktly000i3yxx9gj0govc"},{"post_id":"ck1n0ktlj00073yxxxe9xdl4d","tag_id":"ck1n0ktle00043yxxo9imb61g","_id":"ck1n0ktlz000k3yxxp42nmmvf"},{"post_id":"ck1n0ktlj00073yxxxe9xdl4d","tag_id":"ck1n0ktln00093yxxxpl5gxak","_id":"ck1n0ktm0000l3yxxojthgtmw"},{"post_id":"ck1n0ktll00083yxxp0cxhqsz","tag_id":"ck1n0ktly000j3yxxlqphxcaw","_id":"ck1n0ktm0000n3yxx3c2zwqj1"},{"post_id":"ck1n0ktlq000b3yxxge80kibo","tag_id":"ck1n0ktm0000m3yxxzem8yxmp","_id":"ck1n0ktm1000o3yxxpt4ynn5k"}],"Tag":[{"name":"leetcode","_id":"ck1n0ktle00043yxxo9imb61g"},{"name":"DP","_id":"ck1n0ktln00093yxxxpl5gxak"},{"name":"分布式系统","_id":"ck1n0ktlr000c3yxx7aio7oc0"},{"name":"Data Structure","_id":"ck1n0ktlv000f3yxxqenb11uc"},{"name":"leveldb","_id":"ck1n0ktly000j3yxxlqphxcaw"},{"name":"Rust","_id":"ck1n0ktm0000m3yxxzem8yxmp"}]}}