{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1526348518960},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1526348518960},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1526348518960},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1526348518962},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1526348518962},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1526348518962},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1526348518962},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1526348518962},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1526348518963},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1526348518963},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1526348518963},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1526348518964},{"_id":"themes/next/_config.yml","hash":"54475342b6e2c44c90eacee7bec64e03d0cdf0b4","modified":1527338661470},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1526348518964},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1526348518965},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1526348518991},{"_id":"source/_posts/Algorithms-Design-Recursion-and-Divide-conquer.md","hash":"9b09c2004de21ab032a2f2afeec540282d10c8d6","modified":1526355486588},{"_id":"source/_posts/Authority-Control-RBAC-0.md","hash":"500026508f7c703ddbedb63d9a2c6da2aac0af9a","modified":1527344710642},{"_id":"source/_posts/Authority-Control-RBAC-1.md","hash":"7f46d5118d324cc0acda02704d507c3fa8126586","modified":1528447004566},{"_id":"source/_posts/C-Note-extern-keyword.md","hash":"fa84cbab34ceb4ca3d13bcf1b5f3741110897f19","modified":1526919677729},{"_id":"source/_posts/Compiler-Theory-NFA-and-DFA.md","hash":"e7ed60ae20abcaeb20b4fb2f35dae6228865dcec","modified":1526697473560},{"_id":"source/_posts/Disruptor-Practice-Source-Code-and-Pattern.md","hash":"1c78d6e42094516c073ad1683930c08500704bdd","modified":1529143381558},{"_id":"source/_posts/Disruptor-Practice-Usage.md","hash":"7db5c8d91b90b72fb7e66ecc4926139d0066b52b","modified":1529758456029},{"_id":"source/_posts/GO-Tutorial-programming-OOP.md","hash":"eb379ed3a8ee47a181d2a01ab306898c457de274","modified":1528557955934},{"_id":"source/_posts/Go-Practice-concurrency-start.md","hash":"dae48e9d897ae5d8245bb67c1e762918788b65f4","modified":1529052633924},{"_id":"source/_posts/Go-Practice-interface-and-type.md","hash":"8054991150bc94eced8835997a3372bc965fb6c0","modified":1528975522453},{"_id":"source/_posts/Go-Tutorial-programming-in-senquence.md","hash":"5e56c8f50a9599ec3694ef09c7792677c1434049","modified":1527840465660},{"_id":"source/_posts/Java8-stream-record.md","hash":"f91c49a4db82564d1c8e41236189dfa704580722","modified":1529678152779},{"_id":"source/_posts/Linux-Programming-Autotools.md","hash":"5b2b7fdf5e6471121091acd4764aeb38ec9374d9","modified":1527003376626},{"_id":"source/_posts/Linux-Programming-Error-handle.md","hash":"c8df87c90e1068a1217d9bc49638693e098a6ef2","modified":1526956828890},{"_id":"source/_posts/Linux-Programming-File-operation.md","hash":"8adf152354870d03f9c91570cf3c12b9037121fd","modified":1527336162808},{"_id":"source/_posts/Linux-Programming-Socket.md","hash":"48723ea434354b2a7eafeb852a2d246932d26933","modified":1526910653363},{"_id":"source/_posts/Objective-C-Tutorial-I-m-dieing.md","hash":"e64fd5c116541054dc9151cb35a26aaae6e8a13e","modified":1527336160241},{"_id":"source/_posts/Spring-in-action-Bean-and-Context.md","hash":"8fefcc9139a53d1c79a1e11809399d060e5f4ec8","modified":1529784792224},{"_id":"source/_posts/Virtual-Box-multi-network-card-configuration.md","hash":"cb075800ad647d2ec95931add9c706db6fba908c","modified":1526905541700},{"_id":"source/about/index.md","hash":"f0f8f011dae6e087e9832452afdb79151481b592","modified":1528904891213},{"_id":"source/categories/index.md","hash":"fa0c2a86c245ea40acd18d10e6be29d81515f370","modified":1526346071467},{"_id":"source/links/index.md","hash":"a36cccfca37a01969daff772108eb8726c555426","modified":1528889124249},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1526348518961},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1526348518961},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1526348518961},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1526348518962},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1526348518965},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1526348518966},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1526348518966},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1526348518967},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1526348518967},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1526348518967},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1526348518967},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1526348518968},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1526348518968},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1526348518968},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1526348518968},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1526348518968},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1526348518968},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1526348518969},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1526348518969},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1526348518969},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1526348518970},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1526348518989},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1526348518990},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1526348518990},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1526348518990},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1526348518991},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1526348518991},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1526348518991},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1526348518992},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1526348518992},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1526348519070},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1526348519070},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1526348519070},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348519022},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526348518969},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526348518969},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1526348518970},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1526348518970},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1526348518970},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1526348518971},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1526348518971},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1526348518971},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1526348518972},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1526348518972},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1526348518972},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1526348518973},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1526348518974},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1526348518974},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1526348518974},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1526348518976},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1526348518977},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1526348518978},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1526348518985},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1526348518985},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1526348518986},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1526348518986},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1526348518986},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1526348518987},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1526348518987},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1526348518992},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1526348518993},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1526348518993},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1526348518993},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1526348518993},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1526348518993},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1526348518994},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1526348518994},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1526348518994},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1526348519022},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1526348519023},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526348519023},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526348519023},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526348519023},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526348519024},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526348519024},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526348519024},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526348519025},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526348519025},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526348519025},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526348519025},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526348519025},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526348519026},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1526348519026},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526348519026},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526348519026},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526348519026},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526348519027},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348518977},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348518978},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348519012},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348519012},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348519013},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348519021},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526348519022},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1526348518973},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1526348518973},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1526348518974},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1526348518975},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1526348518975},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1526348518975},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1526348518976},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1526348518976},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1526348518976},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1526348518977},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1526348518977},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1526348518978},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1526348518979},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1526348518979},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1526348518979},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1526348518979},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1526348518980},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1526348518980},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1526348518980},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1526348518981},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1526348518981},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1526348518981},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1526348518982},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1526348518982},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1526348518982},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1526348518983},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1526348518983},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1526348518983},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1526348518984},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1526348518984},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1526348518984},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1526348518984},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1526348518985},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1526348518985},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1526348518988},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1526348518988},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1526348518989},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1526348518989},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1526348519012},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1526348519012},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1526348519013},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1526348519013},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1526348519020},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1526348519021},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1526348519021},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1526348519022},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526348519027},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526348519028},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1526348519028},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526348519028},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1526348519028},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526348519028},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1526348519029},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1526348519029},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526348519030},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526348519030},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1526348519031},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526348519035},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526348519037},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1526348519038},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1526348519038},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1526348519038},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1526348519042},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1526348519042},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1526348519043},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1526348519043},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1526348519044},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1526348519044},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1526348519044},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526348519044},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1526348519044},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1526348519054},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1526348519055},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1526348519055},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1526348519056},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1526348519056},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1526348519056},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1526348519056},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1526348519057},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1526348519058},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1526348519057},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1526348519058},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1526348519058},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1526348519059},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1526348519059},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1526348519059},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1526348519059},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1526348519060},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1526348519060},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1526348519060},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1526348519060},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1526348519061},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1526348519061},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1526348519061},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1526348519061},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1526348519062},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1526348519062},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1526348519062},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1526348519067},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1526348519067},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526348519069},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526348519069},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526348519069},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526348519055},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1526348518987},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1526348518987},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1526348518994},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1526348518995},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1526348518995},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1526348518995},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1526348518995},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1526348519000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1526348519006},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1526348519010},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1526348519010},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1526348519011},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1526348519011},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1526348519011},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1526348519012},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1526348519012},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1526348519014},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1526348519014},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1526348519015},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1526348519015},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1526348519015},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1526348519016},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526348519016},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1526348519016},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1526348519017},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1526348519017},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1526348519017},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526348519018},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1526348519018},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1526348519018},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1526348519018},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1526348519019},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1526348519019},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1526348519020},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1526348519020},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1526348519030},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1526348519033},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1526348519034},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1526348519035},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526348519038},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526348519038},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526348519039},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526348519039},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526348519039},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526348519039},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1526348519041},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1526348519042},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1526348519042},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526348519043},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1526348519043},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526348519045},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526348519045},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526348519045},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526348519066},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526348519066},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1526348519034},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526348519054},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526348519054},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526348519068},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1526348518996},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1526348518997},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1526348518997},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1526348518997},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1526348518997},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1526348518997},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1526348518998},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1526348518998},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1526348518999},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1526348518999},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1526348518999},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1526348519000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1526348519000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1526348519000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1526348519001},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1526348519000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1526348519001},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1526348519001},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1526348519001},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1526348519001},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1526348519002},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1526348519002},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1526348519002},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1526348519002},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1526348519002},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1526348519003},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1526348519003},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1526348519003},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1526348519004},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1526348519004},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1526348519004},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1526348519004},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1526348519005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1526348519005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1526348519005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1526348519005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1526348519005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1526348519006},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1526348519006},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1526348519006},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1526348519006},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1526348519006},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1526348519007},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1526348519007},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1526348519007},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1526348519007},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1526348519008},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1526348519008},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1526348519008},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1526348519008},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1526348519009},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1526348519009},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1526348519009},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1526348519009},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1526348519009},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1526348519009},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1526348519010},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1526348519010},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1526348519016},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526348519017},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526348519018},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526348519032},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526348519032},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526348519033},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526348519033},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1526348519033},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526348519039},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526348519039},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1526348519040},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1526348519040},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526348519040},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1526348519040},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526348519047},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526348519049},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526348519053},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1526348519037},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1526348519065},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1526348519052},{"_id":"public/categories/index.html","hash":"d5165eb6c7a5636ded4a6dec1f82e5c47e92d4f8","modified":1529784981803},{"_id":"public/links/index.html","hash":"2f896041956826321d065758e694a76841ab9379","modified":1529784981803},{"_id":"public/2018/06/23/Spring-in-action-Bean-and-Context/index.html","hash":"4d47356d35f3b4c06cf80c94ab1feffa7bd87e97","modified":1529784981803},{"_id":"public/2018/06/17/Disruptor-Practice-Source-Code-and-Pattern/index.html","hash":"c9747481063a9ec0faae95c1aa12aadc9696044b","modified":1529784981803},{"_id":"public/2018/06/17/Disruptor-Practice-Usage/index.html","hash":"8d579913e4826229cd1801b76c32b2ba9cd402a5","modified":1529784981803},{"_id":"public/archives/2018/05/page/2/index.html","hash":"2b8eb882ad7e4b3341f1b943ed7bd6cdcb037b93","modified":1529784981803},{"_id":"public/archives/2018/06/index.html","hash":"88393c463b8a8304500465b50c6ce441f1343bd4","modified":1529784981803},{"_id":"public/categories/Algorithms/index.html","hash":"8838139f757dbd6bd1aec12a1ed31e3e1dcb80d1","modified":1529784981803},{"_id":"public/categories/Authority-Control/index.html","hash":"dcb923d80f47fa1a3d0a24b17c7af248fec5fa73","modified":1529784981803},{"_id":"public/categories/C/index.html","hash":"e3e5d91fce0764dddf06b7dbf8f54974f0cc19ba","modified":1529784981803},{"_id":"public/categories/Compiler/index.html","hash":"1cf5ba6d00a32f78bfd9ae2dbb6b75ad8cf365bf","modified":1529784981804},{"_id":"public/categories/Practice/index.html","hash":"3179fdaab774ad0f937b5b44f6e5aa22299c993c","modified":1529784981804},{"_id":"public/categories/Tutorial/index.html","hash":"3175f4d5b643edc6a026631601d2eca7a4668f57","modified":1529784981804},{"_id":"public/categories/Linux-Programming/index.html","hash":"b87c0bd28ca402137e809c425376df42a25340bb","modified":1529784981804},{"_id":"public/categories/Virtual-Machine/index.html","hash":"4805e5fef7677aad60dfeba46acf2390a1575b83","modified":1529784981804},{"_id":"public/tags/Divide-and-Conquer/index.html","hash":"5cee331641f99a027797b8b7521ba292428f45fb","modified":1529784981804},{"_id":"public/tags/Recursion/index.html","hash":"ea3848fa8049d718cad4ed0adfcd0580ff5b81f3","modified":1529784981804},{"_id":"public/tags/RBAC/index.html","hash":"845f4e64966448527e338956f0b7cc33f8ad8f0e","modified":1529784981804},{"_id":"public/tags/program-note/index.html","hash":"f5400076a42f3e2aa26ba20d1d7a1dde5d45401b","modified":1529784981804},{"_id":"public/tags/Compiler-Theory/index.html","hash":"cff8d15fff7657f0d45abce93af69f5dd3321037","modified":1529784981804},{"_id":"public/tags/Algorithms/index.html","hash":"112816e9c72c926a85cc05d00d6f7b7822df35df","modified":1529784981804},{"_id":"public/tags/Java/index.html","hash":"c2c0840622507dd26a10bef56dcec081ee99e4aa","modified":1529784981804},{"_id":"public/tags/Concurrency/index.html","hash":"c49f858c617f6c184c3e6c36a35114211414f60d","modified":1529784981804},{"_id":"public/tags/Go/index.html","hash":"d8c0b21aaad3ca0884f3b1f3846a6fde191d29d1","modified":1529784981804},{"_id":"public/tags/system-call/index.html","hash":"0039c15528fb98af7a5fd16de03c6b12377e4ef6","modified":1529784981804},{"_id":"public/tags/socket/index.html","hash":"7ee2240a00c855b818bb96a719e5dec63c231379","modified":1529784981804},{"_id":"public/tags/Objective-c/index.html","hash":"e5689a7a788fbad0535d703d001f049d58d87a78","modified":1529784981804},{"_id":"public/tags/Spring/index.html","hash":"5a4d9b4bb10fb50bb4006e5dbf986582c509b30e","modified":1529784981805},{"_id":"public/tags/Experiment/index.html","hash":"a96843fe66cfc55df7b3e776fd85a30b4d13331c","modified":1529784981805},{"_id":"public/tags/Configuration/index.html","hash":"05a335566ed5fab656585514f19603ed9b2dbb59","modified":1529784981805},{"_id":"public/about/index.html","hash":"c93d20a9013d070b0e3c016def7c58929b4f3362","modified":1529784981805},{"_id":"public/2018/06/21/Java8-stream-record/index.html","hash":"6d3399c3d17c0322bf288f80746e599f40e18db2","modified":1529784981805},{"_id":"public/2018/06/15/Go-Practice-concurrency-start/index.html","hash":"c48110fe8958613a48d9b1866f7f9e971bc51b9b","modified":1529784981805},{"_id":"public/2018/06/15/Go-Practice-interface-and-type/index.html","hash":"6f3f4b6bf1d9e2973eb670183355254ca1dc273f","modified":1529784981805},{"_id":"public/2018/06/01/GO-Tutorial-programming-OOP/index.html","hash":"ea22ff9cff4c2f6068ff6b4b6bb3dc5b6bc42b84","modified":1529784981805},{"_id":"public/2018/05/27/Authority-Control-RBAC-1/index.html","hash":"f8bee1e90a6ead712b103e51fd654d56f23ab29f","modified":1529784981805},{"_id":"public/2018/05/27/Authority-Control-RBAC-0/index.html","hash":"633e473fcce10c3a575ecd0eafb895cca654df7e","modified":1529784981805},{"_id":"public/2018/05/25/Objective-C-Tutorial-I-m-dieing/index.html","hash":"7b15e6fd42d1dfcd595e6547d97ca7a9bfda972d","modified":1529784981805},{"_id":"public/2018/05/23/Linux-Programming-Autotools/index.html","hash":"c0bb669c24d2536d7156a2c038d0655dc9b961a7","modified":1529784981805},{"_id":"public/2018/05/22/C-Note-extern-keyword/index.html","hash":"2d23fb02a1defe080c91178d2a90e912d8b7f4ab","modified":1529784981805},{"_id":"public/2018/05/22/Linux-Programming-Error-handle/index.html","hash":"4285eda4c560fa2ba00b42a2f6108fe19984e7e1","modified":1529784981805},{"_id":"public/2018/05/22/Linux-Programming-File-operation/index.html","hash":"82998829241935bad5ad9e0adb762b0defdcc0d0","modified":1529784981805},{"_id":"public/2018/05/22/Linux-Programming-Socket/index.html","hash":"c6c23dff7a94b5773051092150fed3fcc2ce27be","modified":1529784981806},{"_id":"public/2018/05/22/Virtual-Box-multi-network-card-configuration/index.html","hash":"f549e739793195dea2206234e9a7f48b1f77d709","modified":1529784981806},{"_id":"public/2018/05/19/Go-Tutorial-programming-in-senquence/index.html","hash":"79c24348b4f35835d8af9575e2f0d16077b54665","modified":1529784981806},{"_id":"public/2018/05/16/Compiler-Theory-NFA-and-DFA/index.html","hash":"e767cb37d402617d0a44d48bd4cc7b03adf1e165","modified":1529784981806},{"_id":"public/2018/05/15/Algorithms-Design-Recursion-and-Divide-conquer/index.html","hash":"80a6ac1760ab90f457d330e3dc0eed4a1b9740e6","modified":1529784981806},{"_id":"public/archives/index.html","hash":"245bbd54f730559b39b2375d3b4861651a65d2b6","modified":1529784981806},{"_id":"public/archives/page/2/index.html","hash":"33bff5ebcb6614b3cff2f4ee9c4f593bb9708f04","modified":1529784981806},{"_id":"public/archives/2018/index.html","hash":"4419a78cee8fabf4000716563a029251d168cb20","modified":1529784981806},{"_id":"public/archives/2018/page/2/index.html","hash":"1b6ce997f521511d0c2fd484330ed5716b4dbe38","modified":1529784981806},{"_id":"public/archives/2018/05/index.html","hash":"523200a4f99804fe4c68a608663f8ab7b2c7bcb3","modified":1529784981806},{"_id":"public/index.html","hash":"6c0453cf16eb2a099cd5f97687e6fbc67cc6dded","modified":1529784981806},{"_id":"public/page/2/index.html","hash":"7450c6c5624dc35dc7b02fc3e226dfdc52d6d4de","modified":1529784981806},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529784981846},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529784981846},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529784981846},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529784981847},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529784981847},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529784981847},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529784981847},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529784981847},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529784981847},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529784981847},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529784981847},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529784981847},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529784981847},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529784981847},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529784981847},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529784981847},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529784981847},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529784981847},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529784981847},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529784981847},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529784981847},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529784981847},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529784981847},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529784981848},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529784981848},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529784981848},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529784981848},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529784981848},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529784981848},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529784981848},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529784981848},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529784981848},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529784981848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529784982243},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529784982248},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529784982259},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529784982259},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529784982259},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529784982259},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529784982259},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529784982259},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529784982259},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529784982259},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529784982259},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529784982259},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529784982260},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529784982260},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529784982260},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529784982260},{"_id":"public/lib/fastclick/README.html","hash":"d6e90449a2c09f3033f7e43d68b0cc8208e22e09","modified":1529784982260},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1529784982260},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1529784982260},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1529784982260},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1529784982260},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1529784982260},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529784982260},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529784982260},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529784982260},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529784982260},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529784982260},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529784982260},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529784982260},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529784982260},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529784982261},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529784982261},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529784982261},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529784982261},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529784982261},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529784982261},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529784982261},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529784982261},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529784982261},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1529784982261},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529784982261},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529784982261},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1529784982261},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529784982261},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529784982261},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529784982261},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1529784982261},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1529784982261},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1529784982261},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1529784982261},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1529784982262},{"_id":"public/css/main.css","hash":"1fb792d33ec2454b9cef5a26182b63ea7260d43f","modified":1529784982262},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529784982262},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529784982262},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529784982262},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529784982262},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529784982262},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529784982262},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529784982262},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529784982262},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529784982262},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529784982262},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529784982262},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1529784982262},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1529784982263},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529784982263},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529784982263},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529784982263},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529784982263},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529784982263},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529784982263},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529784982263},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529784982263},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529784982264},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529784982264},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529784982278}],"Category":[{"name":"Algorithms","_id":"cjiruh85a0003462478jzj4no"},{"name":"Authority Control","_id":"cjiruh85e00084624aeyirggs"},{"name":"C","_id":"cjiruh85n000j4624q33q7ht9"},{"name":"Compiler","_id":"cjiruh85p000q4624rof2316c"},{"name":"Practice","_id":"cjiruh85s000w46241n3t4ptb"},{"name":"Tutorial","_id":"cjiruh85x00174624qsv2oolg"},{"name":"Linux Programming","_id":"cjiruh865001p4624wmesrnfv"},{"name":"Virtual Machine","_id":"cjiruh86a002d4624ivr1ct27"}],"Data":[],"Page":[{"title":"About Me","date":"2018-05-13T18:20:44.000Z","mathjax":true,"_content":"\n***The uglily code as crime***\n\n# Base Information \n\n* **Name** Xiaoyu Lee\n* **Birth** 1995 11 19\n* **Location** BeiJing\n* **Github** github.com/leemaster\n* **Want to do** Container Engineer / Java Back-End Engineer \n\nNow I am working in [Meituan-Dianping(BeiJing)](https://www.meituan.com) as a cloud developer \n\nAll in English writing and All in the cloud&distribute development because I really hate the mac input change method so that I have to write the english blog funny? \n\nIn the next years I will do more thinking and programming use Golang and C/CPP.\n\n\n\n# Skill \n\n## Program language\n\n* Java \n    * Java SE good concurrency programming \n    * Java EE Servlet programming\n    * Spring which I had readed it's source code \n    * Spring Boot more experience in develop\n    * Shiro and JWT web safe programming\n    * ZooKeeper and other distributed tools\n* Golang\n    * In learning to develop the net programe \n    * Concurrency in action \n* C/C++\n    * Be familer to the Linux System Kernel programming\n    * Makefile and Shell Skill in use \n    * STL and Boost \n\n## Document Skill\n\nWrite all document in my blog use English and good in $LaTex$ . I want to describe more details about my code ,so that we can contribute a good project to be better, and then we do more for our compony . I think the most important thing in coding is beautiful code in any language !\n\n## System development \n\n* work on my own kernel \n\n## Web development\n\n* In developing a RPC frame\n* In developing a CMS frame \n* do some research in disturitubed system \n* Good in MySQL\n* Good in Redis and EhCache\n\n\n# In action \n\nWant to explore more challenging things in any develop project\n\nWant to do more working in the cloud computing \n\nWant do some actions in DevOps\n\n\n# Connect \n\n* Mail : leemast3r@outlook.com\n* Phone : 17710529596\n\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2018-05-13 18:20:44\nmathjax: true\n---\n\n***The uglily code as crime***\n\n# Base Information \n\n* **Name** Xiaoyu Lee\n* **Birth** 1995 11 19\n* **Location** BeiJing\n* **Github** github.com/leemaster\n* **Want to do** Container Engineer / Java Back-End Engineer \n\nNow I am working in [Meituan-Dianping(BeiJing)](https://www.meituan.com) as a cloud developer \n\nAll in English writing and All in the cloud&distribute development because I really hate the mac input change method so that I have to write the english blog funny? \n\nIn the next years I will do more thinking and programming use Golang and C/CPP.\n\n\n\n# Skill \n\n## Program language\n\n* Java \n    * Java SE good concurrency programming \n    * Java EE Servlet programming\n    * Spring which I had readed it's source code \n    * Spring Boot more experience in develop\n    * Shiro and JWT web safe programming\n    * ZooKeeper and other distributed tools\n* Golang\n    * In learning to develop the net programe \n    * Concurrency in action \n* C/C++\n    * Be familer to the Linux System Kernel programming\n    * Makefile and Shell Skill in use \n    * STL and Boost \n\n## Document Skill\n\nWrite all document in my blog use English and good in $LaTex$ . I want to describe more details about my code ,so that we can contribute a good project to be better, and then we do more for our compony . I think the most important thing in coding is beautiful code in any language !\n\n## System development \n\n* work on my own kernel \n\n## Web development\n\n* In developing a RPC frame\n* In developing a CMS frame \n* do some research in disturitubed system \n* Good in MySQL\n* Good in Redis and EhCache\n\n\n# In action \n\nWant to explore more challenging things in any develop project\n\nWant to do more working in the cloud computing \n\nWant do some actions in DevOps\n\n\n# Connect \n\n* Mail : leemast3r@outlook.com\n* Phone : 17710529596\n\n","updated":"2018-06-13T15:48:11.213Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjiruh85700014624w4l6a7m9","content":"<p><strong><em>The uglily code as crime</em></strong></p>\n<h1 id=\"Base-Information\"><a href=\"#Base-Information\" class=\"headerlink\" title=\"Base Information\"></a>Base Information</h1><ul>\n<li><strong>Name</strong> Xiaoyu Lee</li>\n<li><strong>Birth</strong> 1995 11 19</li>\n<li><strong>Location</strong> BeiJing</li>\n<li><strong>Github</strong> github.com/leemaster</li>\n<li><strong>Want to do</strong> Container Engineer / Java Back-End Engineer </li>\n</ul>\n<p>Now I am working in <a href=\"https://www.meituan.com\" target=\"_blank\" rel=\"noopener\">Meituan-Dianping(BeiJing)</a> as a cloud developer </p>\n<p>All in English writing and All in the cloud&amp;distribute development because I really hate the mac input change method so that I have to write the english blog funny? </p>\n<p>In the next years I will do more thinking and programming use Golang and C/CPP.</p>\n<h1 id=\"Skill\"><a href=\"#Skill\" class=\"headerlink\" title=\"Skill\"></a>Skill</h1><h2 id=\"Program-language\"><a href=\"#Program-language\" class=\"headerlink\" title=\"Program language\"></a>Program language</h2><ul>\n<li>Java <ul>\n<li>Java SE good concurrency programming </li>\n<li>Java EE Servlet programming</li>\n<li>Spring which I had readed it’s source code </li>\n<li>Spring Boot more experience in develop</li>\n<li>Shiro and JWT web safe programming</li>\n<li>ZooKeeper and other distributed tools</li>\n</ul>\n</li>\n<li>Golang<ul>\n<li>In learning to develop the net programe </li>\n<li>Concurrency in action </li>\n</ul>\n</li>\n<li>C/C++<ul>\n<li>Be familer to the Linux System Kernel programming</li>\n<li>Makefile and Shell Skill in use </li>\n<li>STL and Boost </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Document-Skill\"><a href=\"#Document-Skill\" class=\"headerlink\" title=\"Document Skill\"></a>Document Skill</h2><p>Write all document in my blog use English and good in $LaTex$ . I want to describe more details about my code ,so that we can contribute a good project to be better, and then we do more for our compony . I think the most important thing in coding is beautiful code in any language !</p>\n<h2 id=\"System-development\"><a href=\"#System-development\" class=\"headerlink\" title=\"System development\"></a>System development</h2><ul>\n<li>work on my own kernel </li>\n</ul>\n<h2 id=\"Web-development\"><a href=\"#Web-development\" class=\"headerlink\" title=\"Web development\"></a>Web development</h2><ul>\n<li>In developing a RPC frame</li>\n<li>In developing a CMS frame </li>\n<li>do some research in disturitubed system </li>\n<li>Good in MySQL</li>\n<li>Good in Redis and EhCache</li>\n</ul>\n<h1 id=\"In-action\"><a href=\"#In-action\" class=\"headerlink\" title=\"In action\"></a>In action</h1><p>Want to explore more challenging things in any develop project</p>\n<p>Want to do more working in the cloud computing </p>\n<p>Want do some actions in DevOps</p>\n<h1 id=\"Connect\"><a href=\"#Connect\" class=\"headerlink\" title=\"Connect\"></a>Connect</h1><ul>\n<li>Mail : leemast3r@outlook.com</li>\n<li>Phone : 17710529596</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><em>The uglily code as crime</em></strong></p>\n<h1 id=\"Base-Information\"><a href=\"#Base-Information\" class=\"headerlink\" title=\"Base Information\"></a>Base Information</h1><ul>\n<li><strong>Name</strong> Xiaoyu Lee</li>\n<li><strong>Birth</strong> 1995 11 19</li>\n<li><strong>Location</strong> BeiJing</li>\n<li><strong>Github</strong> github.com/leemaster</li>\n<li><strong>Want to do</strong> Container Engineer / Java Back-End Engineer </li>\n</ul>\n<p>Now I am working in <a href=\"https://www.meituan.com\" target=\"_blank\" rel=\"noopener\">Meituan-Dianping(BeiJing)</a> as a cloud developer </p>\n<p>All in English writing and All in the cloud&amp;distribute development because I really hate the mac input change method so that I have to write the english blog funny? </p>\n<p>In the next years I will do more thinking and programming use Golang and C/CPP.</p>\n<h1 id=\"Skill\"><a href=\"#Skill\" class=\"headerlink\" title=\"Skill\"></a>Skill</h1><h2 id=\"Program-language\"><a href=\"#Program-language\" class=\"headerlink\" title=\"Program language\"></a>Program language</h2><ul>\n<li>Java <ul>\n<li>Java SE good concurrency programming </li>\n<li>Java EE Servlet programming</li>\n<li>Spring which I had readed it’s source code </li>\n<li>Spring Boot more experience in develop</li>\n<li>Shiro and JWT web safe programming</li>\n<li>ZooKeeper and other distributed tools</li>\n</ul>\n</li>\n<li>Golang<ul>\n<li>In learning to develop the net programe </li>\n<li>Concurrency in action </li>\n</ul>\n</li>\n<li>C/C++<ul>\n<li>Be familer to the Linux System Kernel programming</li>\n<li>Makefile and Shell Skill in use </li>\n<li>STL and Boost </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Document-Skill\"><a href=\"#Document-Skill\" class=\"headerlink\" title=\"Document Skill\"></a>Document Skill</h2><p>Write all document in my blog use English and good in $LaTex$ . I want to describe more details about my code ,so that we can contribute a good project to be better, and then we do more for our compony . I think the most important thing in coding is beautiful code in any language !</p>\n<h2 id=\"System-development\"><a href=\"#System-development\" class=\"headerlink\" title=\"System development\"></a>System development</h2><ul>\n<li>work on my own kernel </li>\n</ul>\n<h2 id=\"Web-development\"><a href=\"#Web-development\" class=\"headerlink\" title=\"Web development\"></a>Web development</h2><ul>\n<li>In developing a RPC frame</li>\n<li>In developing a CMS frame </li>\n<li>do some research in disturitubed system </li>\n<li>Good in MySQL</li>\n<li>Good in Redis and EhCache</li>\n</ul>\n<h1 id=\"In-action\"><a href=\"#In-action\" class=\"headerlink\" title=\"In action\"></a>In action</h1><p>Want to explore more challenging things in any develop project</p>\n<p>Want to do more working in the cloud computing </p>\n<p>Want do some actions in DevOps</p>\n<h1 id=\"Connect\"><a href=\"#Connect\" class=\"headerlink\" title=\"Connect\"></a>Connect</h1><ul>\n<li>Mail : leemast3r@outlook.com</li>\n<li>Phone : 17710529596</li>\n</ul>\n"},{"title":"categories","date":"2018-05-15T08:56:35.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-15 08:56:35\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-05-15T01:01:11.467Z","path":"categories/index.html","layout":"page","_id":"cjiruh8ah00334624bbmiffm1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello My Friend","date":"2018-05-15T11:04:01.000Z","_content":"\n# Friends \n\n* [CodingStar](http://www.codingstar.cn/)\n* [MianShiting](http://www.mianshiting.com/)\n* [Aermin](http://www.aermin.top/)\n* [51ac](https://51ac.club/)","source":"links/index.md","raw":"---\ntitle: Hello My Friend\ndate: 2018-05-15 11:04:01\n---\n\n# Friends \n\n* [CodingStar](http://www.codingstar.cn/)\n* [MianShiting](http://www.mianshiting.com/)\n* [Aermin](http://www.aermin.top/)\n* [51ac](https://51ac.club/)","updated":"2018-06-13T11:25:24.249Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjiruh8ai0034462420nn2r0z","content":"<h1 id=\"Friends\"><a href=\"#Friends\" class=\"headerlink\" title=\"Friends\"></a>Friends</h1><ul>\n<li><a href=\"http://www.codingstar.cn/\" target=\"_blank\" rel=\"noopener\">CodingStar</a></li>\n<li><a href=\"http://www.mianshiting.com/\" target=\"_blank\" rel=\"noopener\">MianShiting</a></li>\n<li><a href=\"http://www.aermin.top/\" target=\"_blank\" rel=\"noopener\">Aermin</a></li>\n<li><a href=\"https://51ac.club/\" target=\"_blank\" rel=\"noopener\">51ac</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Friends\"><a href=\"#Friends\" class=\"headerlink\" title=\"Friends\"></a>Friends</h1><ul>\n<li><a href=\"http://www.codingstar.cn/\" target=\"_blank\" rel=\"noopener\">CodingStar</a></li>\n<li><a href=\"http://www.mianshiting.com/\" target=\"_blank\" rel=\"noopener\">MianShiting</a></li>\n<li><a href=\"http://www.aermin.top/\" target=\"_blank\" rel=\"noopener\">Aermin</a></li>\n<li><a href=\"https://51ac.club/\" target=\"_blank\" rel=\"noopener\">51ac</a></li>\n</ul>\n"}],"Post":[{"title":"Algorithms Design Recursion and Divide conquer","date":"2018-05-15T09:04:37.000Z","_content":"\n# Description of Recursion and Divide \n\nMaybe in every CS student will learn the problem of Hanoi tower as the first step to learn the **Recursion**  and **Divide**\n\nBut this problem is seem difficult and abstract in our brain . So in a easy I will summarize the common characters in our actural life\n\n<!--more-->\n\n## Recursion\n\nAs we know that the computer will work with the register and will use these to operate the physical memory .\n\nThe base is that the register like PC or DS:IP will record the program address when the program running .\n\nThe Recursion is like that after end of a program and then call the same address next CPU trick .\n\nAnd in the view of Math , I saw that when the recursion do so , then\nthe problem will reduce to a less scale of problem for now . \n\nThis surface like the **recursion formula** in learning of senquence of number in high school.\n\nI can belive that the next state will be contained in the before state, also the next state will be described by the before state.\n\nFor example , When we got a senquence and want to know the full permutation for this senquence , what will we do in the next time to solve this problem.\n\nThis instance {a,b,c,d,e} then we will write a algorithm to get this senquence full permutation. The code will be writen in C\n\n```c\nvoid perm(int arr[] , int s , int e)\n{\n  if(s == m){\n\n    for(int i = 0 ;i < e ;i++) cout << arr[i]; \n\n    cout << endl;\n  \n  } else {\n    \n    for(int i = s ; i < m ;i++){\n      \n      swap(arr[s] , arr[i]);\n\n      perm(s + 1,e);\n\n      swap(arr[s],arr[i]);\n    }\n  }\n}\n```\n\nLet's we do some analyzes for this function to get the full permumation.\n\nThis algorithm do like we think in common , from the start of this senquence to the end every time we fix a position and let the same handler to do next time .\n\nTo be more clearly we see this senquence {1,2,3},we can easy to write the the full permumation \n\n* 1 2 3\n* 1 3 2\n* 2 1 3 \n* 2 3 1\n* 3 1 2\n* 3 2 1 \n\nSo is easy to get this algorithm soule that we fix the first number and then move the origin first number to the next position . and then do the same operation continue . Yeah , call the same function to handle the next situation next .\n\nThis algorithm is real easy in action and the time complexity is O(n^2)\n\n## Divide conquer\n\nThis title may do lots thing in the big data domain to handle some problem like Map/Reduce .\n\nWe can belive the Map operation is to divide and the Reduce is to conquer .\n\nThe classical problem that we call TopK.\n\n```java\nimport java.io.File;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.RecursiveTask;\n\n/**\n  * @author leemaster\n  * @version V1.0\n  * @Project hotel\n  * @Title TopKProblem.java created on 18-3-27\n  * @Package cn.leemaster.gist\n  * @Describtion\n  * @since v1.0\n  */\n\npublic class TopKProblem{\n\n    private static ForkJoinPool executorService = new ForkJoinPool();\n\n\n    /**\n     * we assume that we need the top 100 maxinum numbers form\n     * more than 10billion numbers which will be divided into \n     * some files so we need a support datastructure to do something\n     */\n    private class TopKHeap{\n\n        private int[] arrayHeap = new int[101];\n\n        private int nowSize = 0;\n\n        private void swap(int i,int j){\n\n            int tmp = arrayHeap[i];\n\n            arrayHeap[i] = arrayHeap[j];\n\n            arrayHeap[j] = tmp;\n            \n        }\n\n        public void adjustHeap(int adjust,int start,int end){\n\n            int left = adjust * 2;\n\n            int right = adjust * 2 + 1;\n\n            int largest ;\n\n            if(left <= end && arrayHeap[adjust] < arrayHeap[left])\n                largest = left;\n            \n            else\n                largest = adjust;\n\n            if(right <= end && arrayHeap[largest] < arrayHeap[right])\n                largest = right;\n            \n            if(largest != adjust){\n                swap(adjust, largest);\n\n                adjustHeap(adjust, largest, end);\n            }\n\n        }\n\n        public void adjustBottom(int adjust){\n\n            if(adjust >= 50) return;\n            \n            int parent = adjust / 2;\n\n            int next = adjust;\n\n            if(parent >= 1 && arrayHeap[adjust] > arrayHeap[parent])\n                next = parent;\n            \n            if(next != adjust){\n                swap(adjust, next);\n                adjustBottom(next);\n            }\n\n        }\n\n        public void insert(int in){\n\n            if(nowSize == 100){\n                int leftMin = arrayHeap[50];\n\n                int rightMin = arrayHeap[100];\n\n                if(in > arrayHeap[leftMin] && arrayHeap[leftMin] < arrayHeap[rightMin]){\n                    arrayHeap[50] = in;\n\n                    adjustBottom(25);\n\n                    return;\n                }\n\n                if(in > arrayHeap[rightMin] && arrayHeap[rightMin] <= arrayHeap[leftMin]){\n                    arrayHeap[100] = in;\n\n                    adjustBottom(50);\n\n                    return;\n                }\n\n            }else{\n\n                arrayHeap[++nowSize] = in;\n\n                adjustBottom(nowSize / 2);\n\n                return;\n\n            }\n\n        }\n\n        public int getMax(){\n\n            if(nowSize == 0) return null;\n\n            int tmp = arrayHeap[1];\n\n            swap(1, nowSize);\n\n            nowSize --;\n\n            adjustHeap(1, 1, nowSize);\n\n            return tmp;\n        }\n\n        public int getNowSize(){\n            return this.nowSize;\n        }\n\n    }\n\n    private class StasticTask implements RecursiveTask<TopKHeap>{\n\n        private String[] files;\n\n        int start ;\n\n        int end ;\n\n        public StasticTask(String[] files){\n            this.files = files;\n            this.start = 0;\n            this.end = files.length - 1;\n        }\n\n        private StasticTask(String[] files,int start,int end){\n            this.files = files;\n            this.start = start;\n            this.end = end;\n        }\n\n        @Override\n        protected TopKHeap compute(){\n            \n            final TopKHeap finaHeap = new TopKHeap();\n\n            if(start == end){\n\n                int[] allNum = operateFile(files[start]);\n\n                for(int i = 0; i < allNum.length ;i++){\n                    finaHeap.insert(allNum[i]);\n                }\n\n                return finaHeap;\n            }else{\n                int mid = (start + end) / 2;\n\n                StasticTask leftTask = new StasticTask(files, start, mid);\n\n                StasticTask righTask = new StasticTask(files,mid+1,end);\n\n                leftTask.fork();\n\n                righTask.fork();\n\n                combinHeap(leftTask.join(), righTask.join());\n\n                return finaHeap;\n\n            }\n\n            return finaHeap;\n        }\n\n        private void combinHeap(TopKHeap a,TopKHeap b){\n\n            for(int i = 0;i < a.getNowSize();i++){\n                finaHeap.insert(a.getMax());\n            }\n\n            for(int i = 0;i < b.getNowSize();i++){\n                finaHeap.insert(b.getMax());\n            }\n        }\n\n    }\n    \n\n    private static int[] operateFile(String name){\n\n        File file = new File(name);\n\n        Scanner scanner = new Scanner(file);\n\n        List<Integer> list = new ArrayList<>();\n\n        while(scanner.hasNext()){\n            list.add(scanner.nextInt());\n        }\n\n        return list.toArray();\n    }\n\n    /**\n     * we assume that the numbers will be split into 1000 files\n     * and will we will open the about 4 threads to work for this task\n     * and then output the top 100 numbers in these files \n     */\n    public static void main(String[] args){\n\n        TopKHeap heap = new TopKHeap();\n\n        String[] files = new String[1000];\n\n        Future<TopKHeap> finalHeap = \n         executorService.submit(new StasticTask(files));\n\n        executorService.shutdown();\n\n    }\n\n}\n\n```\n\nThis algorithm will use the divide and conquer thinking to do the effective work in the handle operation .\n\nFork/Join framework will be more useful in action .\n\nSo what is the **Divide and Conquer** ?\n\nWe can draw a conclusion that when we handle the big data and then we want to handle every case , It's look like the learning process \na person can't learn the four years course in one day . So we will learn the parts of the course in every year like Compiler , Algorithms , OS ,SQL and so on.\n\nDivide act the role that reduce the problem scale in some effective way.\n\nLike the Binary search , we saw that the problem scale will reduce as a 1/2 times in every recursion , so the TopK problem is like this .\n\n","source":"_posts/Algorithms-Design-Recursion-and-Divide-conquer.md","raw":"---\ntitle: Algorithms Design Recursion and Divide conquer\ndate: 2018-05-15 09:04:37\ncategories:\n- Algorithms\ntags:\n- Divide and Conquer\n- Recursion\n---\n\n# Description of Recursion and Divide \n\nMaybe in every CS student will learn the problem of Hanoi tower as the first step to learn the **Recursion**  and **Divide**\n\nBut this problem is seem difficult and abstract in our brain . So in a easy I will summarize the common characters in our actural life\n\n<!--more-->\n\n## Recursion\n\nAs we know that the computer will work with the register and will use these to operate the physical memory .\n\nThe base is that the register like PC or DS:IP will record the program address when the program running .\n\nThe Recursion is like that after end of a program and then call the same address next CPU trick .\n\nAnd in the view of Math , I saw that when the recursion do so , then\nthe problem will reduce to a less scale of problem for now . \n\nThis surface like the **recursion formula** in learning of senquence of number in high school.\n\nI can belive that the next state will be contained in the before state, also the next state will be described by the before state.\n\nFor example , When we got a senquence and want to know the full permutation for this senquence , what will we do in the next time to solve this problem.\n\nThis instance {a,b,c,d,e} then we will write a algorithm to get this senquence full permutation. The code will be writen in C\n\n```c\nvoid perm(int arr[] , int s , int e)\n{\n  if(s == m){\n\n    for(int i = 0 ;i < e ;i++) cout << arr[i]; \n\n    cout << endl;\n  \n  } else {\n    \n    for(int i = s ; i < m ;i++){\n      \n      swap(arr[s] , arr[i]);\n\n      perm(s + 1,e);\n\n      swap(arr[s],arr[i]);\n    }\n  }\n}\n```\n\nLet's we do some analyzes for this function to get the full permumation.\n\nThis algorithm do like we think in common , from the start of this senquence to the end every time we fix a position and let the same handler to do next time .\n\nTo be more clearly we see this senquence {1,2,3},we can easy to write the the full permumation \n\n* 1 2 3\n* 1 3 2\n* 2 1 3 \n* 2 3 1\n* 3 1 2\n* 3 2 1 \n\nSo is easy to get this algorithm soule that we fix the first number and then move the origin first number to the next position . and then do the same operation continue . Yeah , call the same function to handle the next situation next .\n\nThis algorithm is real easy in action and the time complexity is O(n^2)\n\n## Divide conquer\n\nThis title may do lots thing in the big data domain to handle some problem like Map/Reduce .\n\nWe can belive the Map operation is to divide and the Reduce is to conquer .\n\nThe classical problem that we call TopK.\n\n```java\nimport java.io.File;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.RecursiveTask;\n\n/**\n  * @author leemaster\n  * @version V1.0\n  * @Project hotel\n  * @Title TopKProblem.java created on 18-3-27\n  * @Package cn.leemaster.gist\n  * @Describtion\n  * @since v1.0\n  */\n\npublic class TopKProblem{\n\n    private static ForkJoinPool executorService = new ForkJoinPool();\n\n\n    /**\n     * we assume that we need the top 100 maxinum numbers form\n     * more than 10billion numbers which will be divided into \n     * some files so we need a support datastructure to do something\n     */\n    private class TopKHeap{\n\n        private int[] arrayHeap = new int[101];\n\n        private int nowSize = 0;\n\n        private void swap(int i,int j){\n\n            int tmp = arrayHeap[i];\n\n            arrayHeap[i] = arrayHeap[j];\n\n            arrayHeap[j] = tmp;\n            \n        }\n\n        public void adjustHeap(int adjust,int start,int end){\n\n            int left = adjust * 2;\n\n            int right = adjust * 2 + 1;\n\n            int largest ;\n\n            if(left <= end && arrayHeap[adjust] < arrayHeap[left])\n                largest = left;\n            \n            else\n                largest = adjust;\n\n            if(right <= end && arrayHeap[largest] < arrayHeap[right])\n                largest = right;\n            \n            if(largest != adjust){\n                swap(adjust, largest);\n\n                adjustHeap(adjust, largest, end);\n            }\n\n        }\n\n        public void adjustBottom(int adjust){\n\n            if(adjust >= 50) return;\n            \n            int parent = adjust / 2;\n\n            int next = adjust;\n\n            if(parent >= 1 && arrayHeap[adjust] > arrayHeap[parent])\n                next = parent;\n            \n            if(next != adjust){\n                swap(adjust, next);\n                adjustBottom(next);\n            }\n\n        }\n\n        public void insert(int in){\n\n            if(nowSize == 100){\n                int leftMin = arrayHeap[50];\n\n                int rightMin = arrayHeap[100];\n\n                if(in > arrayHeap[leftMin] && arrayHeap[leftMin] < arrayHeap[rightMin]){\n                    arrayHeap[50] = in;\n\n                    adjustBottom(25);\n\n                    return;\n                }\n\n                if(in > arrayHeap[rightMin] && arrayHeap[rightMin] <= arrayHeap[leftMin]){\n                    arrayHeap[100] = in;\n\n                    adjustBottom(50);\n\n                    return;\n                }\n\n            }else{\n\n                arrayHeap[++nowSize] = in;\n\n                adjustBottom(nowSize / 2);\n\n                return;\n\n            }\n\n        }\n\n        public int getMax(){\n\n            if(nowSize == 0) return null;\n\n            int tmp = arrayHeap[1];\n\n            swap(1, nowSize);\n\n            nowSize --;\n\n            adjustHeap(1, 1, nowSize);\n\n            return tmp;\n        }\n\n        public int getNowSize(){\n            return this.nowSize;\n        }\n\n    }\n\n    private class StasticTask implements RecursiveTask<TopKHeap>{\n\n        private String[] files;\n\n        int start ;\n\n        int end ;\n\n        public StasticTask(String[] files){\n            this.files = files;\n            this.start = 0;\n            this.end = files.length - 1;\n        }\n\n        private StasticTask(String[] files,int start,int end){\n            this.files = files;\n            this.start = start;\n            this.end = end;\n        }\n\n        @Override\n        protected TopKHeap compute(){\n            \n            final TopKHeap finaHeap = new TopKHeap();\n\n            if(start == end){\n\n                int[] allNum = operateFile(files[start]);\n\n                for(int i = 0; i < allNum.length ;i++){\n                    finaHeap.insert(allNum[i]);\n                }\n\n                return finaHeap;\n            }else{\n                int mid = (start + end) / 2;\n\n                StasticTask leftTask = new StasticTask(files, start, mid);\n\n                StasticTask righTask = new StasticTask(files,mid+1,end);\n\n                leftTask.fork();\n\n                righTask.fork();\n\n                combinHeap(leftTask.join(), righTask.join());\n\n                return finaHeap;\n\n            }\n\n            return finaHeap;\n        }\n\n        private void combinHeap(TopKHeap a,TopKHeap b){\n\n            for(int i = 0;i < a.getNowSize();i++){\n                finaHeap.insert(a.getMax());\n            }\n\n            for(int i = 0;i < b.getNowSize();i++){\n                finaHeap.insert(b.getMax());\n            }\n        }\n\n    }\n    \n\n    private static int[] operateFile(String name){\n\n        File file = new File(name);\n\n        Scanner scanner = new Scanner(file);\n\n        List<Integer> list = new ArrayList<>();\n\n        while(scanner.hasNext()){\n            list.add(scanner.nextInt());\n        }\n\n        return list.toArray();\n    }\n\n    /**\n     * we assume that the numbers will be split into 1000 files\n     * and will we will open the about 4 threads to work for this task\n     * and then output the top 100 numbers in these files \n     */\n    public static void main(String[] args){\n\n        TopKHeap heap = new TopKHeap();\n\n        String[] files = new String[1000];\n\n        Future<TopKHeap> finalHeap = \n         executorService.submit(new StasticTask(files));\n\n        executorService.shutdown();\n\n    }\n\n}\n\n```\n\nThis algorithm will use the divide and conquer thinking to do the effective work in the handle operation .\n\nFork/Join framework will be more useful in action .\n\nSo what is the **Divide and Conquer** ?\n\nWe can draw a conclusion that when we handle the big data and then we want to handle every case , It's look like the learning process \na person can't learn the four years course in one day . So we will learn the parts of the course in every year like Compiler , Algorithms , OS ,SQL and so on.\n\nDivide act the role that reduce the problem scale in some effective way.\n\nLike the Binary search , we saw that the problem scale will reduce as a 1/2 times in every recursion , so the TopK problem is like this .\n\n","slug":"Algorithms-Design-Recursion-and-Divide-conquer","published":1,"updated":"2018-05-15T03:38:06.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85400004624at3p1zzr","content":"<h1 id=\"Description-of-Recursion-and-Divide\"><a href=\"#Description-of-Recursion-and-Divide\" class=\"headerlink\" title=\"Description of Recursion and Divide\"></a>Description of Recursion and Divide</h1><p>Maybe in every CS student will learn the problem of Hanoi tower as the first step to learn the <strong>Recursion</strong>  and <strong>Divide</strong></p>\n<p>But this problem is seem difficult and abstract in our brain . So in a easy I will summarize the common characters in our actural life</p>\n<a id=\"more\"></a>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>As we know that the computer will work with the register and will use these to operate the physical memory .</p>\n<p>The base is that the register like PC or DS:IP will record the program address when the program running .</p>\n<p>The Recursion is like that after end of a program and then call the same address next CPU trick .</p>\n<p>And in the view of Math , I saw that when the recursion do so , then<br>the problem will reduce to a less scale of problem for now . </p>\n<p>This surface like the <strong>recursion formula</strong> in learning of senquence of number in high school.</p>\n<p>I can belive that the next state will be contained in the before state, also the next state will be described by the before state.</p>\n<p>For example , When we got a senquence and want to know the full permutation for this senquence , what will we do in the next time to solve this problem.</p>\n<p>This instance {a,b,c,d,e} then we will write a algorithm to get this senquence full permutation. The code will be writen in C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">perm</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[] , <span class=\"keyword\">int</span> s , <span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(s == m)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ;i &lt; e ;i++) <span class=\"built_in\">cout</span> &lt;&lt; arr[i]; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = s ; i &lt; m ;i++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      swap(arr[s] , arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">      perm(s + <span class=\"number\">1</span>,e);</span><br><span class=\"line\"></span><br><span class=\"line\">      swap(arr[s],arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Let’s we do some analyzes for this function to get the full permumation.</p>\n<p>This algorithm do like we think in common , from the start of this senquence to the end every time we fix a position and let the same handler to do next time .</p>\n<p>To be more clearly we see this senquence {1,2,3},we can easy to write the the full permumation </p>\n<ul>\n<li>1 2 3</li>\n<li>1 3 2</li>\n<li>2 1 3 </li>\n<li>2 3 1</li>\n<li>3 1 2</li>\n<li>3 2 1 </li>\n</ul>\n<p>So is easy to get this algorithm soule that we fix the first number and then move the origin first number to the next position . and then do the same operation continue . Yeah , call the same function to handle the next situation next .</p>\n<p>This algorithm is real easy in action and the time complexity is O(n^2)</p>\n<h2 id=\"Divide-conquer\"><a href=\"#Divide-conquer\" class=\"headerlink\" title=\"Divide conquer\"></a>Divide conquer</h2><p>This title may do lots thing in the big data domain to handle some problem like Map/Reduce .</p>\n<p>We can belive the Map operation is to divide and the Reduce is to conquer .</p>\n<p>The classical problem that we call TopK.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RecursiveTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author</span> leemaster</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@version</span> V1.0</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Project</span> hotel</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Title</span> TopKProblem.java created on 18-3-27</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Package</span> cn.leemaster.gist</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Describtion</span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@since</span> v1.0</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopKProblem</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ForkJoinPool executorService = <span class=\"keyword\">new</span> ForkJoinPool();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * we assume that we need the top 100 maxinum numbers form</span></span><br><span class=\"line\"><span class=\"comment\">     * more than 10billion numbers which will be divided into </span></span><br><span class=\"line\"><span class=\"comment\">     * some files so we need a support datastructure to do something</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopKHeap</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arrayHeap = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> nowSize = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arrayHeap[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            arrayHeap[i] = arrayHeap[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            arrayHeap[j] = tmp;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> adjust,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = adjust * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> right = adjust * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> largest ;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &lt;= end &amp;&amp; arrayHeap[adjust] &lt; arrayHeap[left])</span><br><span class=\"line\">                largest = left;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                largest = adjust;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right &lt;= end &amp;&amp; arrayHeap[largest] &lt; arrayHeap[right])</span><br><span class=\"line\">                largest = right;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(largest != adjust)&#123;</span><br><span class=\"line\">                swap(adjust, largest);</span><br><span class=\"line\"></span><br><span class=\"line\">                adjustHeap(adjust, largest, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustBottom</span><span class=\"params\">(<span class=\"keyword\">int</span> adjust)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(adjust &gt;= <span class=\"number\">50</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> parent = adjust / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = adjust;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(parent &gt;= <span class=\"number\">1</span> &amp;&amp; arrayHeap[adjust] &gt; arrayHeap[parent])</span><br><span class=\"line\">                next = parent;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(next != adjust)&#123;</span><br><span class=\"line\">                swap(adjust, next);</span><br><span class=\"line\">                adjustBottom(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> in)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nowSize == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> leftMin = arrayHeap[<span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rightMin = arrayHeap[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(in &gt; arrayHeap[leftMin] &amp;&amp; arrayHeap[leftMin] &lt; arrayHeap[rightMin])&#123;</span><br><span class=\"line\">                    arrayHeap[<span class=\"number\">50</span>] = in;</span><br><span class=\"line\"></span><br><span class=\"line\">                    adjustBottom(<span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(in &gt; arrayHeap[rightMin] &amp;&amp; arrayHeap[rightMin] &lt;= arrayHeap[leftMin])&#123;</span><br><span class=\"line\">                    arrayHeap[<span class=\"number\">100</span>] = in;</span><br><span class=\"line\"></span><br><span class=\"line\">                    adjustBottom(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                arrayHeap[++nowSize] = in;</span><br><span class=\"line\"></span><br><span class=\"line\">                adjustBottom(nowSize / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nowSize == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arrayHeap[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            swap(<span class=\"number\">1</span>, nowSize);</span><br><span class=\"line\"></span><br><span class=\"line\">            nowSize --;</span><br><span class=\"line\"></span><br><span class=\"line\">            adjustHeap(<span class=\"number\">1</span>, <span class=\"number\">1</span>, nowSize);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNowSize</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nowSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StasticTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">TopKHeap</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String[] files;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> end ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StasticTask</span><span class=\"params\">(String[] files)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.files = files;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.start = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.end = files.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">StasticTask</span><span class=\"params\">(String[] files,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.files = files;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> TopKHeap <span class=\"title\">compute</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">final</span> TopKHeap finaHeap = <span class=\"keyword\">new</span> TopKHeap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(start == end)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span>[] allNum = operateFile(files[start]);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; allNum.length ;i++)&#123;</span><br><span class=\"line\">                    finaHeap.insert(allNum[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> finaHeap;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                StasticTask leftTask = <span class=\"keyword\">new</span> StasticTask(files, start, mid);</span><br><span class=\"line\"></span><br><span class=\"line\">                StasticTask righTask = <span class=\"keyword\">new</span> StasticTask(files,mid+<span class=\"number\">1</span>,end);</span><br><span class=\"line\"></span><br><span class=\"line\">                leftTask.fork();</span><br><span class=\"line\"></span><br><span class=\"line\">                righTask.fork();</span><br><span class=\"line\"></span><br><span class=\"line\">                combinHeap(leftTask.join(), righTask.join());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> finaHeap;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> finaHeap;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">combinHeap</span><span class=\"params\">(TopKHeap a,TopKHeap b)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; a.getNowSize();i++)&#123;</span><br><span class=\"line\">                finaHeap.insert(a.getMax());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; b.getNowSize();i++)&#123;</span><br><span class=\"line\">                finaHeap.insert(b.getMax());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] operateFile(String name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(file);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(scanner.hasNext())&#123;</span><br><span class=\"line\">            list.add(scanner.nextInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.toArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * we assume that the numbers will be split into 1000 files</span></span><br><span class=\"line\"><span class=\"comment\">     * and will we will open the about 4 threads to work for this task</span></span><br><span class=\"line\"><span class=\"comment\">     * and then output the top 100 numbers in these files </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TopKHeap heap = <span class=\"keyword\">new</span> TopKHeap();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] files = <span class=\"keyword\">new</span> String[<span class=\"number\">1000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        Future&lt;TopKHeap&gt; finalHeap = </span><br><span class=\"line\">         executorService.submit(<span class=\"keyword\">new</span> StasticTask(files));</span><br><span class=\"line\"></span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This algorithm will use the divide and conquer thinking to do the effective work in the handle operation .</p>\n<p>Fork/Join framework will be more useful in action .</p>\n<p>So what is the <strong>Divide and Conquer</strong> ?</p>\n<p>We can draw a conclusion that when we handle the big data and then we want to handle every case , It’s look like the learning process<br>a person can’t learn the four years course in one day . So we will learn the parts of the course in every year like Compiler , Algorithms , OS ,SQL and so on.</p>\n<p>Divide act the role that reduce the problem scale in some effective way.</p>\n<p>Like the Binary search , we saw that the problem scale will reduce as a 1/2 times in every recursion , so the TopK problem is like this .</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Description-of-Recursion-and-Divide\"><a href=\"#Description-of-Recursion-and-Divide\" class=\"headerlink\" title=\"Description of Recursion and Divide\"></a>Description of Recursion and Divide</h1><p>Maybe in every CS student will learn the problem of Hanoi tower as the first step to learn the <strong>Recursion</strong>  and <strong>Divide</strong></p>\n<p>But this problem is seem difficult and abstract in our brain . So in a easy I will summarize the common characters in our actural life</p>","more":"<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>As we know that the computer will work with the register and will use these to operate the physical memory .</p>\n<p>The base is that the register like PC or DS:IP will record the program address when the program running .</p>\n<p>The Recursion is like that after end of a program and then call the same address next CPU trick .</p>\n<p>And in the view of Math , I saw that when the recursion do so , then<br>the problem will reduce to a less scale of problem for now . </p>\n<p>This surface like the <strong>recursion formula</strong> in learning of senquence of number in high school.</p>\n<p>I can belive that the next state will be contained in the before state, also the next state will be described by the before state.</p>\n<p>For example , When we got a senquence and want to know the full permutation for this senquence , what will we do in the next time to solve this problem.</p>\n<p>This instance {a,b,c,d,e} then we will write a algorithm to get this senquence full permutation. The code will be writen in C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">perm</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[] , <span class=\"keyword\">int</span> s , <span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(s == m)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ;i &lt; e ;i++) <span class=\"built_in\">cout</span> &lt;&lt; arr[i]; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = s ; i &lt; m ;i++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      swap(arr[s] , arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">      perm(s + <span class=\"number\">1</span>,e);</span><br><span class=\"line\"></span><br><span class=\"line\">      swap(arr[s],arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Let’s we do some analyzes for this function to get the full permumation.</p>\n<p>This algorithm do like we think in common , from the start of this senquence to the end every time we fix a position and let the same handler to do next time .</p>\n<p>To be more clearly we see this senquence {1,2,3},we can easy to write the the full permumation </p>\n<ul>\n<li>1 2 3</li>\n<li>1 3 2</li>\n<li>2 1 3 </li>\n<li>2 3 1</li>\n<li>3 1 2</li>\n<li>3 2 1 </li>\n</ul>\n<p>So is easy to get this algorithm soule that we fix the first number and then move the origin first number to the next position . and then do the same operation continue . Yeah , call the same function to handle the next situation next .</p>\n<p>This algorithm is real easy in action and the time complexity is O(n^2)</p>\n<h2 id=\"Divide-conquer\"><a href=\"#Divide-conquer\" class=\"headerlink\" title=\"Divide conquer\"></a>Divide conquer</h2><p>This title may do lots thing in the big data domain to handle some problem like Map/Reduce .</p>\n<p>We can belive the Map operation is to divide and the Reduce is to conquer .</p>\n<p>The classical problem that we call TopK.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RecursiveTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author</span> leemaster</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@version</span> V1.0</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Project</span> hotel</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Title</span> TopKProblem.java created on 18-3-27</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Package</span> cn.leemaster.gist</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@Describtion</span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@since</span> v1.0</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopKProblem</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ForkJoinPool executorService = <span class=\"keyword\">new</span> ForkJoinPool();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * we assume that we need the top 100 maxinum numbers form</span></span><br><span class=\"line\"><span class=\"comment\">     * more than 10billion numbers which will be divided into </span></span><br><span class=\"line\"><span class=\"comment\">     * some files so we need a support datastructure to do something</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopKHeap</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arrayHeap = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> nowSize = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arrayHeap[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            arrayHeap[i] = arrayHeap[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            arrayHeap[j] = tmp;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> adjust,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = adjust * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> right = adjust * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> largest ;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &lt;= end &amp;&amp; arrayHeap[adjust] &lt; arrayHeap[left])</span><br><span class=\"line\">                largest = left;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                largest = adjust;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right &lt;= end &amp;&amp; arrayHeap[largest] &lt; arrayHeap[right])</span><br><span class=\"line\">                largest = right;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(largest != adjust)&#123;</span><br><span class=\"line\">                swap(adjust, largest);</span><br><span class=\"line\"></span><br><span class=\"line\">                adjustHeap(adjust, largest, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustBottom</span><span class=\"params\">(<span class=\"keyword\">int</span> adjust)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(adjust &gt;= <span class=\"number\">50</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> parent = adjust / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = adjust;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(parent &gt;= <span class=\"number\">1</span> &amp;&amp; arrayHeap[adjust] &gt; arrayHeap[parent])</span><br><span class=\"line\">                next = parent;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(next != adjust)&#123;</span><br><span class=\"line\">                swap(adjust, next);</span><br><span class=\"line\">                adjustBottom(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> in)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nowSize == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> leftMin = arrayHeap[<span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rightMin = arrayHeap[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(in &gt; arrayHeap[leftMin] &amp;&amp; arrayHeap[leftMin] &lt; arrayHeap[rightMin])&#123;</span><br><span class=\"line\">                    arrayHeap[<span class=\"number\">50</span>] = in;</span><br><span class=\"line\"></span><br><span class=\"line\">                    adjustBottom(<span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(in &gt; arrayHeap[rightMin] &amp;&amp; arrayHeap[rightMin] &lt;= arrayHeap[leftMin])&#123;</span><br><span class=\"line\">                    arrayHeap[<span class=\"number\">100</span>] = in;</span><br><span class=\"line\"></span><br><span class=\"line\">                    adjustBottom(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                arrayHeap[++nowSize] = in;</span><br><span class=\"line\"></span><br><span class=\"line\">                adjustBottom(nowSize / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nowSize == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arrayHeap[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            swap(<span class=\"number\">1</span>, nowSize);</span><br><span class=\"line\"></span><br><span class=\"line\">            nowSize --;</span><br><span class=\"line\"></span><br><span class=\"line\">            adjustHeap(<span class=\"number\">1</span>, <span class=\"number\">1</span>, nowSize);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNowSize</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nowSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StasticTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">TopKHeap</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String[] files;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> end ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StasticTask</span><span class=\"params\">(String[] files)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.files = files;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.start = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.end = files.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">StasticTask</span><span class=\"params\">(String[] files,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.files = files;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> TopKHeap <span class=\"title\">compute</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">final</span> TopKHeap finaHeap = <span class=\"keyword\">new</span> TopKHeap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(start == end)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span>[] allNum = operateFile(files[start]);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; allNum.length ;i++)&#123;</span><br><span class=\"line\">                    finaHeap.insert(allNum[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> finaHeap;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                StasticTask leftTask = <span class=\"keyword\">new</span> StasticTask(files, start, mid);</span><br><span class=\"line\"></span><br><span class=\"line\">                StasticTask righTask = <span class=\"keyword\">new</span> StasticTask(files,mid+<span class=\"number\">1</span>,end);</span><br><span class=\"line\"></span><br><span class=\"line\">                leftTask.fork();</span><br><span class=\"line\"></span><br><span class=\"line\">                righTask.fork();</span><br><span class=\"line\"></span><br><span class=\"line\">                combinHeap(leftTask.join(), righTask.join());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> finaHeap;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> finaHeap;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">combinHeap</span><span class=\"params\">(TopKHeap a,TopKHeap b)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; a.getNowSize();i++)&#123;</span><br><span class=\"line\">                finaHeap.insert(a.getMax());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; b.getNowSize();i++)&#123;</span><br><span class=\"line\">                finaHeap.insert(b.getMax());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] operateFile(String name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(file);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(scanner.hasNext())&#123;</span><br><span class=\"line\">            list.add(scanner.nextInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.toArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * we assume that the numbers will be split into 1000 files</span></span><br><span class=\"line\"><span class=\"comment\">     * and will we will open the about 4 threads to work for this task</span></span><br><span class=\"line\"><span class=\"comment\">     * and then output the top 100 numbers in these files </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TopKHeap heap = <span class=\"keyword\">new</span> TopKHeap();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] files = <span class=\"keyword\">new</span> String[<span class=\"number\">1000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        Future&lt;TopKHeap&gt; finalHeap = </span><br><span class=\"line\">         executorService.submit(<span class=\"keyword\">new</span> StasticTask(files));</span><br><span class=\"line\"></span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This algorithm will use the divide and conquer thinking to do the effective work in the handle operation .</p>\n<p>Fork/Join framework will be more useful in action .</p>\n<p>So what is the <strong>Divide and Conquer</strong> ?</p>\n<p>We can draw a conclusion that when we handle the big data and then we want to handle every case , It’s look like the learning process<br>a person can’t learn the four years course in one day . So we will learn the parts of the course in every year like Compiler , Algorithms , OS ,SQL and so on.</p>\n<p>Divide act the role that reduce the problem scale in some effective way.</p>\n<p>Like the Binary search , we saw that the problem scale will reduce as a 1/2 times in every recursion , so the TopK problem is like this .</p>"},{"title":"Authority Control - RBAC 0","date":"2018-05-26T20:03:25.000Z","mathjax":true,"_content":"\n# Thinking in a manager view\n\nHow do we manange our employee in a company ? How to control the resouce of a company which will be used by the all employee ? How to give the authority to a employee as a little manager ? How to control the organization or a company to work in a brief way?\n\nIn a company or an organization , we must have many roles such as employee chief general manager . These roles must have different title to do their works , and differnet title must have differnet salary and the rights to use the company resource .And in a company there are also some departments to let the manager flightly . and the departments and the company will be organized as a tree structure ...\n\n<!--more-->\n\nIn the manager view , we can conclude this result , we can organize our Web or other software authority system in a tree structure , and now I will write some views of mine via reading the **Role-based Access Control** written by RAVl S. SANDHU.\n\n## How to manage the all web service ?\n\nIn practice , we can know the system can be constructed in some ways , usually we use MVC pattern to design our software and in these days we use the FE/BE as C/S architecture to develop our system.\n\nThe most import thing in these design is that ,Web service will have the resource concept , we can manage the resource by the thing URL , URL in restful web interface design , act as an importmant role . We can see the all url as the resource common in a company like the paper computer and other things.\n\nSo we can manage the user in our system to use the resouce to be abstracted as touch the url use HTTP method and then ,we can use the semantics like ***POST*** to add a new resource and ***GET*** to get a resource and use ***PUT*** to update a resource in our system and the ***DELETE*** to delete a resource , but we also need a semantics to describe the authority which will be used to grant the authority to other users in the same system.\n\n# RBAC models\n\n## RBAC concept\n\nThe RBAC authority system which describe a system to manage the role in the system to access the resources in the all system . Role-based Access Control is the all name to RBAC which design a rule to control the all resources ,Who How What is the base concept in RBAC and Who how to access What ,we can infer that use the role and group we can organize the all primission to user in a easy way . \n\n## RBAC defines\n\n### Define 0 level\n\n$RBAC_0$ Define\n\n* ***U*** , ***R*** ,***P*** and ***S*** (four set represent the users,roles,permissions,sessions)\n\n* $PA \\subseteq P \\times R$ many-to-many permission to role assignment relation \n\n* $UA \\subseteq U \\times R$ many-to-many user to role assignment relation\n\n* $user: S \\to U$ a function mapping each session $s_i$ to the single $\\left( s_i \\right)$ (constant for the session's lifecycle)\n\n* $roles: S \\to 2^R$ a function mapping each session $s_i$ to a set of roles $roles \\left( s_i \\right) \\in \\left\\{ r | \\left( user \\left( s_i \\right) , r \\right)\\right\\}$ (Which can change with time ) and session $s_i$ has the permissions $\\cup _{rroles \\left( s_i \\right)} \\left\\{ p | \\left( p , r \\right) \\in PA \\right\\}$\n\n\n## RBAC components \n\nIn the derivation above we can infer that , the role will contain the permissions and the user will be linked to role , and then we can use a string symbol to record the permission for a user and we can define the all permission on a role and then will be assigned to the users.\n\n### RBAC Role\n\nRole can be assigned to one or some permissions and then we can belive that a user must be as a role or some roles , so the roles we can see as the container to contain the permission in a system.\n\n### RBAC Permission\n\nAnd the permission we can belive that , a permission can be asssigned to a role , the role and permission is a releationship of N to N .\n\n### RBAC User\n\nThe users in the RBAC system we can see it as a business entity which contain one to many roles .And the roles contain the permissions , and the user is the unit we have to do authentication in our own system.\n\n### RBAC Session\n\nWhen a user login a system , then it will get a role signature to represent it's identity , and we can use the inteceptor to intecept the request from web to identify it's identity .\n\n### Group concept \n\n$$RBAC_0$$ can let us contribute a authority system , but to make the business easy , we should use the concept which we call as group . A group is a role in the system ,and a group can have children and also can inherit from a group or more , so we can easily create a graph to describe the all relations in the system.\n\nWe can let some users into a same group and they have the same permission to access the resource , so we can use some interface to create group and then assign the permission to this group and then we just need add users to this group.\n\n# RBAC 0 level implementation \n\nRBAC system base on the relations theory in Mathmatic and we can use the relation based Database to crate a system data structure to contain the all data , so we can do this design below.\n\nUser Table \n\n```sql\ncreate table user(\n    user_id bigint primary key,\n    user_role int not null,\n    # other fields \n);\n```\n\nPermission Table\n\n```sql\ncreate table permission(\n    permission_id bigint auto_increment primary key,\n    permission_name varchar(30) not null,\n    permission_url varchar(255) not null,\n    permission_mask smallint not null default 31, # 11111\n);\n```\n\nRole Table \n\n```sql\ncreate table role(\n    role_id bigint primary key auto_increment,\n    role_name varchar(100) not null,\n    role_parent bigint null\n);\n\n```\n\nRole-Permission Table\n\n```sql\ncreate table role_permission(\n    rp_id bigint primary key auto_increment,\n    rp_role bigint not null,\n    rp_permission bigint not null\n);\n```\n\nRole-User Table\n\n```sql\ncreate table role_user(\n    ru_id bigint primary key auto_increment,\n    ru_user bigint not null,\n    ru_role bigint not null\n);\n```\n\nAnd we can describe the PA and UA operation to role use the sql to describe , when we need a new permission we just need create a record to the permission table ,and the role we can do the design to let a role can inherit from another or other roles and the user asssign role just add record to the role_user table and the permission assign to role just to add a record to the role_permission table . And the SQL are real easy .\n\nIn action we should load the all role to system cache and then create a graph to describe the network to describe the inherit relations .","source":"_posts/Authority-Control-RBAC-0.md","raw":"---\ntitle: Authority Control - RBAC 0\ndate: 2018-05-26 20:03:25\ncategories:\n- Authority Control\ntags:\n- RBAC\nmathjax: true\n---\n\n# Thinking in a manager view\n\nHow do we manange our employee in a company ? How to control the resouce of a company which will be used by the all employee ? How to give the authority to a employee as a little manager ? How to control the organization or a company to work in a brief way?\n\nIn a company or an organization , we must have many roles such as employee chief general manager . These roles must have different title to do their works , and differnet title must have differnet salary and the rights to use the company resource .And in a company there are also some departments to let the manager flightly . and the departments and the company will be organized as a tree structure ...\n\n<!--more-->\n\nIn the manager view , we can conclude this result , we can organize our Web or other software authority system in a tree structure , and now I will write some views of mine via reading the **Role-based Access Control** written by RAVl S. SANDHU.\n\n## How to manage the all web service ?\n\nIn practice , we can know the system can be constructed in some ways , usually we use MVC pattern to design our software and in these days we use the FE/BE as C/S architecture to develop our system.\n\nThe most import thing in these design is that ,Web service will have the resource concept , we can manage the resource by the thing URL , URL in restful web interface design , act as an importmant role . We can see the all url as the resource common in a company like the paper computer and other things.\n\nSo we can manage the user in our system to use the resouce to be abstracted as touch the url use HTTP method and then ,we can use the semantics like ***POST*** to add a new resource and ***GET*** to get a resource and use ***PUT*** to update a resource in our system and the ***DELETE*** to delete a resource , but we also need a semantics to describe the authority which will be used to grant the authority to other users in the same system.\n\n# RBAC models\n\n## RBAC concept\n\nThe RBAC authority system which describe a system to manage the role in the system to access the resources in the all system . Role-based Access Control is the all name to RBAC which design a rule to control the all resources ,Who How What is the base concept in RBAC and Who how to access What ,we can infer that use the role and group we can organize the all primission to user in a easy way . \n\n## RBAC defines\n\n### Define 0 level\n\n$RBAC_0$ Define\n\n* ***U*** , ***R*** ,***P*** and ***S*** (four set represent the users,roles,permissions,sessions)\n\n* $PA \\subseteq P \\times R$ many-to-many permission to role assignment relation \n\n* $UA \\subseteq U \\times R$ many-to-many user to role assignment relation\n\n* $user: S \\to U$ a function mapping each session $s_i$ to the single $\\left( s_i \\right)$ (constant for the session's lifecycle)\n\n* $roles: S \\to 2^R$ a function mapping each session $s_i$ to a set of roles $roles \\left( s_i \\right) \\in \\left\\{ r | \\left( user \\left( s_i \\right) , r \\right)\\right\\}$ (Which can change with time ) and session $s_i$ has the permissions $\\cup _{rroles \\left( s_i \\right)} \\left\\{ p | \\left( p , r \\right) \\in PA \\right\\}$\n\n\n## RBAC components \n\nIn the derivation above we can infer that , the role will contain the permissions and the user will be linked to role , and then we can use a string symbol to record the permission for a user and we can define the all permission on a role and then will be assigned to the users.\n\n### RBAC Role\n\nRole can be assigned to one or some permissions and then we can belive that a user must be as a role or some roles , so the roles we can see as the container to contain the permission in a system.\n\n### RBAC Permission\n\nAnd the permission we can belive that , a permission can be asssigned to a role , the role and permission is a releationship of N to N .\n\n### RBAC User\n\nThe users in the RBAC system we can see it as a business entity which contain one to many roles .And the roles contain the permissions , and the user is the unit we have to do authentication in our own system.\n\n### RBAC Session\n\nWhen a user login a system , then it will get a role signature to represent it's identity , and we can use the inteceptor to intecept the request from web to identify it's identity .\n\n### Group concept \n\n$$RBAC_0$$ can let us contribute a authority system , but to make the business easy , we should use the concept which we call as group . A group is a role in the system ,and a group can have children and also can inherit from a group or more , so we can easily create a graph to describe the all relations in the system.\n\nWe can let some users into a same group and they have the same permission to access the resource , so we can use some interface to create group and then assign the permission to this group and then we just need add users to this group.\n\n# RBAC 0 level implementation \n\nRBAC system base on the relations theory in Mathmatic and we can use the relation based Database to crate a system data structure to contain the all data , so we can do this design below.\n\nUser Table \n\n```sql\ncreate table user(\n    user_id bigint primary key,\n    user_role int not null,\n    # other fields \n);\n```\n\nPermission Table\n\n```sql\ncreate table permission(\n    permission_id bigint auto_increment primary key,\n    permission_name varchar(30) not null,\n    permission_url varchar(255) not null,\n    permission_mask smallint not null default 31, # 11111\n);\n```\n\nRole Table \n\n```sql\ncreate table role(\n    role_id bigint primary key auto_increment,\n    role_name varchar(100) not null,\n    role_parent bigint null\n);\n\n```\n\nRole-Permission Table\n\n```sql\ncreate table role_permission(\n    rp_id bigint primary key auto_increment,\n    rp_role bigint not null,\n    rp_permission bigint not null\n);\n```\n\nRole-User Table\n\n```sql\ncreate table role_user(\n    ru_id bigint primary key auto_increment,\n    ru_user bigint not null,\n    ru_role bigint not null\n);\n```\n\nAnd we can describe the PA and UA operation to role use the sql to describe , when we need a new permission we just need create a record to the permission table ,and the role we can do the design to let a role can inherit from another or other roles and the user asssign role just add record to the role_user table and the permission assign to role just to add a record to the role_permission table . And the SQL are real easy .\n\nIn action we should load the all role to system cache and then create a graph to describe the network to describe the inherit relations .","slug":"Authority-Control-RBAC-0","published":1,"updated":"2018-05-26T14:25:10.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh858000246244rgudsh6","content":"<h1 id=\"Thinking-in-a-manager-view\"><a href=\"#Thinking-in-a-manager-view\" class=\"headerlink\" title=\"Thinking in a manager view\"></a>Thinking in a manager view</h1><p>How do we manange our employee in a company ? How to control the resouce of a company which will be used by the all employee ? How to give the authority to a employee as a little manager ? How to control the organization or a company to work in a brief way?</p>\n<p>In a company or an organization , we must have many roles such as employee chief general manager . These roles must have different title to do their works , and differnet title must have differnet salary and the rights to use the company resource .And in a company there are also some departments to let the manager flightly . and the departments and the company will be organized as a tree structure …</p>\n<a id=\"more\"></a>\n<p>In the manager view , we can conclude this result , we can organize our Web or other software authority system in a tree structure , and now I will write some views of mine via reading the <strong>Role-based Access Control</strong> written by RAVl S. SANDHU.</p>\n<h2 id=\"How-to-manage-the-all-web-service\"><a href=\"#How-to-manage-the-all-web-service\" class=\"headerlink\" title=\"How to manage the all web service ?\"></a>How to manage the all web service ?</h2><p>In practice , we can know the system can be constructed in some ways , usually we use MVC pattern to design our software and in these days we use the FE/BE as C/S architecture to develop our system.</p>\n<p>The most import thing in these design is that ,Web service will have the resource concept , we can manage the resource by the thing URL , URL in restful web interface design , act as an importmant role . We can see the all url as the resource common in a company like the paper computer and other things.</p>\n<p>So we can manage the user in our system to use the resouce to be abstracted as touch the url use HTTP method and then ,we can use the semantics like <strong><em>POST</em></strong> to add a new resource and <strong><em>GET</em></strong> to get a resource and use <strong><em>PUT</em></strong> to update a resource in our system and the <strong><em>DELETE</em></strong> to delete a resource , but we also need a semantics to describe the authority which will be used to grant the authority to other users in the same system.</p>\n<h1 id=\"RBAC-models\"><a href=\"#RBAC-models\" class=\"headerlink\" title=\"RBAC models\"></a>RBAC models</h1><h2 id=\"RBAC-concept\"><a href=\"#RBAC-concept\" class=\"headerlink\" title=\"RBAC concept\"></a>RBAC concept</h2><p>The RBAC authority system which describe a system to manage the role in the system to access the resources in the all system . Role-based Access Control is the all name to RBAC which design a rule to control the all resources ,Who How What is the base concept in RBAC and Who how to access What ,we can infer that use the role and group we can organize the all primission to user in a easy way . </p>\n<h2 id=\"RBAC-defines\"><a href=\"#RBAC-defines\" class=\"headerlink\" title=\"RBAC defines\"></a>RBAC defines</h2><h3 id=\"Define-0-level\"><a href=\"#Define-0-level\" class=\"headerlink\" title=\"Define 0 level\"></a>Define 0 level</h3><p>$RBAC_0$ Define</p>\n<ul>\n<li><p><strong><em>U</em></strong> , <strong><em>R</em></strong> ,<strong><em>P</em></strong> and <strong><em>S</em></strong> (four set represent the users,roles,permissions,sessions)</p>\n</li>\n<li><p>$PA \\subseteq P \\times R$ many-to-many permission to role assignment relation </p>\n</li>\n<li><p>$UA \\subseteq U \\times R$ many-to-many user to role assignment relation</p>\n</li>\n<li><p>$user: S \\to U$ a function mapping each session $s_i$ to the single $\\left( s_i \\right)$ (constant for the session’s lifecycle)</p>\n</li>\n<li><p>$roles: S \\to 2^R$ a function mapping each session $s_i$ to a set of roles $roles \\left( s_i \\right) \\in \\left\\{ r | \\left( user \\left( s_i \\right) , r \\right)\\right\\}$ (Which can change with time ) and session $s_i$ has the permissions $\\cup _{rroles \\left( s_i \\right)} \\left\\{ p | \\left( p , r \\right) \\in PA \\right\\}$</p>\n</li>\n</ul>\n<h2 id=\"RBAC-components\"><a href=\"#RBAC-components\" class=\"headerlink\" title=\"RBAC components\"></a>RBAC components</h2><p>In the derivation above we can infer that , the role will contain the permissions and the user will be linked to role , and then we can use a string symbol to record the permission for a user and we can define the all permission on a role and then will be assigned to the users.</p>\n<h3 id=\"RBAC-Role\"><a href=\"#RBAC-Role\" class=\"headerlink\" title=\"RBAC Role\"></a>RBAC Role</h3><p>Role can be assigned to one or some permissions and then we can belive that a user must be as a role or some roles , so the roles we can see as the container to contain the permission in a system.</p>\n<h3 id=\"RBAC-Permission\"><a href=\"#RBAC-Permission\" class=\"headerlink\" title=\"RBAC Permission\"></a>RBAC Permission</h3><p>And the permission we can belive that , a permission can be asssigned to a role , the role and permission is a releationship of N to N .</p>\n<h3 id=\"RBAC-User\"><a href=\"#RBAC-User\" class=\"headerlink\" title=\"RBAC User\"></a>RBAC User</h3><p>The users in the RBAC system we can see it as a business entity which contain one to many roles .And the roles contain the permissions , and the user is the unit we have to do authentication in our own system.</p>\n<h3 id=\"RBAC-Session\"><a href=\"#RBAC-Session\" class=\"headerlink\" title=\"RBAC Session\"></a>RBAC Session</h3><p>When a user login a system , then it will get a role signature to represent it’s identity , and we can use the inteceptor to intecept the request from web to identify it’s identity .</p>\n<h3 id=\"Group-concept\"><a href=\"#Group-concept\" class=\"headerlink\" title=\"Group concept\"></a>Group concept</h3><p><script type=\"math/tex\">RBAC_0</script> can let us contribute a authority system , but to make the business easy , we should use the concept which we call as group . A group is a role in the system ,and a group can have children and also can inherit from a group or more , so we can easily create a graph to describe the all relations in the system.</p>\n<p>We can let some users into a same group and they have the same permission to access the resource , so we can use some interface to create group and then assign the permission to this group and then we just need add users to this group.</p>\n<h1 id=\"RBAC-0-level-implementation\"><a href=\"#RBAC-0-level-implementation\" class=\"headerlink\" title=\"RBAC 0 level implementation\"></a>RBAC 0 level implementation</h1><p>RBAC system base on the relations theory in Mathmatic and we can use the relation based Database to crate a system data structure to contain the all data , so we can do this design below.</p>\n<p>User Table </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(</span><br><span class=\"line\">    user_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">    user_role <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    # other <span class=\"keyword\">fields</span> </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Permission Table</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> permission(</span><br><span class=\"line\">    permission_id <span class=\"built_in\">bigint</span> auto_increment primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">    permission_name <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    permission_url <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    permission_mask <span class=\"built_in\">smallint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"number\">31</span>, # <span class=\"number\">11111</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Role Table </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">role</span>(</span><br><span class=\"line\">    role_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">    role_name <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    role_parent <span class=\"built_in\">bigint</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Role-Permission Table</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> role_permission(</span><br><span class=\"line\">    rp_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">    rp_role <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    rp_permission <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Role-User Table</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> role_user(</span><br><span class=\"line\">    ru_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">    ru_user <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    ru_role <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>And we can describe the PA and UA operation to role use the sql to describe , when we need a new permission we just need create a record to the permission table ,and the role we can do the design to let a role can inherit from another or other roles and the user asssign role just add record to the role_user table and the permission assign to role just to add a record to the role_permission table . And the SQL are real easy .</p>\n<p>In action we should load the all role to system cache and then create a graph to describe the network to describe the inherit relations .</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Thinking-in-a-manager-view\"><a href=\"#Thinking-in-a-manager-view\" class=\"headerlink\" title=\"Thinking in a manager view\"></a>Thinking in a manager view</h1><p>How do we manange our employee in a company ? How to control the resouce of a company which will be used by the all employee ? How to give the authority to a employee as a little manager ? How to control the organization or a company to work in a brief way?</p>\n<p>In a company or an organization , we must have many roles such as employee chief general manager . These roles must have different title to do their works , and differnet title must have differnet salary and the rights to use the company resource .And in a company there are also some departments to let the manager flightly . and the departments and the company will be organized as a tree structure …</p>","more":"<p>In the manager view , we can conclude this result , we can organize our Web or other software authority system in a tree structure , and now I will write some views of mine via reading the <strong>Role-based Access Control</strong> written by RAVl S. SANDHU.</p>\n<h2 id=\"How-to-manage-the-all-web-service\"><a href=\"#How-to-manage-the-all-web-service\" class=\"headerlink\" title=\"How to manage the all web service ?\"></a>How to manage the all web service ?</h2><p>In practice , we can know the system can be constructed in some ways , usually we use MVC pattern to design our software and in these days we use the FE/BE as C/S architecture to develop our system.</p>\n<p>The most import thing in these design is that ,Web service will have the resource concept , we can manage the resource by the thing URL , URL in restful web interface design , act as an importmant role . We can see the all url as the resource common in a company like the paper computer and other things.</p>\n<p>So we can manage the user in our system to use the resouce to be abstracted as touch the url use HTTP method and then ,we can use the semantics like <strong><em>POST</em></strong> to add a new resource and <strong><em>GET</em></strong> to get a resource and use <strong><em>PUT</em></strong> to update a resource in our system and the <strong><em>DELETE</em></strong> to delete a resource , but we also need a semantics to describe the authority which will be used to grant the authority to other users in the same system.</p>\n<h1 id=\"RBAC-models\"><a href=\"#RBAC-models\" class=\"headerlink\" title=\"RBAC models\"></a>RBAC models</h1><h2 id=\"RBAC-concept\"><a href=\"#RBAC-concept\" class=\"headerlink\" title=\"RBAC concept\"></a>RBAC concept</h2><p>The RBAC authority system which describe a system to manage the role in the system to access the resources in the all system . Role-based Access Control is the all name to RBAC which design a rule to control the all resources ,Who How What is the base concept in RBAC and Who how to access What ,we can infer that use the role and group we can organize the all primission to user in a easy way . </p>\n<h2 id=\"RBAC-defines\"><a href=\"#RBAC-defines\" class=\"headerlink\" title=\"RBAC defines\"></a>RBAC defines</h2><h3 id=\"Define-0-level\"><a href=\"#Define-0-level\" class=\"headerlink\" title=\"Define 0 level\"></a>Define 0 level</h3><p>$RBAC_0$ Define</p>\n<ul>\n<li><p><strong><em>U</em></strong> , <strong><em>R</em></strong> ,<strong><em>P</em></strong> and <strong><em>S</em></strong> (four set represent the users,roles,permissions,sessions)</p>\n</li>\n<li><p>$PA \\subseteq P \\times R$ many-to-many permission to role assignment relation </p>\n</li>\n<li><p>$UA \\subseteq U \\times R$ many-to-many user to role assignment relation</p>\n</li>\n<li><p>$user: S \\to U$ a function mapping each session $s_i$ to the single $\\left( s_i \\right)$ (constant for the session’s lifecycle)</p>\n</li>\n<li><p>$roles: S \\to 2^R$ a function mapping each session $s_i$ to a set of roles $roles \\left( s_i \\right) \\in \\left\\{ r | \\left( user \\left( s_i \\right) , r \\right)\\right\\}$ (Which can change with time ) and session $s_i$ has the permissions $\\cup _{rroles \\left( s_i \\right)} \\left\\{ p | \\left( p , r \\right) \\in PA \\right\\}$</p>\n</li>\n</ul>\n<h2 id=\"RBAC-components\"><a href=\"#RBAC-components\" class=\"headerlink\" title=\"RBAC components\"></a>RBAC components</h2><p>In the derivation above we can infer that , the role will contain the permissions and the user will be linked to role , and then we can use a string symbol to record the permission for a user and we can define the all permission on a role and then will be assigned to the users.</p>\n<h3 id=\"RBAC-Role\"><a href=\"#RBAC-Role\" class=\"headerlink\" title=\"RBAC Role\"></a>RBAC Role</h3><p>Role can be assigned to one or some permissions and then we can belive that a user must be as a role or some roles , so the roles we can see as the container to contain the permission in a system.</p>\n<h3 id=\"RBAC-Permission\"><a href=\"#RBAC-Permission\" class=\"headerlink\" title=\"RBAC Permission\"></a>RBAC Permission</h3><p>And the permission we can belive that , a permission can be asssigned to a role , the role and permission is a releationship of N to N .</p>\n<h3 id=\"RBAC-User\"><a href=\"#RBAC-User\" class=\"headerlink\" title=\"RBAC User\"></a>RBAC User</h3><p>The users in the RBAC system we can see it as a business entity which contain one to many roles .And the roles contain the permissions , and the user is the unit we have to do authentication in our own system.</p>\n<h3 id=\"RBAC-Session\"><a href=\"#RBAC-Session\" class=\"headerlink\" title=\"RBAC Session\"></a>RBAC Session</h3><p>When a user login a system , then it will get a role signature to represent it’s identity , and we can use the inteceptor to intecept the request from web to identify it’s identity .</p>\n<h3 id=\"Group-concept\"><a href=\"#Group-concept\" class=\"headerlink\" title=\"Group concept\"></a>Group concept</h3><p><script type=\"math/tex\">RBAC_0</script> can let us contribute a authority system , but to make the business easy , we should use the concept which we call as group . A group is a role in the system ,and a group can have children and also can inherit from a group or more , so we can easily create a graph to describe the all relations in the system.</p>\n<p>We can let some users into a same group and they have the same permission to access the resource , so we can use some interface to create group and then assign the permission to this group and then we just need add users to this group.</p>\n<h1 id=\"RBAC-0-level-implementation\"><a href=\"#RBAC-0-level-implementation\" class=\"headerlink\" title=\"RBAC 0 level implementation\"></a>RBAC 0 level implementation</h1><p>RBAC system base on the relations theory in Mathmatic and we can use the relation based Database to crate a system data structure to contain the all data , so we can do this design below.</p>\n<p>User Table </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(</span><br><span class=\"line\">    user_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">    user_role <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    # other <span class=\"keyword\">fields</span> </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Permission Table</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> permission(</span><br><span class=\"line\">    permission_id <span class=\"built_in\">bigint</span> auto_increment primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">    permission_name <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    permission_url <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    permission_mask <span class=\"built_in\">smallint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"number\">31</span>, # <span class=\"number\">11111</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Role Table </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">role</span>(</span><br><span class=\"line\">    role_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">    role_name <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    role_parent <span class=\"built_in\">bigint</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Role-Permission Table</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> role_permission(</span><br><span class=\"line\">    rp_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">    rp_role <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    rp_permission <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Role-User Table</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> role_user(</span><br><span class=\"line\">    ru_id <span class=\"built_in\">bigint</span> primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">    ru_user <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    ru_role <span class=\"built_in\">bigint</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>And we can describe the PA and UA operation to role use the sql to describe , when we need a new permission we just need create a record to the permission table ,and the role we can do the design to let a role can inherit from another or other roles and the user asssign role just add record to the role_user table and the permission assign to role just to add a record to the role_permission table . And the SQL are real easy .</p>\n<p>In action we should load the all role to system cache and then create a graph to describe the network to describe the inherit relations .</p>"},{"title":"Authority Control RBAC 1","date":"2018-05-26T22:46:58.000Z","mathjax":true,"_content":"\n# The next model to optimize $RBAC_0$\n\nWe call the next model $RBAC_1$,in this model we can let the roles in our system to inherit from the upward hierarchy , and use this model we can let a system's role to be orginazed in a hierarchy method and then we can design the base role with the base permission in the lowest hierarchy and the super manager in the high hierarchy.\n\nAnd a role can have more than one permission and then we can use the tree model to describe the model in the all system starting and then , we can also use the same method to do so ,with redis or other cache tools. In the algorithms we use the base DFS to find a role which will be assigned a identifier in the system application.\n\n<!--more--> \n\n# Components \n\n## Mathmatic model\n\n* $U S P S PA UA$ and $user$ are unchange from the $RBAC_0$\n\n* $RH \\in R \\times R$ is a partial order in $R$ called the hierarchy or role dominance relation also writern in >= in nifix notion\n\n* \n\n\n\n![RBAC1 DEMO](http://ww1.sinaimg.cn/mw690/0079qc5ply1frp4k2c3bpj31ao0zmaep.jpg)\n\nWe can use the Graph to construct the model in action , when the system starting , the all informations can be readed from the database and then trismit to the cache system , we can in memeory to contribute the all model and all their releartionships about the line in a graph .\n\n","source":"_posts/Authority-Control-RBAC-1.md","raw":"---\ntitle: Authority Control RBAC 1\ndate: 2018-05-26 22:46:58\ncategories:\n- Authority Control\ntags:\n- RBAC\nmathjax: true\n---\n\n# The next model to optimize $RBAC_0$\n\nWe call the next model $RBAC_1$,in this model we can let the roles in our system to inherit from the upward hierarchy , and use this model we can let a system's role to be orginazed in a hierarchy method and then we can design the base role with the base permission in the lowest hierarchy and the super manager in the high hierarchy.\n\nAnd a role can have more than one permission and then we can use the tree model to describe the model in the all system starting and then , we can also use the same method to do so ,with redis or other cache tools. In the algorithms we use the base DFS to find a role which will be assigned a identifier in the system application.\n\n<!--more--> \n\n# Components \n\n## Mathmatic model\n\n* $U S P S PA UA$ and $user$ are unchange from the $RBAC_0$\n\n* $RH \\in R \\times R$ is a partial order in $R$ called the hierarchy or role dominance relation also writern in >= in nifix notion\n\n* \n\n\n\n![RBAC1 DEMO](http://ww1.sinaimg.cn/mw690/0079qc5ply1frp4k2c3bpj31ao0zmaep.jpg)\n\nWe can use the Graph to construct the model in action , when the system starting , the all informations can be readed from the database and then trismit to the cache system , we can in memeory to contribute the all model and all their releartionships about the line in a graph .\n\n","slug":"Authority-Control-RBAC-1","published":1,"updated":"2018-06-08T08:36:44.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85b00054624pg3c882e","content":"<h1 id=\"The-next-model-to-optimize-RBAC-0\"><a href=\"#The-next-model-to-optimize-RBAC-0\" class=\"headerlink\" title=\"The next model to optimize $RBAC_0$\"></a>The next model to optimize $RBAC_0$</h1><p>We call the next model $RBAC_1$,in this model we can let the roles in our system to inherit from the upward hierarchy , and use this model we can let a system’s role to be orginazed in a hierarchy method and then we can design the base role with the base permission in the lowest hierarchy and the super manager in the high hierarchy.</p>\n<p>And a role can have more than one permission and then we can use the tree model to describe the model in the all system starting and then , we can also use the same method to do so ,with redis or other cache tools. In the algorithms we use the base DFS to find a role which will be assigned a identifier in the system application.</p>\n<a id=\"more\"></a> \n<h1 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h1><h2 id=\"Mathmatic-model\"><a href=\"#Mathmatic-model\" class=\"headerlink\" title=\"Mathmatic model\"></a>Mathmatic model</h2><ul>\n<li><p>$U S P S PA UA$ and $user$ are unchange from the $RBAC_0$</p>\n</li>\n<li><p>$RH \\in R \\times R$ is a partial order in $R$ called the hierarchy or role dominance relation also writern in &gt;= in nifix notion</p>\n</li>\n<li></li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frp4k2c3bpj31ao0zmaep.jpg\" alt=\"RBAC1 DEMO\"></p>\n<p>We can use the Graph to construct the model in action , when the system starting , the all informations can be readed from the database and then trismit to the cache system , we can in memeory to contribute the all model and all their releartionships about the line in a graph .</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"The-next-model-to-optimize-RBAC-0\"><a href=\"#The-next-model-to-optimize-RBAC-0\" class=\"headerlink\" title=\"The next model to optimize $RBAC_0$\"></a>The next model to optimize $RBAC_0$</h1><p>We call the next model $RBAC_1$,in this model we can let the roles in our system to inherit from the upward hierarchy , and use this model we can let a system’s role to be orginazed in a hierarchy method and then we can design the base role with the base permission in the lowest hierarchy and the super manager in the high hierarchy.</p>\n<p>And a role can have more than one permission and then we can use the tree model to describe the model in the all system starting and then , we can also use the same method to do so ,with redis or other cache tools. In the algorithms we use the base DFS to find a role which will be assigned a identifier in the system application.</p>","more":"<h1 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h1><h2 id=\"Mathmatic-model\"><a href=\"#Mathmatic-model\" class=\"headerlink\" title=\"Mathmatic model\"></a>Mathmatic model</h2><ul>\n<li><p>$U S P S PA UA$ and $user$ are unchange from the $RBAC_0$</p>\n</li>\n<li><p>$RH \\in R \\times R$ is a partial order in $R$ called the hierarchy or role dominance relation also writern in &gt;= in nifix notion</p>\n</li>\n<li></li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frp4k2c3bpj31ao0zmaep.jpg\" alt=\"RBAC1 DEMO\"></p>\n<p>We can use the Graph to construct the model in action , when the system starting , the all informations can be readed from the database and then trismit to the cache system , we can in memeory to contribute the all model and all their releartionships about the line in a graph .</p>"},{"title":"C Note extern keyword","date":"2018-05-21T22:00:40.000Z","_content":"\n# extern keyword\n\nI was very puzzle in this keyword in many C language programming . I write this note to record this keyword usage.\n\n<!--more-->\n\n## variable scope\n\nIn C programming , the variables have theri scope , function scope and global scope in common , many programming language have this concept to devide the variables to many type to do more effective thing in programming.\n\nAs we know that the program have both stack and heap area , but there are some areas we don't know before , their are text area and data area , stack and heap we can understand easily , in the stack area where will save the variables and some tempory data in a structure called **stack frame** and the heap area we touch use the **malloc()** and **free()** functions to attach those varibale .\n\nBut we should know the text and the data area , the text area saves the program code , if you had learn the assembly in before learning and you can write the code in the segment called **test** , this segment will save the code and the instructions , then this area can let memory model in the segment-page method to manage the memeoy in practie.\n\nAnd the data area will save the global varibales , these varibales may use in anywhere , for example the Unix kernel set the **u** to be a global varibale to define some information to record the user and the group information.\n\nFor this history design reason ,we can brefily understand the scope of varibales . In my opinion , the programming compiler like gcc will compile the all program files and then linke them to single execute file ,in the execute file , the all global variable will set in the data area and the all instructions will save in the text and divided into some segments and then the stack and the heap will be the support memeory model in runtime .\n\n### Local variables\n\nThe local varibales will be define in the function inner scope , and these variables are devided into two types static and auto.\n\n#### auto local varibales\n\n```C\n#include<stdio.h>\n\nint main()\n{\n    int a = 10;\n    int b;\n    b = a;\n    printf(\"%d\\n\",a);\n    return 0;\n}\n```\n\nin this program we can belive the a and b are alloc in the stack and the main function will get a stack frame and the all variables both a and b will save into the frame , when the main function return then the frame of this program will release autimaic,so we call the a and b as auto variables;\n\n#### static local variables\n\n```C\n#include<stdio.h>\n\nint add_ten(int);\n\nint main()\n{\n    int a = 1;\n    int b ;\n    b = add_tem(a);\n    printf(\"%d\\n\",b);\n    return 0;\n}\n\nint add_ten(int i)\n{\n    static int item = 1000;\n    return item + i;\n}\n```\n\nin this program the item is a static variables which will be initialized when the compile period and assignd to the integer 1000 . And everytime the function call the item can't change.\n\n### global variables \n\nNow we get the next step to know what is the gloabl variables , and what is the static global variables .\n\nI have mentioned before , the global varibales will set into the data area , and these variables will be initialized at the time the program running start point . Then the varibale will be setted.\n\nFile global_variable.h\n\n```c\n#ifndef __GLOBAL_VARIABLE_H__\n#define __GLOBAL_VARIABLE_H__\n\nint equal_tem(int);\n\n#endif\n```\n\nFile global_varibale.c\n\n```c\n#include \"global_variable.h\"\n\nstatic int _TEN_VAR_ = 10;\nint _OTHER_VAR_ = 100;\n\nint equal_tem(int i)\n{\n    return i > _TEN_VAR_ ? 1 : 0;\n}\n```\n\nFile global_call.c\n\n```c\n#include <stdio.h>\n\nextern int equal_tem(int);\n\nvoid global_call()\n{\n    extern int _OTHER_VAR_;\n\n    printf(\"%d\\n\",_OTHER_VAR_);\n    \n    printf(\"%d\\n\",equal_tem(_OTHER_VAR_));\n}\n\nint main(){\n    global_call();\n    return 0;\n}\n\n```\n\nFile makefile\n\n```makefile\ntest : global_variable.o global_call.o\n        gcc -o test global_variable.o global_call.o\n\nglobal_variable.o : global_variable.c global_variable.h\n        gcc -c global_variable.c global_variable.h\n\nglobal_call.o : global_call.c\n        gcc -c  global_call.c\n```\n\nAfter this demo we can infer that , we don't need some declare of variables or functions , we could use the extern keyword to call the function defined in the other file . We can consider that the process of gcc doing is that , when the gcc call then will collect the code form the all code and then integrated them to one file ,and then split the code to the three segment data text and bss , then we can get as the below file .\n\n```c\n#include <stdio.h>\n\nstatic int _TEN_VAR_ = 10;\nint _OTHER_VAR_ = 100;\n\nint equal_tem(int i)\n{\n    return i > _TEN_VAR_ ? 1 : 0;\n}\n\nvoid global_call()\n{\n    extern int _OTHER_VAR_;\n\n    printf(\"%d\\n\",_OTHER_VAR_);\n    \n    printf(\"%d\\n\",equal_tem(_OTHER_VAR_));\n}\n\nint main(){\n    global_call();\n    return 0;\n}\n```\n\nBut this code is not the which gcc work to generate , but we can consider as this file to wrpper the extern keyword.\n\n## how to use \n\nwe can use this keyword to do many thing , some time we don't need the header file ,and use the function local scope static varibales we save some memory in use , and fast the speed of the program .\n\nwe can use the extern in CPP to write some code just use in C like we can wrap the system call to use in CPP before the C and use the Cpp class grammer to wrap the system call.\n","source":"_posts/C-Note-extern-keyword.md","raw":"---\ntitle: C Note extern keyword\ndate: 2018-05-21 22:00:40\ncategories:\n- C\ntags:\n- program note\n---\n\n# extern keyword\n\nI was very puzzle in this keyword in many C language programming . I write this note to record this keyword usage.\n\n<!--more-->\n\n## variable scope\n\nIn C programming , the variables have theri scope , function scope and global scope in common , many programming language have this concept to devide the variables to many type to do more effective thing in programming.\n\nAs we know that the program have both stack and heap area , but there are some areas we don't know before , their are text area and data area , stack and heap we can understand easily , in the stack area where will save the variables and some tempory data in a structure called **stack frame** and the heap area we touch use the **malloc()** and **free()** functions to attach those varibale .\n\nBut we should know the text and the data area , the text area saves the program code , if you had learn the assembly in before learning and you can write the code in the segment called **test** , this segment will save the code and the instructions , then this area can let memory model in the segment-page method to manage the memeoy in practie.\n\nAnd the data area will save the global varibales , these varibales may use in anywhere , for example the Unix kernel set the **u** to be a global varibale to define some information to record the user and the group information.\n\nFor this history design reason ,we can brefily understand the scope of varibales . In my opinion , the programming compiler like gcc will compile the all program files and then linke them to single execute file ,in the execute file , the all global variable will set in the data area and the all instructions will save in the text and divided into some segments and then the stack and the heap will be the support memeory model in runtime .\n\n### Local variables\n\nThe local varibales will be define in the function inner scope , and these variables are devided into two types static and auto.\n\n#### auto local varibales\n\n```C\n#include<stdio.h>\n\nint main()\n{\n    int a = 10;\n    int b;\n    b = a;\n    printf(\"%d\\n\",a);\n    return 0;\n}\n```\n\nin this program we can belive the a and b are alloc in the stack and the main function will get a stack frame and the all variables both a and b will save into the frame , when the main function return then the frame of this program will release autimaic,so we call the a and b as auto variables;\n\n#### static local variables\n\n```C\n#include<stdio.h>\n\nint add_ten(int);\n\nint main()\n{\n    int a = 1;\n    int b ;\n    b = add_tem(a);\n    printf(\"%d\\n\",b);\n    return 0;\n}\n\nint add_ten(int i)\n{\n    static int item = 1000;\n    return item + i;\n}\n```\n\nin this program the item is a static variables which will be initialized when the compile period and assignd to the integer 1000 . And everytime the function call the item can't change.\n\n### global variables \n\nNow we get the next step to know what is the gloabl variables , and what is the static global variables .\n\nI have mentioned before , the global varibales will set into the data area , and these variables will be initialized at the time the program running start point . Then the varibale will be setted.\n\nFile global_variable.h\n\n```c\n#ifndef __GLOBAL_VARIABLE_H__\n#define __GLOBAL_VARIABLE_H__\n\nint equal_tem(int);\n\n#endif\n```\n\nFile global_varibale.c\n\n```c\n#include \"global_variable.h\"\n\nstatic int _TEN_VAR_ = 10;\nint _OTHER_VAR_ = 100;\n\nint equal_tem(int i)\n{\n    return i > _TEN_VAR_ ? 1 : 0;\n}\n```\n\nFile global_call.c\n\n```c\n#include <stdio.h>\n\nextern int equal_tem(int);\n\nvoid global_call()\n{\n    extern int _OTHER_VAR_;\n\n    printf(\"%d\\n\",_OTHER_VAR_);\n    \n    printf(\"%d\\n\",equal_tem(_OTHER_VAR_));\n}\n\nint main(){\n    global_call();\n    return 0;\n}\n\n```\n\nFile makefile\n\n```makefile\ntest : global_variable.o global_call.o\n        gcc -o test global_variable.o global_call.o\n\nglobal_variable.o : global_variable.c global_variable.h\n        gcc -c global_variable.c global_variable.h\n\nglobal_call.o : global_call.c\n        gcc -c  global_call.c\n```\n\nAfter this demo we can infer that , we don't need some declare of variables or functions , we could use the extern keyword to call the function defined in the other file . We can consider that the process of gcc doing is that , when the gcc call then will collect the code form the all code and then integrated them to one file ,and then split the code to the three segment data text and bss , then we can get as the below file .\n\n```c\n#include <stdio.h>\n\nstatic int _TEN_VAR_ = 10;\nint _OTHER_VAR_ = 100;\n\nint equal_tem(int i)\n{\n    return i > _TEN_VAR_ ? 1 : 0;\n}\n\nvoid global_call()\n{\n    extern int _OTHER_VAR_;\n\n    printf(\"%d\\n\",_OTHER_VAR_);\n    \n    printf(\"%d\\n\",equal_tem(_OTHER_VAR_));\n}\n\nint main(){\n    global_call();\n    return 0;\n}\n```\n\nBut this code is not the which gcc work to generate , but we can consider as this file to wrpper the extern keyword.\n\n## how to use \n\nwe can use this keyword to do many thing , some time we don't need the header file ,and use the function local scope static varibales we save some memory in use , and fast the speed of the program .\n\nwe can use the extern in CPP to write some code just use in C like we can wrap the system call to use in CPP before the C and use the Cpp class grammer to wrap the system call.\n","slug":"C-Note-extern-keyword","published":1,"updated":"2018-05-21T16:21:17.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85d00064624x4saf85l","content":"<h1 id=\"extern-keyword\"><a href=\"#extern-keyword\" class=\"headerlink\" title=\"extern keyword\"></a>extern keyword</h1><p>I was very puzzle in this keyword in many C language programming . I write this note to record this keyword usage.</p>\n<a id=\"more\"></a>\n<h2 id=\"variable-scope\"><a href=\"#variable-scope\" class=\"headerlink\" title=\"variable scope\"></a>variable scope</h2><p>In C programming , the variables have theri scope , function scope and global scope in common , many programming language have this concept to devide the variables to many type to do more effective thing in programming.</p>\n<p>As we know that the program have both stack and heap area , but there are some areas we don’t know before , their are text area and data area , stack and heap we can understand easily , in the stack area where will save the variables and some tempory data in a structure called <strong>stack frame</strong> and the heap area we touch use the <strong>malloc()</strong> and <strong>free()</strong> functions to attach those varibale .</p>\n<p>But we should know the text and the data area , the text area saves the program code , if you had learn the assembly in before learning and you can write the code in the segment called <strong>test</strong> , this segment will save the code and the instructions , then this area can let memory model in the segment-page method to manage the memeoy in practie.</p>\n<p>And the data area will save the global varibales , these varibales may use in anywhere , for example the Unix kernel set the <strong>u</strong> to be a global varibale to define some information to record the user and the group information.</p>\n<p>For this history design reason ,we can brefily understand the scope of varibales . In my opinion , the programming compiler like gcc will compile the all program files and then linke them to single execute file ,in the execute file , the all global variable will set in the data area and the all instructions will save in the text and divided into some segments and then the stack and the heap will be the support memeory model in runtime .</p>\n<h3 id=\"Local-variables\"><a href=\"#Local-variables\" class=\"headerlink\" title=\"Local variables\"></a>Local variables</h3><p>The local varibales will be define in the function inner scope , and these variables are devided into two types static and auto.</p>\n<h4 id=\"auto-local-varibales\"><a href=\"#auto-local-varibales\" class=\"headerlink\" title=\"auto local varibales\"></a>auto local varibales</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>in this program we can belive the a and b are alloc in the stack and the main function will get a stack frame and the all variables both a and b will save into the frame , when the main function return then the frame of this program will release autimaic,so we call the a and b as auto variables;</p>\n<h4 id=\"static-local-variables\"><a href=\"#static-local-variables\" class=\"headerlink\" title=\"static local variables\"></a>static local variables</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add_ten</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b ;</span><br><span class=\"line\">    b = add_tem(a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add_ten</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> item = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item + i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>in this program the item is a static variables which will be initialized when the compile period and assignd to the integer 1000 . And everytime the function call the item can’t change.</p>\n<h3 id=\"global-variables\"><a href=\"#global-variables\" class=\"headerlink\" title=\"global variables\"></a>global variables</h3><p>Now we get the next step to know what is the gloabl variables , and what is the static global variables .</p>\n<p>I have mentioned before , the global varibales will set into the data area , and these variables will be initialized at the time the program running start point . Then the varibale will be setted.</p>\n<p>File global_variable.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __GLOBAL_VARIABLE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __GLOBAL_VARIABLE_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>File global_varibale.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"global_variable.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _TEN_VAR_ = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> _OTHER_VAR_ = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i &gt; _TEN_VAR_ ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>File global_call.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">global_call</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> _OTHER_VAR_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,_OTHER_VAR_);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,equal_tem(_OTHER_VAR_));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    global_call();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>File makefile</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test : global_variable.o global_call.o</span><br><span class=\"line\">        gcc -o test global_variable.o global_call.o</span><br><span class=\"line\"></span><br><span class=\"line\">global_variable.o : global_variable.c global_variable.h</span><br><span class=\"line\">        gcc -c global_variable.c global_variable.h</span><br><span class=\"line\"></span><br><span class=\"line\">global_call.o : global_call.c</span><br><span class=\"line\">        gcc -c  global_call.c</span><br></pre></td></tr></table></figure>\n<p>After this demo we can infer that , we don’t need some declare of variables or functions , we could use the extern keyword to call the function defined in the other file . We can consider that the process of gcc doing is that , when the gcc call then will collect the code form the all code and then integrated them to one file ,and then split the code to the three segment data text and bss , then we can get as the below file .</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _TEN_VAR_ = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> _OTHER_VAR_ = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i &gt; _TEN_VAR_ ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">global_call</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> _OTHER_VAR_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,_OTHER_VAR_);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,equal_tem(_OTHER_VAR_));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    global_call();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But this code is not the which gcc work to generate , but we can consider as this file to wrpper the extern keyword.</p>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h2><p>we can use this keyword to do many thing , some time we don’t need the header file ,and use the function local scope static varibales we save some memory in use , and fast the speed of the program .</p>\n<p>we can use the extern in CPP to write some code just use in C like we can wrap the system call to use in CPP before the C and use the Cpp class grammer to wrap the system call.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"extern-keyword\"><a href=\"#extern-keyword\" class=\"headerlink\" title=\"extern keyword\"></a>extern keyword</h1><p>I was very puzzle in this keyword in many C language programming . I write this note to record this keyword usage.</p>","more":"<h2 id=\"variable-scope\"><a href=\"#variable-scope\" class=\"headerlink\" title=\"variable scope\"></a>variable scope</h2><p>In C programming , the variables have theri scope , function scope and global scope in common , many programming language have this concept to devide the variables to many type to do more effective thing in programming.</p>\n<p>As we know that the program have both stack and heap area , but there are some areas we don’t know before , their are text area and data area , stack and heap we can understand easily , in the stack area where will save the variables and some tempory data in a structure called <strong>stack frame</strong> and the heap area we touch use the <strong>malloc()</strong> and <strong>free()</strong> functions to attach those varibale .</p>\n<p>But we should know the text and the data area , the text area saves the program code , if you had learn the assembly in before learning and you can write the code in the segment called <strong>test</strong> , this segment will save the code and the instructions , then this area can let memory model in the segment-page method to manage the memeoy in practie.</p>\n<p>And the data area will save the global varibales , these varibales may use in anywhere , for example the Unix kernel set the <strong>u</strong> to be a global varibale to define some information to record the user and the group information.</p>\n<p>For this history design reason ,we can brefily understand the scope of varibales . In my opinion , the programming compiler like gcc will compile the all program files and then linke them to single execute file ,in the execute file , the all global variable will set in the data area and the all instructions will save in the text and divided into some segments and then the stack and the heap will be the support memeory model in runtime .</p>\n<h3 id=\"Local-variables\"><a href=\"#Local-variables\" class=\"headerlink\" title=\"Local variables\"></a>Local variables</h3><p>The local varibales will be define in the function inner scope , and these variables are devided into two types static and auto.</p>\n<h4 id=\"auto-local-varibales\"><a href=\"#auto-local-varibales\" class=\"headerlink\" title=\"auto local varibales\"></a>auto local varibales</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>in this program we can belive the a and b are alloc in the stack and the main function will get a stack frame and the all variables both a and b will save into the frame , when the main function return then the frame of this program will release autimaic,so we call the a and b as auto variables;</p>\n<h4 id=\"static-local-variables\"><a href=\"#static-local-variables\" class=\"headerlink\" title=\"static local variables\"></a>static local variables</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add_ten</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b ;</span><br><span class=\"line\">    b = add_tem(a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add_ten</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> item = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item + i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>in this program the item is a static variables which will be initialized when the compile period and assignd to the integer 1000 . And everytime the function call the item can’t change.</p>\n<h3 id=\"global-variables\"><a href=\"#global-variables\" class=\"headerlink\" title=\"global variables\"></a>global variables</h3><p>Now we get the next step to know what is the gloabl variables , and what is the static global variables .</p>\n<p>I have mentioned before , the global varibales will set into the data area , and these variables will be initialized at the time the program running start point . Then the varibale will be setted.</p>\n<p>File global_variable.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __GLOBAL_VARIABLE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __GLOBAL_VARIABLE_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>File global_varibale.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"global_variable.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _TEN_VAR_ = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> _OTHER_VAR_ = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i &gt; _TEN_VAR_ ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>File global_call.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">global_call</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> _OTHER_VAR_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,_OTHER_VAR_);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,equal_tem(_OTHER_VAR_));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    global_call();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>File makefile</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test : global_variable.o global_call.o</span><br><span class=\"line\">        gcc -o test global_variable.o global_call.o</span><br><span class=\"line\"></span><br><span class=\"line\">global_variable.o : global_variable.c global_variable.h</span><br><span class=\"line\">        gcc -c global_variable.c global_variable.h</span><br><span class=\"line\"></span><br><span class=\"line\">global_call.o : global_call.c</span><br><span class=\"line\">        gcc -c  global_call.c</span><br></pre></td></tr></table></figure>\n<p>After this demo we can infer that , we don’t need some declare of variables or functions , we could use the extern keyword to call the function defined in the other file . We can consider that the process of gcc doing is that , when the gcc call then will collect the code form the all code and then integrated them to one file ,and then split the code to the three segment data text and bss , then we can get as the below file .</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _TEN_VAR_ = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> _OTHER_VAR_ = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_tem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i &gt; _TEN_VAR_ ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">global_call</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> _OTHER_VAR_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,_OTHER_VAR_);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,equal_tem(_OTHER_VAR_));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    global_call();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But this code is not the which gcc work to generate , but we can consider as this file to wrpper the extern keyword.</p>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h2><p>we can use this keyword to do many thing , some time we don’t need the header file ,and use the function local scope static varibales we save some memory in use , and fast the speed of the program .</p>\n<p>we can use the extern in CPP to write some code just use in C like we can wrap the system call to use in CPP before the C and use the Cpp class grammer to wrap the system call.</p>"},{"title":"Compiler Theory -  NFA and DFA","date":"2018-05-16T00:51:38.000Z","_content":"\n# Compiler Principle\n\nIn the recent days,I was learning the JVM and how to use Golang implement a JVM for simple use , but also learning the unix kernel the process will run in ELF which is a file format of the execute file.\n\nSo I buied the ***Moden Compiler implemention*** book to learn the compiler theroy in action\n\nAs we know that not only the progrmming language need a grammer but also the common language that be used in the daily life for our commuication such as English Chinese or more.\n\nBut how to describe a language in a logical method is a very problem for me to know,and the compiler need what wo implement itself and how the GNU gcc work , It's a realy intresting thing in the way learning CS in my school life.\n\n<!--more-->\n\nFA（Finite Automata Machine）do loop input the character in a statement and then every character will change the machine state and when arrive at a final state then the machine will accept the state and the reset the machine inner state which contain the start endpoint and the final endpoint \n\n## Project management\n\nMore details will show in the next chacpter , as we know the language will use the struct in C to describe the language structure .\n\nContext-free grammer which used to describe a language to do more details in action , we can summarize the language characters in a mathmatical method.\n\nAnd then the language which writern in a character stream in a text file ,such as Hello.java , hello.c and so on , and we need some rule to modify the text to a memory model in action , and then will use a tree like structure to contain them .\n\nWe call the data structure as **Abstract Grammer Tree** which will to describe a language.\n\nSo we need a method to manage the compiler project .\n\nUse the gcc we may hear the concept that we say as a compile unit , but also in a grammer analyzing we also need some unit to contruct a language in a method .\n\nFrom a **Backus Naur** we can summary some objects to commucate to do as so .\n\nFor example : \n\n```text\nStm -> Stm ; Stm \nStm -> id := Exp\nStm -> print(ExpList)\nExp -> id \nExp -> num\nExp -> Exp Binop Exp\nExp -> (Stm,Exp)\nExpList -> Exp,ExpList\nExpList -> Exp \nBinop -> +\nBinop -> -\nBinop -> /\nBinop -> *\n```\n\nThe above Backus Naur formaule describe a program as this example \n```Go\nvalone := (1 + 2) ; valtwo := valone + 2 ; print(valonw,valtwo)\n```\n\nBut how do we use in action to describe in C language or other ?\n\n```C\n\ntypedef char * string;\ntypedef struct A_stm * A_stm;\ntypedef struct A_exp * A_exp;\ntypedef enum{A_plus,A_minus,A_times,A_div} A_binop;\n\nstruct A_stm_{\n    enum{A_comundStm,A_assignstm,A_printStm} kind;\n    union {\n        struct {A_stm stm1 , A_stm stm2} conpund;\n        struct {string id , A_exp exp} assign;\n        struct {struct AexpList exps} print;\n    } u ;\n};\n\nA_stm A_ConpundStm(A_stm stm1 , A_stm stm2);\nA_stm A_AssaignStm(string id , A_stm stm);\nA_stm A_PrintStm(A_expList exps);\n\nstruct A_exp_ {\n    enum {A_idExp,A_numExp,A_opExp,A_eseqExp} kind;\n    union{\n        string id;\n        int num;\n        struct {A_exp left ; A_binop oper; A_exp right}op;\n        struct {A_stm stm; A_exp exp;}eseq; \n    } u;\n};\n\nA_exp A_IdExp(string id);\nA_exp A_NumExp(int num);\nA_exp A_OpExp(A_exp left,A_binop oper,A_exp right);\nA_exp A_EseqExp(A_stm stm,A_exp exp);\n\nstruct A_expList_ {\n    enum {A_pairExpList , AlastExpList} kind;\n    union {\n        struct {A_exp head;A_expList tail} pair;\n        A_exp last;\n    } u;\n}\n\n```\n\nThe above code had contained the all grammer rule , as a example a statement will in three expressions , one is a conpund statement , two is an assginment statement , three is the print statement . As the expression in below \n\n```text\nStm -> Stm ; Stm (conpund)\nStm -> id := Exp (assign)\nStm -> print(ExpList) (print)\n```\n\nSo we can orginaze the all grammer of a language in a method described in the mathmatics methods and then will use this methods to do some analyze works .\n\nDo in these rule :\n* A language will use a structure to describe \n* A tree(AST) will use a typedef to define a new type in use \n* every struct will contain a kind field and an union u to define this statement \n* every will use the construct to construct the structure \n* every head file will use the common head sign in use \n\n\n## Language Structure \n\nNow what is the language structure in the compiler theory , we can belive that a statement will be defined in a struct program language , in data structure we had learned the algorithms we call the suffix and prefix tree , from a midfix to a suffix will use the stack which is more easilier for computer to do .\n\nso we must modify the midfix expression to a suffix expression , then use a stack to orginaze the all data .\n\nso we can do the next thind , a backus expression will do as a language structure in will be orginaze as a tree .\n\nfor example (statement):\n\n```text\n\nvalue := 1 ; value := value + 1 ; print(value)\n\nid binop num (assign statement )\n\nid binop exp ( id , binop , num) (assign)\n\nprint id (print statment )\n\ntree 1 :\n\n    assign op\n       /   \\\n      id   num\n\ntree 2 : \n\n    assign op\n     /     \\\n    id     + \n          /  \\\n         id  num\n\ntree 3 :\n\n    print\n     /\n    id \n\n```\n\nWe can use three AST to handle and descibe the text stream and then will handle in the next process to excute the program\n\n# Regular Expression\n\nHow to handle the text stream to a memeory model in action ?\n\nWe can use the Regular Expression and split the stream to many segment and then use these segment to construct a AST and then will use the stack to handle and execute the language \n\nmore details will in the next chapter \n\n## FA Demo \n\nFor next chapter I will use a simple example text match algorithm method to describe the FA\n\nWe need know some concepts , character table that will contain the all characters will be used in erery term contains \n\nAnd which is the soul of the **matching** I think is that we want find a state a P(use to find) T(use to be finded), which P prefix is the T suffix , when the prefix equal suffix then we belive that the P is contain in the T and the length decide more condition.\n\nDifferent or same as the KMP the FA will do in the O(n) time complex to solve the problem.\n\nNow we define the set is {a,b,c} and all the P and T will construct in these characters so let we write a program to do this thing.\n\n```C\n#include<stdio.h>\n#include<string.h>\n\n#define int bool\n#define char * string\n#define 0 false\n#define 1 true\n\ntypedef struct _state_\n{\n    int size ;\n    int * trans;\n} * state;\n\nstate * get_state_arr(string p,char * tab);\n\nbool do_match(string p,string t,char * tab);\n\n\n\n```\n\n\n![From Re to NFA](http://ww1.sinaimg.cn/large/0079qc5ply1fre6u3cjx1j30n20aut8o.jpg)\n\n## NFA and DFA Start \n\n## RegExp To NFA\n\n## NFA TO DFA \n\n## Lex Usage \n","source":"_posts/Compiler-Theory-NFA-and-DFA.md","raw":"---\ntitle: Compiler Theory -  NFA and DFA\ndate: 2018-05-16 00:51:38\ncategories:\n- Compiler\ntags:\n- Compiler Theory \n- Algorithms\n\n---\n\n# Compiler Principle\n\nIn the recent days,I was learning the JVM and how to use Golang implement a JVM for simple use , but also learning the unix kernel the process will run in ELF which is a file format of the execute file.\n\nSo I buied the ***Moden Compiler implemention*** book to learn the compiler theroy in action\n\nAs we know that not only the progrmming language need a grammer but also the common language that be used in the daily life for our commuication such as English Chinese or more.\n\nBut how to describe a language in a logical method is a very problem for me to know,and the compiler need what wo implement itself and how the GNU gcc work , It's a realy intresting thing in the way learning CS in my school life.\n\n<!--more-->\n\nFA（Finite Automata Machine）do loop input the character in a statement and then every character will change the machine state and when arrive at a final state then the machine will accept the state and the reset the machine inner state which contain the start endpoint and the final endpoint \n\n## Project management\n\nMore details will show in the next chacpter , as we know the language will use the struct in C to describe the language structure .\n\nContext-free grammer which used to describe a language to do more details in action , we can summarize the language characters in a mathmatical method.\n\nAnd then the language which writern in a character stream in a text file ,such as Hello.java , hello.c and so on , and we need some rule to modify the text to a memory model in action , and then will use a tree like structure to contain them .\n\nWe call the data structure as **Abstract Grammer Tree** which will to describe a language.\n\nSo we need a method to manage the compiler project .\n\nUse the gcc we may hear the concept that we say as a compile unit , but also in a grammer analyzing we also need some unit to contruct a language in a method .\n\nFrom a **Backus Naur** we can summary some objects to commucate to do as so .\n\nFor example : \n\n```text\nStm -> Stm ; Stm \nStm -> id := Exp\nStm -> print(ExpList)\nExp -> id \nExp -> num\nExp -> Exp Binop Exp\nExp -> (Stm,Exp)\nExpList -> Exp,ExpList\nExpList -> Exp \nBinop -> +\nBinop -> -\nBinop -> /\nBinop -> *\n```\n\nThe above Backus Naur formaule describe a program as this example \n```Go\nvalone := (1 + 2) ; valtwo := valone + 2 ; print(valonw,valtwo)\n```\n\nBut how do we use in action to describe in C language or other ?\n\n```C\n\ntypedef char * string;\ntypedef struct A_stm * A_stm;\ntypedef struct A_exp * A_exp;\ntypedef enum{A_plus,A_minus,A_times,A_div} A_binop;\n\nstruct A_stm_{\n    enum{A_comundStm,A_assignstm,A_printStm} kind;\n    union {\n        struct {A_stm stm1 , A_stm stm2} conpund;\n        struct {string id , A_exp exp} assign;\n        struct {struct AexpList exps} print;\n    } u ;\n};\n\nA_stm A_ConpundStm(A_stm stm1 , A_stm stm2);\nA_stm A_AssaignStm(string id , A_stm stm);\nA_stm A_PrintStm(A_expList exps);\n\nstruct A_exp_ {\n    enum {A_idExp,A_numExp,A_opExp,A_eseqExp} kind;\n    union{\n        string id;\n        int num;\n        struct {A_exp left ; A_binop oper; A_exp right}op;\n        struct {A_stm stm; A_exp exp;}eseq; \n    } u;\n};\n\nA_exp A_IdExp(string id);\nA_exp A_NumExp(int num);\nA_exp A_OpExp(A_exp left,A_binop oper,A_exp right);\nA_exp A_EseqExp(A_stm stm,A_exp exp);\n\nstruct A_expList_ {\n    enum {A_pairExpList , AlastExpList} kind;\n    union {\n        struct {A_exp head;A_expList tail} pair;\n        A_exp last;\n    } u;\n}\n\n```\n\nThe above code had contained the all grammer rule , as a example a statement will in three expressions , one is a conpund statement , two is an assginment statement , three is the print statement . As the expression in below \n\n```text\nStm -> Stm ; Stm (conpund)\nStm -> id := Exp (assign)\nStm -> print(ExpList) (print)\n```\n\nSo we can orginaze the all grammer of a language in a method described in the mathmatics methods and then will use this methods to do some analyze works .\n\nDo in these rule :\n* A language will use a structure to describe \n* A tree(AST) will use a typedef to define a new type in use \n* every struct will contain a kind field and an union u to define this statement \n* every will use the construct to construct the structure \n* every head file will use the common head sign in use \n\n\n## Language Structure \n\nNow what is the language structure in the compiler theory , we can belive that a statement will be defined in a struct program language , in data structure we had learned the algorithms we call the suffix and prefix tree , from a midfix to a suffix will use the stack which is more easilier for computer to do .\n\nso we must modify the midfix expression to a suffix expression , then use a stack to orginaze the all data .\n\nso we can do the next thind , a backus expression will do as a language structure in will be orginaze as a tree .\n\nfor example (statement):\n\n```text\n\nvalue := 1 ; value := value + 1 ; print(value)\n\nid binop num (assign statement )\n\nid binop exp ( id , binop , num) (assign)\n\nprint id (print statment )\n\ntree 1 :\n\n    assign op\n       /   \\\n      id   num\n\ntree 2 : \n\n    assign op\n     /     \\\n    id     + \n          /  \\\n         id  num\n\ntree 3 :\n\n    print\n     /\n    id \n\n```\n\nWe can use three AST to handle and descibe the text stream and then will handle in the next process to excute the program\n\n# Regular Expression\n\nHow to handle the text stream to a memeory model in action ?\n\nWe can use the Regular Expression and split the stream to many segment and then use these segment to construct a AST and then will use the stack to handle and execute the language \n\nmore details will in the next chapter \n\n## FA Demo \n\nFor next chapter I will use a simple example text match algorithm method to describe the FA\n\nWe need know some concepts , character table that will contain the all characters will be used in erery term contains \n\nAnd which is the soul of the **matching** I think is that we want find a state a P(use to find) T(use to be finded), which P prefix is the T suffix , when the prefix equal suffix then we belive that the P is contain in the T and the length decide more condition.\n\nDifferent or same as the KMP the FA will do in the O(n) time complex to solve the problem.\n\nNow we define the set is {a,b,c} and all the P and T will construct in these characters so let we write a program to do this thing.\n\n```C\n#include<stdio.h>\n#include<string.h>\n\n#define int bool\n#define char * string\n#define 0 false\n#define 1 true\n\ntypedef struct _state_\n{\n    int size ;\n    int * trans;\n} * state;\n\nstate * get_state_arr(string p,char * tab);\n\nbool do_match(string p,string t,char * tab);\n\n\n\n```\n\n\n![From Re to NFA](http://ww1.sinaimg.cn/large/0079qc5ply1fre6u3cjx1j30n20aut8o.jpg)\n\n## NFA and DFA Start \n\n## RegExp To NFA\n\n## NFA TO DFA \n\n## Lex Usage \n","slug":"Compiler-Theory-NFA-and-DFA","published":1,"updated":"2018-05-19T02:37:53.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85e00074624rgies3i2","content":"<h1 id=\"Compiler-Principle\"><a href=\"#Compiler-Principle\" class=\"headerlink\" title=\"Compiler Principle\"></a>Compiler Principle</h1><p>In the recent days,I was learning the JVM and how to use Golang implement a JVM for simple use , but also learning the unix kernel the process will run in ELF which is a file format of the execute file.</p>\n<p>So I buied the <strong><em>Moden Compiler implemention</em></strong> book to learn the compiler theroy in action</p>\n<p>As we know that not only the progrmming language need a grammer but also the common language that be used in the daily life for our commuication such as English Chinese or more.</p>\n<p>But how to describe a language in a logical method is a very problem for me to know,and the compiler need what wo implement itself and how the GNU gcc work , It’s a realy intresting thing in the way learning CS in my school life.</p>\n<a id=\"more\"></a>\n<p>FA（Finite Automata Machine）do loop input the character in a statement and then every character will change the machine state and when arrive at a final state then the machine will accept the state and the reset the machine inner state which contain the start endpoint and the final endpoint </p>\n<h2 id=\"Project-management\"><a href=\"#Project-management\" class=\"headerlink\" title=\"Project management\"></a>Project management</h2><p>More details will show in the next chacpter , as we know the language will use the struct in C to describe the language structure .</p>\n<p>Context-free grammer which used to describe a language to do more details in action , we can summarize the language characters in a mathmatical method.</p>\n<p>And then the language which writern in a character stream in a text file ,such as Hello.java , hello.c and so on , and we need some rule to modify the text to a memory model in action , and then will use a tree like structure to contain them .</p>\n<p>We call the data structure as <strong>Abstract Grammer Tree</strong> which will to describe a language.</p>\n<p>So we need a method to manage the compiler project .</p>\n<p>Use the gcc we may hear the concept that we say as a compile unit , but also in a grammer analyzing we also need some unit to contruct a language in a method .</p>\n<p>From a <strong>Backus Naur</strong> we can summary some objects to commucate to do as so .</p>\n<p>For example : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stm -&gt; Stm ; Stm </span><br><span class=\"line\">Stm -&gt; id := Exp</span><br><span class=\"line\">Stm -&gt; print(ExpList)</span><br><span class=\"line\">Exp -&gt; id </span><br><span class=\"line\">Exp -&gt; num</span><br><span class=\"line\">Exp -&gt; Exp Binop Exp</span><br><span class=\"line\">Exp -&gt; (Stm,Exp)</span><br><span class=\"line\">ExpList -&gt; Exp,ExpList</span><br><span class=\"line\">ExpList -&gt; Exp </span><br><span class=\"line\">Binop -&gt; +</span><br><span class=\"line\">Binop -&gt; -</span><br><span class=\"line\">Binop -&gt; /</span><br><span class=\"line\">Binop -&gt; *</span><br></pre></td></tr></table></figure>\n<p>The above Backus Naur formaule describe a program as this example<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valone := (<span class=\"number\">1</span> + <span class=\"number\">2</span>) ; valtwo := valone + <span class=\"number\">2</span> ; <span class=\"built_in\">print</span>(valonw,valtwo)</span><br></pre></td></tr></table></figure></p>\n<p>But how do we use in action to describe in C language or other ?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> * <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_stm</span> * <span class=\"title\">A_stm</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_exp</span> * <span class=\"title\">A_exp</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;A_plus,A_minus,A_times,A_div&#125; A_binop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_stm_</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span>&#123;A_comundStm,A_assignstm,A_printStm&#125; kind;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_stm stm1 , A_stm stm2&#125; conpund;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span><span class=\"built_in\">string</span> id , A_exp <span class=\"built_in\">exp</span>&#125; assign;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AexpList</span> <span class=\"title\">exps</span>&#125; <span class=\"title\">print</span>;</span></span><br><span class=\"line\">    &#125; u ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A_stm <span class=\"title\">A_ConpundStm</span><span class=\"params\">(A_stm stm1 , A_stm stm2)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_stm <span class=\"title\">A_AssaignStm</span><span class=\"params\">(<span class=\"built_in\">string</span> id , A_stm stm)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_stm <span class=\"title\">A_PrintStm</span><span class=\"params\">(A_expList exps)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_exp_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123;A_idExp,A_numExp,A_opExp,A_eseqExp&#125; kind;</span><br><span class=\"line\">    <span class=\"keyword\">union</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_exp left ; A_binop oper; A_exp right&#125;op;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_stm stm; A_exp <span class=\"built_in\">exp</span>;&#125;eseq; </span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_IdExp</span><span class=\"params\">(<span class=\"built_in\">string</span> id)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_NumExp</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_OpExp</span><span class=\"params\">(A_exp left,A_binop oper,A_exp right)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_EseqExp</span><span class=\"params\">(A_stm stm,A_exp <span class=\"built_in\">exp</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_expList_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123;A_pairExpList , AlastExpList&#125; kind;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_exp head;A_expList tail&#125; pair;</span><br><span class=\"line\">        A_exp last;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code had contained the all grammer rule , as a example a statement will in three expressions , one is a conpund statement , two is an assginment statement , three is the print statement . As the expression in below </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stm -&gt; Stm ; Stm (conpund)</span><br><span class=\"line\">Stm -&gt; id := Exp (assign)</span><br><span class=\"line\">Stm -&gt; print(ExpList) (print)</span><br></pre></td></tr></table></figure>\n<p>So we can orginaze the all grammer of a language in a method described in the mathmatics methods and then will use this methods to do some analyze works .</p>\n<p>Do in these rule :</p>\n<ul>\n<li>A language will use a structure to describe </li>\n<li>A tree(AST) will use a typedef to define a new type in use </li>\n<li>every struct will contain a kind field and an union u to define this statement </li>\n<li>every will use the construct to construct the structure </li>\n<li>every head file will use the common head sign in use </li>\n</ul>\n<h2 id=\"Language-Structure\"><a href=\"#Language-Structure\" class=\"headerlink\" title=\"Language Structure\"></a>Language Structure</h2><p>Now what is the language structure in the compiler theory , we can belive that a statement will be defined in a struct program language , in data structure we had learned the algorithms we call the suffix and prefix tree , from a midfix to a suffix will use the stack which is more easilier for computer to do .</p>\n<p>so we must modify the midfix expression to a suffix expression , then use a stack to orginaze the all data .</p>\n<p>so we can do the next thind , a backus expression will do as a language structure in will be orginaze as a tree .</p>\n<p>for example (statement):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">value := 1 ; value := value + 1 ; print(value)</span><br><span class=\"line\"></span><br><span class=\"line\">id binop num (assign statement )</span><br><span class=\"line\"></span><br><span class=\"line\">id binop exp ( id , binop , num) (assign)</span><br><span class=\"line\"></span><br><span class=\"line\">print id (print statment )</span><br><span class=\"line\"></span><br><span class=\"line\">tree 1 :</span><br><span class=\"line\"></span><br><span class=\"line\">    assign op</span><br><span class=\"line\">       /   \\</span><br><span class=\"line\">      id   num</span><br><span class=\"line\"></span><br><span class=\"line\">tree 2 : </span><br><span class=\"line\"></span><br><span class=\"line\">    assign op</span><br><span class=\"line\">     /     \\</span><br><span class=\"line\">    id     + </span><br><span class=\"line\">          /  \\</span><br><span class=\"line\">         id  num</span><br><span class=\"line\"></span><br><span class=\"line\">tree 3 :</span><br><span class=\"line\"></span><br><span class=\"line\">    print</span><br><span class=\"line\">     /</span><br><span class=\"line\">    id</span><br></pre></td></tr></table></figure>\n<p>We can use three AST to handle and descibe the text stream and then will handle in the next process to excute the program</p>\n<h1 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h1><p>How to handle the text stream to a memeory model in action ?</p>\n<p>We can use the Regular Expression and split the stream to many segment and then use these segment to construct a AST and then will use the stack to handle and execute the language </p>\n<p>more details will in the next chapter </p>\n<h2 id=\"FA-Demo\"><a href=\"#FA-Demo\" class=\"headerlink\" title=\"FA Demo\"></a>FA Demo</h2><p>For next chapter I will use a simple example text match algorithm method to describe the FA</p>\n<p>We need know some concepts , character table that will contain the all characters will be used in erery term contains </p>\n<p>And which is the soul of the <strong>matching</strong> I think is that we want find a state a P(use to find) T(use to be finded), which P prefix is the T suffix , when the prefix equal suffix then we belive that the P is contain in the T and the length decide more condition.</p>\n<p>Different or same as the KMP the FA will do in the O(n) time complex to solve the problem.</p>\n<p>Now we define the set is {a,b,c} and all the P and T will construct in these characters so let we write a program to do this thing.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int bool</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> char * string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> 0 false</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> 1 true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">state_</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * trans;</span><br><span class=\"line\">&#125; * state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">state * <span class=\"title\">get_state_arr</span><span class=\"params\">(<span class=\"built_in\">string</span> p,<span class=\"keyword\">char</span> * tab)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">do_match</span><span class=\"params\">(<span class=\"built_in\">string</span> p,<span class=\"built_in\">string</span> t,<span class=\"keyword\">char</span> * tab)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/0079qc5ply1fre6u3cjx1j30n20aut8o.jpg\" alt=\"From Re to NFA\"></p>\n<h2 id=\"NFA-and-DFA-Start\"><a href=\"#NFA-and-DFA-Start\" class=\"headerlink\" title=\"NFA and DFA Start\"></a>NFA and DFA Start</h2><h2 id=\"RegExp-To-NFA\"><a href=\"#RegExp-To-NFA\" class=\"headerlink\" title=\"RegExp To NFA\"></a>RegExp To NFA</h2><h2 id=\"NFA-TO-DFA\"><a href=\"#NFA-TO-DFA\" class=\"headerlink\" title=\"NFA TO DFA\"></a>NFA TO DFA</h2><h2 id=\"Lex-Usage\"><a href=\"#Lex-Usage\" class=\"headerlink\" title=\"Lex Usage\"></a>Lex Usage</h2>","site":{"data":{}},"excerpt":"<h1 id=\"Compiler-Principle\"><a href=\"#Compiler-Principle\" class=\"headerlink\" title=\"Compiler Principle\"></a>Compiler Principle</h1><p>In the recent days,I was learning the JVM and how to use Golang implement a JVM for simple use , but also learning the unix kernel the process will run in ELF which is a file format of the execute file.</p>\n<p>So I buied the <strong><em>Moden Compiler implemention</em></strong> book to learn the compiler theroy in action</p>\n<p>As we know that not only the progrmming language need a grammer but also the common language that be used in the daily life for our commuication such as English Chinese or more.</p>\n<p>But how to describe a language in a logical method is a very problem for me to know,and the compiler need what wo implement itself and how the GNU gcc work , It’s a realy intresting thing in the way learning CS in my school life.</p>","more":"<p>FA（Finite Automata Machine）do loop input the character in a statement and then every character will change the machine state and when arrive at a final state then the machine will accept the state and the reset the machine inner state which contain the start endpoint and the final endpoint </p>\n<h2 id=\"Project-management\"><a href=\"#Project-management\" class=\"headerlink\" title=\"Project management\"></a>Project management</h2><p>More details will show in the next chacpter , as we know the language will use the struct in C to describe the language structure .</p>\n<p>Context-free grammer which used to describe a language to do more details in action , we can summarize the language characters in a mathmatical method.</p>\n<p>And then the language which writern in a character stream in a text file ,such as Hello.java , hello.c and so on , and we need some rule to modify the text to a memory model in action , and then will use a tree like structure to contain them .</p>\n<p>We call the data structure as <strong>Abstract Grammer Tree</strong> which will to describe a language.</p>\n<p>So we need a method to manage the compiler project .</p>\n<p>Use the gcc we may hear the concept that we say as a compile unit , but also in a grammer analyzing we also need some unit to contruct a language in a method .</p>\n<p>From a <strong>Backus Naur</strong> we can summary some objects to commucate to do as so .</p>\n<p>For example : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stm -&gt; Stm ; Stm </span><br><span class=\"line\">Stm -&gt; id := Exp</span><br><span class=\"line\">Stm -&gt; print(ExpList)</span><br><span class=\"line\">Exp -&gt; id </span><br><span class=\"line\">Exp -&gt; num</span><br><span class=\"line\">Exp -&gt; Exp Binop Exp</span><br><span class=\"line\">Exp -&gt; (Stm,Exp)</span><br><span class=\"line\">ExpList -&gt; Exp,ExpList</span><br><span class=\"line\">ExpList -&gt; Exp </span><br><span class=\"line\">Binop -&gt; +</span><br><span class=\"line\">Binop -&gt; -</span><br><span class=\"line\">Binop -&gt; /</span><br><span class=\"line\">Binop -&gt; *</span><br></pre></td></tr></table></figure>\n<p>The above Backus Naur formaule describe a program as this example<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valone := (<span class=\"number\">1</span> + <span class=\"number\">2</span>) ; valtwo := valone + <span class=\"number\">2</span> ; <span class=\"built_in\">print</span>(valonw,valtwo)</span><br></pre></td></tr></table></figure></p>\n<p>But how do we use in action to describe in C language or other ?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> * <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_stm</span> * <span class=\"title\">A_stm</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_exp</span> * <span class=\"title\">A_exp</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;A_plus,A_minus,A_times,A_div&#125; A_binop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_stm_</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span>&#123;A_comundStm,A_assignstm,A_printStm&#125; kind;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_stm stm1 , A_stm stm2&#125; conpund;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span><span class=\"built_in\">string</span> id , A_exp <span class=\"built_in\">exp</span>&#125; assign;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AexpList</span> <span class=\"title\">exps</span>&#125; <span class=\"title\">print</span>;</span></span><br><span class=\"line\">    &#125; u ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A_stm <span class=\"title\">A_ConpundStm</span><span class=\"params\">(A_stm stm1 , A_stm stm2)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_stm <span class=\"title\">A_AssaignStm</span><span class=\"params\">(<span class=\"built_in\">string</span> id , A_stm stm)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_stm <span class=\"title\">A_PrintStm</span><span class=\"params\">(A_expList exps)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_exp_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123;A_idExp,A_numExp,A_opExp,A_eseqExp&#125; kind;</span><br><span class=\"line\">    <span class=\"keyword\">union</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_exp left ; A_binop oper; A_exp right&#125;op;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_stm stm; A_exp <span class=\"built_in\">exp</span>;&#125;eseq; </span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_IdExp</span><span class=\"params\">(<span class=\"built_in\">string</span> id)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_NumExp</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_OpExp</span><span class=\"params\">(A_exp left,A_binop oper,A_exp right)</span></span>;</span><br><span class=\"line\"><span class=\"function\">A_exp <span class=\"title\">A_EseqExp</span><span class=\"params\">(A_stm stm,A_exp <span class=\"built_in\">exp</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A_expList_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123;A_pairExpList , AlastExpList&#125; kind;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span>A_exp head;A_expList tail&#125; pair;</span><br><span class=\"line\">        A_exp last;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code had contained the all grammer rule , as a example a statement will in three expressions , one is a conpund statement , two is an assginment statement , three is the print statement . As the expression in below </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stm -&gt; Stm ; Stm (conpund)</span><br><span class=\"line\">Stm -&gt; id := Exp (assign)</span><br><span class=\"line\">Stm -&gt; print(ExpList) (print)</span><br></pre></td></tr></table></figure>\n<p>So we can orginaze the all grammer of a language in a method described in the mathmatics methods and then will use this methods to do some analyze works .</p>\n<p>Do in these rule :</p>\n<ul>\n<li>A language will use a structure to describe </li>\n<li>A tree(AST) will use a typedef to define a new type in use </li>\n<li>every struct will contain a kind field and an union u to define this statement </li>\n<li>every will use the construct to construct the structure </li>\n<li>every head file will use the common head sign in use </li>\n</ul>\n<h2 id=\"Language-Structure\"><a href=\"#Language-Structure\" class=\"headerlink\" title=\"Language Structure\"></a>Language Structure</h2><p>Now what is the language structure in the compiler theory , we can belive that a statement will be defined in a struct program language , in data structure we had learned the algorithms we call the suffix and prefix tree , from a midfix to a suffix will use the stack which is more easilier for computer to do .</p>\n<p>so we must modify the midfix expression to a suffix expression , then use a stack to orginaze the all data .</p>\n<p>so we can do the next thind , a backus expression will do as a language structure in will be orginaze as a tree .</p>\n<p>for example (statement):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">value := 1 ; value := value + 1 ; print(value)</span><br><span class=\"line\"></span><br><span class=\"line\">id binop num (assign statement )</span><br><span class=\"line\"></span><br><span class=\"line\">id binop exp ( id , binop , num) (assign)</span><br><span class=\"line\"></span><br><span class=\"line\">print id (print statment )</span><br><span class=\"line\"></span><br><span class=\"line\">tree 1 :</span><br><span class=\"line\"></span><br><span class=\"line\">    assign op</span><br><span class=\"line\">       /   \\</span><br><span class=\"line\">      id   num</span><br><span class=\"line\"></span><br><span class=\"line\">tree 2 : </span><br><span class=\"line\"></span><br><span class=\"line\">    assign op</span><br><span class=\"line\">     /     \\</span><br><span class=\"line\">    id     + </span><br><span class=\"line\">          /  \\</span><br><span class=\"line\">         id  num</span><br><span class=\"line\"></span><br><span class=\"line\">tree 3 :</span><br><span class=\"line\"></span><br><span class=\"line\">    print</span><br><span class=\"line\">     /</span><br><span class=\"line\">    id</span><br></pre></td></tr></table></figure>\n<p>We can use three AST to handle and descibe the text stream and then will handle in the next process to excute the program</p>\n<h1 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h1><p>How to handle the text stream to a memeory model in action ?</p>\n<p>We can use the Regular Expression and split the stream to many segment and then use these segment to construct a AST and then will use the stack to handle and execute the language </p>\n<p>more details will in the next chapter </p>\n<h2 id=\"FA-Demo\"><a href=\"#FA-Demo\" class=\"headerlink\" title=\"FA Demo\"></a>FA Demo</h2><p>For next chapter I will use a simple example text match algorithm method to describe the FA</p>\n<p>We need know some concepts , character table that will contain the all characters will be used in erery term contains </p>\n<p>And which is the soul of the <strong>matching</strong> I think is that we want find a state a P(use to find) T(use to be finded), which P prefix is the T suffix , when the prefix equal suffix then we belive that the P is contain in the T and the length decide more condition.</p>\n<p>Different or same as the KMP the FA will do in the O(n) time complex to solve the problem.</p>\n<p>Now we define the set is {a,b,c} and all the P and T will construct in these characters so let we write a program to do this thing.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int bool</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> char * string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> 0 false</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> 1 true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">state_</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * trans;</span><br><span class=\"line\">&#125; * state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">state * <span class=\"title\">get_state_arr</span><span class=\"params\">(<span class=\"built_in\">string</span> p,<span class=\"keyword\">char</span> * tab)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">do_match</span><span class=\"params\">(<span class=\"built_in\">string</span> p,<span class=\"built_in\">string</span> t,<span class=\"keyword\">char</span> * tab)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/0079qc5ply1fre6u3cjx1j30n20aut8o.jpg\" alt=\"From Re to NFA\"></p>\n<h2 id=\"NFA-and-DFA-Start\"><a href=\"#NFA-and-DFA-Start\" class=\"headerlink\" title=\"NFA and DFA Start\"></a>NFA and DFA Start</h2><h2 id=\"RegExp-To-NFA\"><a href=\"#RegExp-To-NFA\" class=\"headerlink\" title=\"RegExp To NFA\"></a>RegExp To NFA</h2><h2 id=\"NFA-TO-DFA\"><a href=\"#NFA-TO-DFA\" class=\"headerlink\" title=\"NFA TO DFA\"></a>NFA TO DFA</h2><h2 id=\"Lex-Usage\"><a href=\"#Lex-Usage\" class=\"headerlink\" title=\"Lex Usage\"></a>Lex Usage</h2>"},{"title":"Disruptor Practice Source Code and Pattern","date":"2018-06-16T18:02:51.000Z","_content":"","source":"_posts/Disruptor-Practice-Source-Code-and-Pattern.md","raw":"---\ntitle: Disruptor Practice Source Code and Pattern\ndate: 2018-06-16 18:02:51\ncategories:\n- Practice\ntags:\n- Java\n- Concurrency\n---\n","slug":"Disruptor-Practice-Source-Code-and-Pattern","published":1,"updated":"2018-06-16T10:03:01.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85f000a4624i2o2kbw3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Disruptor Practice Usage","date":"2018-06-16T18:02:03.000Z","_content":"\n","source":"_posts/Disruptor-Practice-Usage.md","raw":"---\ntitle: Disruptor Practice Usage\ndate: 2018-06-16 18:02:03\ncategories:\n- Practice\ntags:\n- Java\n- Concurrency\n---\n\n","slug":"Disruptor-Practice-Usage","published":1,"updated":"2018-06-23T12:54:16.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85g000b4624em3o8rlk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"GO Tutorial programming OOP","date":"2018-06-01T10:22:01.000Z","_content":"\n# Duck Type \n\nThe one which can take the \"GAGA\" like a duck then we can think this as a duck . And the duck type thinking is same as the wrod. and the oop design in programming is more important than some thing like the style of the code . We also belive that the duck type thinking is a method to help us to know the all system memory state .\n\n<!--more-->\n\n# Type System \n\nIn many program language we should do this thing, we want to define a class belong to a interface and then we should implement the all methods from the interface ,and then we belive that this class is a interface implementation.\n\nAnd the all language do this thing, they think the all variable as two types , first is the base variable like int float double long , and the another is the reference type ,like in java we think the array and the class instance as the reference .\n\nWe can do this thinking we think the register can save the local variables and we get the eax ax and other registers can do this thing right . but the reference type can do this thing , they use the address pointer to ponint to a memeory area which contain the all data or methods code in binary .\n\n# Interface \n\nIn many language we should do this thing , we should explicit implement a class which implement a interface like java and then should implement the all methods abstract. But in Go\nwe don't need do this .\n\nthe class can be seen as a interface instance when it overide the all method defined in the interface and then we can belive the struct like class implement the all interface characters.\n\nwe don't need know the all tree of inheriment of a class or a interface but we should know the class implement a interface all method and then we can use this class to be the interface instance .\n\n```Go\n\ntype File struct {\n\n}\n\nfunc (f *File) Read(buf []byte) (n int, err error)\nfunc (f *File) Write(buf []byte) (n int, err error)\nfunc (f *File) Seek(off int64, whence int) (pos int64, err error) \nfunc (f *File) Close() error\n\n```\n\n## interface assign \n\nIn java or other oop language we think that the all thing like this , the this pointer point to where and we should know the pointer point to the class instance and then call the method to do the thing. like js api call() apply() \n\nThis character carry a very convince method to do the next thing , we can see the all stack call link chain.\n\nIn Go the variables will be delivered to the function by reference or value and then if we delivery a value to a function then we can't get the real memeory address and then if we use some pointer to point the self we can't do so . like this\n\n```Go\ntype Integer int\n\nfunc (a Integer) Less (b Integer) bool{\n    return a < b\n}\n\nfunc (a * Integer) Add (b Integer){\n    *a += b\n}\n\ntype OtherInteger interface{\n    Less(b Integer) bool\n    Add(b Integer)\n}\n\n//wrong \nvar a Integer = 1\nvar b OtherInteger = a\n\n```\n\nWhy do this let the wrong raise , in my thinking , we just delivery an address to an interface but the Go system can do some thing background to check the wether the OtherInteger should implement the all methods of the Interger type extend methods , but in the Add method we delivery a pointer to the function to define the address to check the path to call the next operation and then we just send an instance address but can't excepilct the methods implementation or not .\n\nand the pointer to do as the self object like this we can belive that this method may like the static method , which don't have the instance value or like a readonly attribute but the pointer will do the other thing we can belive that this method can change the instance attribute in the instance .\n\n## interface query \n\nlike the instanceof keyword like in java we can check the type belong to which interface and then we can do the next thing then we can do so as this \n\n```Go\ntype Writer interface{\n    ReadByte(pos int)byte\n    Read(len int)[]byte\n}\n\ntype Instream interface{\n    Read(len int)[]byte\n}\n\nfunc main(){\n\n    var file Writer = ...\n    if file2,ok := file.(Instream);ok{\n        ...\n    }\n}\n\n```\n\nwe can do like this , and this can do the mulitstate and then we can use this thing to do the same like in the java interface .\n\n## type query \n\nlike the interface query ,but we should use the switch to choose the type we query like a result.\n\n\n## interface componsite \n\nwe can make some interface to combine as a new interface and then we can do the next thing , we like copy the methods redefine in the new interface \n\n\n\n","source":"_posts/GO-Tutorial-programming-OOP.md","raw":"---\ntitle: GO Tutorial programming OOP\ndate: 2018-06-01 10:22:01\ncategories:\n- Tutorial\ntags:\n- Go\n---\n\n# Duck Type \n\nThe one which can take the \"GAGA\" like a duck then we can think this as a duck . And the duck type thinking is same as the wrod. and the oop design in programming is more important than some thing like the style of the code . We also belive that the duck type thinking is a method to help us to know the all system memory state .\n\n<!--more-->\n\n# Type System \n\nIn many program language we should do this thing, we want to define a class belong to a interface and then we should implement the all methods from the interface ,and then we belive that this class is a interface implementation.\n\nAnd the all language do this thing, they think the all variable as two types , first is the base variable like int float double long , and the another is the reference type ,like in java we think the array and the class instance as the reference .\n\nWe can do this thinking we think the register can save the local variables and we get the eax ax and other registers can do this thing right . but the reference type can do this thing , they use the address pointer to ponint to a memeory area which contain the all data or methods code in binary .\n\n# Interface \n\nIn many language we should do this thing , we should explicit implement a class which implement a interface like java and then should implement the all methods abstract. But in Go\nwe don't need do this .\n\nthe class can be seen as a interface instance when it overide the all method defined in the interface and then we can belive the struct like class implement the all interface characters.\n\nwe don't need know the all tree of inheriment of a class or a interface but we should know the class implement a interface all method and then we can use this class to be the interface instance .\n\n```Go\n\ntype File struct {\n\n}\n\nfunc (f *File) Read(buf []byte) (n int, err error)\nfunc (f *File) Write(buf []byte) (n int, err error)\nfunc (f *File) Seek(off int64, whence int) (pos int64, err error) \nfunc (f *File) Close() error\n\n```\n\n## interface assign \n\nIn java or other oop language we think that the all thing like this , the this pointer point to where and we should know the pointer point to the class instance and then call the method to do the thing. like js api call() apply() \n\nThis character carry a very convince method to do the next thing , we can see the all stack call link chain.\n\nIn Go the variables will be delivered to the function by reference or value and then if we delivery a value to a function then we can't get the real memeory address and then if we use some pointer to point the self we can't do so . like this\n\n```Go\ntype Integer int\n\nfunc (a Integer) Less (b Integer) bool{\n    return a < b\n}\n\nfunc (a * Integer) Add (b Integer){\n    *a += b\n}\n\ntype OtherInteger interface{\n    Less(b Integer) bool\n    Add(b Integer)\n}\n\n//wrong \nvar a Integer = 1\nvar b OtherInteger = a\n\n```\n\nWhy do this let the wrong raise , in my thinking , we just delivery an address to an interface but the Go system can do some thing background to check the wether the OtherInteger should implement the all methods of the Interger type extend methods , but in the Add method we delivery a pointer to the function to define the address to check the path to call the next operation and then we just send an instance address but can't excepilct the methods implementation or not .\n\nand the pointer to do as the self object like this we can belive that this method may like the static method , which don't have the instance value or like a readonly attribute but the pointer will do the other thing we can belive that this method can change the instance attribute in the instance .\n\n## interface query \n\nlike the instanceof keyword like in java we can check the type belong to which interface and then we can do the next thing then we can do so as this \n\n```Go\ntype Writer interface{\n    ReadByte(pos int)byte\n    Read(len int)[]byte\n}\n\ntype Instream interface{\n    Read(len int)[]byte\n}\n\nfunc main(){\n\n    var file Writer = ...\n    if file2,ok := file.(Instream);ok{\n        ...\n    }\n}\n\n```\n\nwe can do like this , and this can do the mulitstate and then we can use this thing to do the same like in the java interface .\n\n## type query \n\nlike the interface query ,but we should use the switch to choose the type we query like a result.\n\n\n## interface componsite \n\nwe can make some interface to combine as a new interface and then we can do the next thing , we like copy the methods redefine in the new interface \n\n\n\n","slug":"GO-Tutorial-programming-OOP","published":1,"updated":"2018-06-09T15:25:55.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85j000f4624ukt38pve","content":"<h1 id=\"Duck-Type\"><a href=\"#Duck-Type\" class=\"headerlink\" title=\"Duck Type\"></a>Duck Type</h1><p>The one which can take the “GAGA” like a duck then we can think this as a duck . And the duck type thinking is same as the wrod. and the oop design in programming is more important than some thing like the style of the code . We also belive that the duck type thinking is a method to help us to know the all system memory state .</p>\n<a id=\"more\"></a>\n<h1 id=\"Type-System\"><a href=\"#Type-System\" class=\"headerlink\" title=\"Type System\"></a>Type System</h1><p>In many program language we should do this thing, we want to define a class belong to a interface and then we should implement the all methods from the interface ,and then we belive that this class is a interface implementation.</p>\n<p>And the all language do this thing, they think the all variable as two types , first is the base variable like int float double long , and the another is the reference type ,like in java we think the array and the class instance as the reference .</p>\n<p>We can do this thinking we think the register can save the local variables and we get the eax ax and other registers can do this thing right . but the reference type can do this thing , they use the address pointer to ponint to a memeory area which contain the all data or methods code in binary .</p>\n<h1 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h1><p>In many language we should do this thing , we should explicit implement a class which implement a interface like java and then should implement the all methods abstract. But in Go<br>we don’t need do this .</p>\n<p>the class can be seen as a interface instance when it overide the all method defined in the interface and then we can belive the struct like class implement the all interface characters.</p>\n<p>we don’t need know the all tree of inheriment of a class or a interface but we should know the class implement a interface all method and then we can use this class to be the interface instance .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Read</span><span class=\"params\">(buf []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Write</span><span class=\"params\">(buf []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Seek</span><span class=\"params\">(off <span class=\"keyword\">int64</span>, whence <span class=\"keyword\">int</span>)</span> <span class=\"params\">(pos <span class=\"keyword\">int64</span>, err error)</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"interface-assign\"><a href=\"#interface-assign\" class=\"headerlink\" title=\"interface assign\"></a>interface assign</h2><p>In java or other oop language we think that the all thing like this , the this pointer point to where and we should know the pointer point to the class instance and then call the method to do the thing. like js api call() apply() </p>\n<p>This character carry a very convince method to do the next thing , we can see the all stack call link chain.</p>\n<p>In Go the variables will be delivered to the function by reference or value and then if we delivery a value to a function then we can’t get the real memeory address and then if we use some pointer to point the self we can’t do so . like this</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Integer <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a Integer)</span> <span class=\"title\">Less</span> <span class=\"params\">(b Integer)</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a * Integer)</span> <span class=\"title\">Add</span> <span class=\"params\">(b Integer)</span></span>&#123;</span><br><span class=\"line\">    *a += b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> OtherInteger <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Less(b Integer) <span class=\"keyword\">bool</span></span><br><span class=\"line\">    Add(b Integer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//wrong </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a Integer = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b OtherInteger = a</span><br></pre></td></tr></table></figure>\n<p>Why do this let the wrong raise , in my thinking , we just delivery an address to an interface but the Go system can do some thing background to check the wether the OtherInteger should implement the all methods of the Interger type extend methods , but in the Add method we delivery a pointer to the function to define the address to check the path to call the next operation and then we just send an instance address but can’t excepilct the methods implementation or not .</p>\n<p>and the pointer to do as the self object like this we can belive that this method may like the static method , which don’t have the instance value or like a readonly attribute but the pointer will do the other thing we can belive that this method can change the instance attribute in the instance .</p>\n<h2 id=\"interface-query\"><a href=\"#interface-query\" class=\"headerlink\" title=\"interface query\"></a>interface query</h2><p>like the instanceof keyword like in java we can check the type belong to which interface and then we can do the next thing then we can do so as this </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    ReadByte(pos <span class=\"keyword\">int</span>)<span class=\"keyword\">byte</span></span><br><span class=\"line\">    Read(<span class=\"built_in\">len</span> <span class=\"keyword\">int</span>)[]<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Instream <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read(<span class=\"built_in\">len</span> <span class=\"keyword\">int</span>)[]<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> file Writer = ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> file2,ok := file.(Instream);ok&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we can do like this , and this can do the mulitstate and then we can use this thing to do the same like in the java interface .</p>\n<h2 id=\"type-query\"><a href=\"#type-query\" class=\"headerlink\" title=\"type query\"></a>type query</h2><p>like the interface query ,but we should use the switch to choose the type we query like a result.</p>\n<h2 id=\"interface-componsite\"><a href=\"#interface-componsite\" class=\"headerlink\" title=\"interface componsite\"></a>interface componsite</h2><p>we can make some interface to combine as a new interface and then we can do the next thing , we like copy the methods redefine in the new interface </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Duck-Type\"><a href=\"#Duck-Type\" class=\"headerlink\" title=\"Duck Type\"></a>Duck Type</h1><p>The one which can take the “GAGA” like a duck then we can think this as a duck . And the duck type thinking is same as the wrod. and the oop design in programming is more important than some thing like the style of the code . We also belive that the duck type thinking is a method to help us to know the all system memory state .</p>","more":"<h1 id=\"Type-System\"><a href=\"#Type-System\" class=\"headerlink\" title=\"Type System\"></a>Type System</h1><p>In many program language we should do this thing, we want to define a class belong to a interface and then we should implement the all methods from the interface ,and then we belive that this class is a interface implementation.</p>\n<p>And the all language do this thing, they think the all variable as two types , first is the base variable like int float double long , and the another is the reference type ,like in java we think the array and the class instance as the reference .</p>\n<p>We can do this thinking we think the register can save the local variables and we get the eax ax and other registers can do this thing right . but the reference type can do this thing , they use the address pointer to ponint to a memeory area which contain the all data or methods code in binary .</p>\n<h1 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h1><p>In many language we should do this thing , we should explicit implement a class which implement a interface like java and then should implement the all methods abstract. But in Go<br>we don’t need do this .</p>\n<p>the class can be seen as a interface instance when it overide the all method defined in the interface and then we can belive the struct like class implement the all interface characters.</p>\n<p>we don’t need know the all tree of inheriment of a class or a interface but we should know the class implement a interface all method and then we can use this class to be the interface instance .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Read</span><span class=\"params\">(buf []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Write</span><span class=\"params\">(buf []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Seek</span><span class=\"params\">(off <span class=\"keyword\">int64</span>, whence <span class=\"keyword\">int</span>)</span> <span class=\"params\">(pos <span class=\"keyword\">int64</span>, err error)</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f *File)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"interface-assign\"><a href=\"#interface-assign\" class=\"headerlink\" title=\"interface assign\"></a>interface assign</h2><p>In java or other oop language we think that the all thing like this , the this pointer point to where and we should know the pointer point to the class instance and then call the method to do the thing. like js api call() apply() </p>\n<p>This character carry a very convince method to do the next thing , we can see the all stack call link chain.</p>\n<p>In Go the variables will be delivered to the function by reference or value and then if we delivery a value to a function then we can’t get the real memeory address and then if we use some pointer to point the self we can’t do so . like this</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Integer <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a Integer)</span> <span class=\"title\">Less</span> <span class=\"params\">(b Integer)</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a * Integer)</span> <span class=\"title\">Add</span> <span class=\"params\">(b Integer)</span></span>&#123;</span><br><span class=\"line\">    *a += b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> OtherInteger <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Less(b Integer) <span class=\"keyword\">bool</span></span><br><span class=\"line\">    Add(b Integer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//wrong </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a Integer = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b OtherInteger = a</span><br></pre></td></tr></table></figure>\n<p>Why do this let the wrong raise , in my thinking , we just delivery an address to an interface but the Go system can do some thing background to check the wether the OtherInteger should implement the all methods of the Interger type extend methods , but in the Add method we delivery a pointer to the function to define the address to check the path to call the next operation and then we just send an instance address but can’t excepilct the methods implementation or not .</p>\n<p>and the pointer to do as the self object like this we can belive that this method may like the static method , which don’t have the instance value or like a readonly attribute but the pointer will do the other thing we can belive that this method can change the instance attribute in the instance .</p>\n<h2 id=\"interface-query\"><a href=\"#interface-query\" class=\"headerlink\" title=\"interface query\"></a>interface query</h2><p>like the instanceof keyword like in java we can check the type belong to which interface and then we can do the next thing then we can do so as this </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    ReadByte(pos <span class=\"keyword\">int</span>)<span class=\"keyword\">byte</span></span><br><span class=\"line\">    Read(<span class=\"built_in\">len</span> <span class=\"keyword\">int</span>)[]<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Instream <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read(<span class=\"built_in\">len</span> <span class=\"keyword\">int</span>)[]<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> file Writer = ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> file2,ok := file.(Instream);ok&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we can do like this , and this can do the mulitstate and then we can use this thing to do the same like in the java interface .</p>\n<h2 id=\"type-query\"><a href=\"#type-query\" class=\"headerlink\" title=\"type query\"></a>type query</h2><p>like the interface query ,but we should use the switch to choose the type we query like a result.</p>\n<h2 id=\"interface-componsite\"><a href=\"#interface-componsite\" class=\"headerlink\" title=\"interface componsite\"></a>interface componsite</h2><p>we can make some interface to combine as a new interface and then we can do the next thing , we like copy the methods redefine in the new interface </p>"},{"title":"Go-Practice-concurrency-start","date":"2018-06-15T12:29:27.000Z","_content":"\n# Concurrency \n\nAs we know Rob Pike and his team has implemented the CSP(Concurrency Senquential Process) to be the model of concurrency for Go , and now I will write some practice about the concurrency programming in Go and then the CSP(paper) will write in the next blog article . \n\n<!--more-->\n\nparallel and concurrency are always mentioned in the background development, such as the push service which can hold a long link from user device like phone pad or other to the server cluster . And we can send some push information to the user side by the service program . \n\nIn many model like the Java concurrency model there are many problem waiting us to handle , though there are some framwork such as Netty Disruptor and Akka , but this model is just a common model in many concurrency domain .\n\n Coroutine a new model for us to write the concurrency program in a senquence method do like in Go and the paper describe this model in a paper **oncurrency Senquential Process** writen by S. L. Graham, R. L. Rivest Editors describes the more details in a logical method .\n\n## concurrency essence\n\nIn many language we could think that the concurrency or parallel programming are real difficult in action . I ever think the essence of the concurrency in a method to think in the memory model and cpu work way .\n\n### why we need the concurrency ?\n\nSingle process or thread program don't raise any wrong in runtime if don't write some program logic wrong or error , but when the mulit core cpu comming ,we should use the all cpu not just use only one as before .\n\nFor example  thumbnail will be cut from a full size image , we have amny images from the user upload and then we should handle the all images to thumbnails . If we use the single process the all images will be in a queue and the time will bu the sum of the all images handle time . But when we use the parllel programming then we can at lest reduce a half time cpu handle the all images . we can use the enough ability of the cpu.\n\n### how do the computer work on ?\n\nWe should know a concept called context , when a program run on the conputer , they will have a context which contains the all data and the code text , we can also belive that after the compiler working done ,the instructions will be save in the text segment , and the procedure statement will call the specitic instructions to jump and loop .\n\nAll the program context will be save to memeory when the program start , and a single process can execute the instruction step by step . But the problem will raise , when we call the mulit core in cpu to execute the instuction , we don't confirm which instruction will access the context area rightly that is the problem from the concurrency , mulitithread will access to the context not in order not only reading but writing .So we don't get the right result as we use the single process model.\n\nAnd the switch context will waste some time , so if we don't design a mechanism to control the behavior for the threads or process we could track in trouble . Dead Lock and Live Lock will let the all system panic.\n\n### what is the origin of the concurrency problem ?\n\nAs I have infered the problem origin is from the access order , if we let the process access in a memeory area -- context then we should know , the time will like the time using single model.\n\nSo many scientist of conputer invent many methods to solve the problem of access order , such as CAS , Lock mechanism , share memeory and so on . And the most famous model called consumer and producer model which can solve the produce data and consume data concurrecny problem.\n\n## goroutine and channel\n\n### goroutine\n\ngoroutine is a mechanism like CSP , and more like the disruptor in Java , which don't think the thread and process should fight with the cpu , and the processes in the all programm will use the conmmon context and use the message delivery to work with each other in order .\n\nThe goroutine is the execution entry in Go and they will be linked by the channel , and use the channel can let the gorutinue have a method to commuicate with each other goroutine, and the all goroutine will hole the same context .\n\n```Go\nimport(\n    \"io\"\n    \"log\"\n    \"net\"\n    \"time\"\n)\n\nfunc main(){\n    listener,err := net.Listen(\"tcp\",\"localhost:8000\")\n    if err != nil{\n        log.Fatal(err)\n    }\n    for{\n        conn,err := listener.Accept()\n        if err != nil{\n            log.Print(err)\n            continue\n        }\n        go handleConn(conn)\n    }\n}\nfunc handleConn(c net.Conn){\n    defer c.Close()\n    for{\n        _,err := io.WriteString(c,time.Now().Format(\"5:04:05\\n\"))\n        if err != nil{\n            return \n        }\n        time.Sleep(1 * time.Second)\n    }\n}\n```\n\nWhen a client link to this server then will every second recive a time string , use go func grammer can start a goroutine .\n\n### concurrency safe \n\nWe design a judge standard to define the concurrecny safe , we can do the same thing use single process and then do the same thing in the concurrency enviroment and the result is same as the concurrency then we call this parllel program is safe.\n\nBecause the cpu dispatch program process or thread in noorder , and as we can know that the all process occur the unsfe status from the situation they all access a same memeory area , if they don't do this thing, we should not care of the safe of concurrency.\n\nKeep the safe of parllel program we should use some methods we call procedure communication \n\n### channel \n\nAs we know we should let the process do in order or let other processes know the status from other process we should link them overall.\n\n```Go\nfunc main(){\n    done := make(chan int32)\n    go func(){\n        time.Sleep(3 * time.Second)\n        fmt.Println(\"some thing\")\n        done <- 1\n    }()\n    <- done\n}\n```\n\nthe main function is a goroutine and the go keyword let a new goroutine to run if we don't use the channel to let them commuicate with each other then after the main exit the goroutine could exit right now .\n\nWe can also use the channel to contribute a pipe in two goroutine like this \n\n```Go\nfunc sender(out chan<- int){\n    for x:= 0;x < 100 ;x++{\n        out <- x\n    }\n    close(out)\n}\n\nfunc printer(in <-chan int){\n    for v := range in{\n        fmt.Println(v)\n    }\n}\n\nfunc main(){\n    pipe := make(chan int)\n    go sender(pipe)\n    printer(pipe)\n}\n```\n\nand use the range we can do for-loop if there have data in pipe and now we can use the just one channel to use in the pipe view like unix like system.\n\nAnd the channel have two type , cache-channel and nocahce-channel , as slice in Go ,the channel have the capacity to contain the data . if the make function don't set the capacity then will be initialized with 1 and in the two side of the channel if any side don't prepare rightly the other side should wait for the side .\n\nAnd the cache-channel like a queue in concurrency sender send the infromation one side and the other side the receiver will receive the information.\n\nThe channel implementation in Go also have implemented a ring-buffer struct which let a buffer in a ring status , and when write a data into the channel we should know that , we check the full state and then write a data in the buffer and set the head pointer to the new position and the read will read the tail data and then set the tail pointer to the next data stoke . And a ring buffer will link just one type reader and writer in this way can let the handle read and write in the same way ,if we register two types of reader and writer then we could in this situation the one reader read too fast so that the other writer don't write and then the other reader will read the other writer write data .\n\n## synchronize communication\n\nWe have use the channel to do the sample syschonsization , we should know that when a group of goroutine need do something synchronized then we should let them to commuicate with the each other in the same group.\n\n## select \n\nLike the Java nio frame then we should know that the channel could have many but the real handler just have only one ,then we should use a selector to select the all channels and then let the channel event to know what is the next time to do in the next time .\n\n```Go\npackage main\n\nimport \"time\"\nimport \"fmt\"\n\nfunc main() {\n\n    c1 := make(chan string)\n    c2 := make(chan string)\n\n    go func() {\n        time.Sleep(time.Second * 1)\n        c1 <- \"one\"\n    }()\n    go func() {\n        time.Sleep(time.Second * 2)\n        c2 <- \"two\"\n    }()\n\n    for i := 0; i < 2; i++ {\n        select {\n        case msg1 := <-c1:\n            fmt.Println(\"received\", msg1)\n        case msg2 := <-c2:\n            fmt.Println(\"received\", msg2)\n        }\n    }\n}\n```\n\nWe could use only one goroutine to select the event and then send the type to the other , and then handle the writer write data . decoupling the reader and the writer then we should use the select to bind many type writer and reader pair .\n\n# examples\n\n## cncurrency directory read \n\n","source":"_posts/Go-Practice-concurrency-start.md","raw":"---\ntitle: Go-Practice-concurrency-start\ndate: 2018-06-15 12:29:27\ncategories:\n- Practice\ntags:\n- Go\n---\n\n# Concurrency \n\nAs we know Rob Pike and his team has implemented the CSP(Concurrency Senquential Process) to be the model of concurrency for Go , and now I will write some practice about the concurrency programming in Go and then the CSP(paper) will write in the next blog article . \n\n<!--more-->\n\nparallel and concurrency are always mentioned in the background development, such as the push service which can hold a long link from user device like phone pad or other to the server cluster . And we can send some push information to the user side by the service program . \n\nIn many model like the Java concurrency model there are many problem waiting us to handle , though there are some framwork such as Netty Disruptor and Akka , but this model is just a common model in many concurrency domain .\n\n Coroutine a new model for us to write the concurrency program in a senquence method do like in Go and the paper describe this model in a paper **oncurrency Senquential Process** writen by S. L. Graham, R. L. Rivest Editors describes the more details in a logical method .\n\n## concurrency essence\n\nIn many language we could think that the concurrency or parallel programming are real difficult in action . I ever think the essence of the concurrency in a method to think in the memory model and cpu work way .\n\n### why we need the concurrency ?\n\nSingle process or thread program don't raise any wrong in runtime if don't write some program logic wrong or error , but when the mulit core cpu comming ,we should use the all cpu not just use only one as before .\n\nFor example  thumbnail will be cut from a full size image , we have amny images from the user upload and then we should handle the all images to thumbnails . If we use the single process the all images will be in a queue and the time will bu the sum of the all images handle time . But when we use the parllel programming then we can at lest reduce a half time cpu handle the all images . we can use the enough ability of the cpu.\n\n### how do the computer work on ?\n\nWe should know a concept called context , when a program run on the conputer , they will have a context which contains the all data and the code text , we can also belive that after the compiler working done ,the instructions will be save in the text segment , and the procedure statement will call the specitic instructions to jump and loop .\n\nAll the program context will be save to memeory when the program start , and a single process can execute the instruction step by step . But the problem will raise , when we call the mulit core in cpu to execute the instuction , we don't confirm which instruction will access the context area rightly that is the problem from the concurrency , mulitithread will access to the context not in order not only reading but writing .So we don't get the right result as we use the single process model.\n\nAnd the switch context will waste some time , so if we don't design a mechanism to control the behavior for the threads or process we could track in trouble . Dead Lock and Live Lock will let the all system panic.\n\n### what is the origin of the concurrency problem ?\n\nAs I have infered the problem origin is from the access order , if we let the process access in a memeory area -- context then we should know , the time will like the time using single model.\n\nSo many scientist of conputer invent many methods to solve the problem of access order , such as CAS , Lock mechanism , share memeory and so on . And the most famous model called consumer and producer model which can solve the produce data and consume data concurrecny problem.\n\n## goroutine and channel\n\n### goroutine\n\ngoroutine is a mechanism like CSP , and more like the disruptor in Java , which don't think the thread and process should fight with the cpu , and the processes in the all programm will use the conmmon context and use the message delivery to work with each other in order .\n\nThe goroutine is the execution entry in Go and they will be linked by the channel , and use the channel can let the gorutinue have a method to commuicate with each other goroutine, and the all goroutine will hole the same context .\n\n```Go\nimport(\n    \"io\"\n    \"log\"\n    \"net\"\n    \"time\"\n)\n\nfunc main(){\n    listener,err := net.Listen(\"tcp\",\"localhost:8000\")\n    if err != nil{\n        log.Fatal(err)\n    }\n    for{\n        conn,err := listener.Accept()\n        if err != nil{\n            log.Print(err)\n            continue\n        }\n        go handleConn(conn)\n    }\n}\nfunc handleConn(c net.Conn){\n    defer c.Close()\n    for{\n        _,err := io.WriteString(c,time.Now().Format(\"5:04:05\\n\"))\n        if err != nil{\n            return \n        }\n        time.Sleep(1 * time.Second)\n    }\n}\n```\n\nWhen a client link to this server then will every second recive a time string , use go func grammer can start a goroutine .\n\n### concurrency safe \n\nWe design a judge standard to define the concurrecny safe , we can do the same thing use single process and then do the same thing in the concurrency enviroment and the result is same as the concurrency then we call this parllel program is safe.\n\nBecause the cpu dispatch program process or thread in noorder , and as we can know that the all process occur the unsfe status from the situation they all access a same memeory area , if they don't do this thing, we should not care of the safe of concurrency.\n\nKeep the safe of parllel program we should use some methods we call procedure communication \n\n### channel \n\nAs we know we should let the process do in order or let other processes know the status from other process we should link them overall.\n\n```Go\nfunc main(){\n    done := make(chan int32)\n    go func(){\n        time.Sleep(3 * time.Second)\n        fmt.Println(\"some thing\")\n        done <- 1\n    }()\n    <- done\n}\n```\n\nthe main function is a goroutine and the go keyword let a new goroutine to run if we don't use the channel to let them commuicate with each other then after the main exit the goroutine could exit right now .\n\nWe can also use the channel to contribute a pipe in two goroutine like this \n\n```Go\nfunc sender(out chan<- int){\n    for x:= 0;x < 100 ;x++{\n        out <- x\n    }\n    close(out)\n}\n\nfunc printer(in <-chan int){\n    for v := range in{\n        fmt.Println(v)\n    }\n}\n\nfunc main(){\n    pipe := make(chan int)\n    go sender(pipe)\n    printer(pipe)\n}\n```\n\nand use the range we can do for-loop if there have data in pipe and now we can use the just one channel to use in the pipe view like unix like system.\n\nAnd the channel have two type , cache-channel and nocahce-channel , as slice in Go ,the channel have the capacity to contain the data . if the make function don't set the capacity then will be initialized with 1 and in the two side of the channel if any side don't prepare rightly the other side should wait for the side .\n\nAnd the cache-channel like a queue in concurrency sender send the infromation one side and the other side the receiver will receive the information.\n\nThe channel implementation in Go also have implemented a ring-buffer struct which let a buffer in a ring status , and when write a data into the channel we should know that , we check the full state and then write a data in the buffer and set the head pointer to the new position and the read will read the tail data and then set the tail pointer to the next data stoke . And a ring buffer will link just one type reader and writer in this way can let the handle read and write in the same way ,if we register two types of reader and writer then we could in this situation the one reader read too fast so that the other writer don't write and then the other reader will read the other writer write data .\n\n## synchronize communication\n\nWe have use the channel to do the sample syschonsization , we should know that when a group of goroutine need do something synchronized then we should let them to commuicate with the each other in the same group.\n\n## select \n\nLike the Java nio frame then we should know that the channel could have many but the real handler just have only one ,then we should use a selector to select the all channels and then let the channel event to know what is the next time to do in the next time .\n\n```Go\npackage main\n\nimport \"time\"\nimport \"fmt\"\n\nfunc main() {\n\n    c1 := make(chan string)\n    c2 := make(chan string)\n\n    go func() {\n        time.Sleep(time.Second * 1)\n        c1 <- \"one\"\n    }()\n    go func() {\n        time.Sleep(time.Second * 2)\n        c2 <- \"two\"\n    }()\n\n    for i := 0; i < 2; i++ {\n        select {\n        case msg1 := <-c1:\n            fmt.Println(\"received\", msg1)\n        case msg2 := <-c2:\n            fmt.Println(\"received\", msg2)\n        }\n    }\n}\n```\n\nWe could use only one goroutine to select the event and then send the type to the other , and then handle the writer write data . decoupling the reader and the writer then we should use the select to bind many type writer and reader pair .\n\n# examples\n\n## cncurrency directory read \n\n","slug":"Go-Practice-concurrency-start","published":1,"updated":"2018-06-15T08:50:33.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85m000h4624fn2zo8xa","content":"<h1 id=\"Concurrency\"><a href=\"#Concurrency\" class=\"headerlink\" title=\"Concurrency\"></a>Concurrency</h1><p>As we know Rob Pike and his team has implemented the CSP(Concurrency Senquential Process) to be the model of concurrency for Go , and now I will write some practice about the concurrency programming in Go and then the CSP(paper) will write in the next blog article . </p>\n<a id=\"more\"></a>\n<p>parallel and concurrency are always mentioned in the background development, such as the push service which can hold a long link from user device like phone pad or other to the server cluster . And we can send some push information to the user side by the service program . </p>\n<p>In many model like the Java concurrency model there are many problem waiting us to handle , though there are some framwork such as Netty Disruptor and Akka , but this model is just a common model in many concurrency domain .</p>\n<p> Coroutine a new model for us to write the concurrency program in a senquence method do like in Go and the paper describe this model in a paper <strong>oncurrency Senquential Process</strong> writen by S. L. Graham, R. L. Rivest Editors describes the more details in a logical method .</p>\n<h2 id=\"concurrency-essence\"><a href=\"#concurrency-essence\" class=\"headerlink\" title=\"concurrency essence\"></a>concurrency essence</h2><p>In many language we could think that the concurrency or parallel programming are real difficult in action . I ever think the essence of the concurrency in a method to think in the memory model and cpu work way .</p>\n<h3 id=\"why-we-need-the-concurrency\"><a href=\"#why-we-need-the-concurrency\" class=\"headerlink\" title=\"why we need the concurrency ?\"></a>why we need the concurrency ?</h3><p>Single process or thread program don’t raise any wrong in runtime if don’t write some program logic wrong or error , but when the mulit core cpu comming ,we should use the all cpu not just use only one as before .</p>\n<p>For example  thumbnail will be cut from a full size image , we have amny images from the user upload and then we should handle the all images to thumbnails . If we use the single process the all images will be in a queue and the time will bu the sum of the all images handle time . But when we use the parllel programming then we can at lest reduce a half time cpu handle the all images . we can use the enough ability of the cpu.</p>\n<h3 id=\"how-do-the-computer-work-on\"><a href=\"#how-do-the-computer-work-on\" class=\"headerlink\" title=\"how do the computer work on ?\"></a>how do the computer work on ?</h3><p>We should know a concept called context , when a program run on the conputer , they will have a context which contains the all data and the code text , we can also belive that after the compiler working done ,the instructions will be save in the text segment , and the procedure statement will call the specitic instructions to jump and loop .</p>\n<p>All the program context will be save to memeory when the program start , and a single process can execute the instruction step by step . But the problem will raise , when we call the mulit core in cpu to execute the instuction , we don’t confirm which instruction will access the context area rightly that is the problem from the concurrency , mulitithread will access to the context not in order not only reading but writing .So we don’t get the right result as we use the single process model.</p>\n<p>And the switch context will waste some time , so if we don’t design a mechanism to control the behavior for the threads or process we could track in trouble . Dead Lock and Live Lock will let the all system panic.</p>\n<h3 id=\"what-is-the-origin-of-the-concurrency-problem\"><a href=\"#what-is-the-origin-of-the-concurrency-problem\" class=\"headerlink\" title=\"what is the origin of the concurrency problem ?\"></a>what is the origin of the concurrency problem ?</h3><p>As I have infered the problem origin is from the access order , if we let the process access in a memeory area — context then we should know , the time will like the time using single model.</p>\n<p>So many scientist of conputer invent many methods to solve the problem of access order , such as CAS , Lock mechanism , share memeory and so on . And the most famous model called consumer and producer model which can solve the produce data and consume data concurrecny problem.</p>\n<h2 id=\"goroutine-and-channel\"><a href=\"#goroutine-and-channel\" class=\"headerlink\" title=\"goroutine and channel\"></a>goroutine and channel</h2><h3 id=\"goroutine\"><a href=\"#goroutine\" class=\"headerlink\" title=\"goroutine\"></a>goroutine</h3><p>goroutine is a mechanism like CSP , and more like the disruptor in Java , which don’t think the thread and process should fight with the cpu , and the processes in the all programm will use the conmmon context and use the message delivery to work with each other in order .</p>\n<p>The goroutine is the execution entry in Go and they will be linked by the channel , and use the channel can let the gorutinue have a method to commuicate with each other goroutine, and the all goroutine will hole the same context .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    listener,err := net.Listen(<span class=\"string\">\"tcp\"</span>,<span class=\"string\">\"localhost:8000\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">        conn,err := listener.Accept()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            log.Print(err)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> handleConn(conn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleConn</span><span class=\"params\">(c net.Conn)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> c.Close()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">        _,err := io.WriteString(c,time.Now().Format(<span class=\"string\">\"5:04:05\\n\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When a client link to this server then will every second recive a time string , use go func grammer can start a goroutine .</p>\n<h3 id=\"concurrency-safe\"><a href=\"#concurrency-safe\" class=\"headerlink\" title=\"concurrency safe\"></a>concurrency safe</h3><p>We design a judge standard to define the concurrecny safe , we can do the same thing use single process and then do the same thing in the concurrency enviroment and the result is same as the concurrency then we call this parllel program is safe.</p>\n<p>Because the cpu dispatch program process or thread in noorder , and as we can know that the all process occur the unsfe status from the situation they all access a same memeory area , if they don’t do this thing, we should not care of the safe of concurrency.</p>\n<p>Keep the safe of parllel program we should use some methods we call procedure communication </p>\n<h3 id=\"channel\"><a href=\"#channel\" class=\"headerlink\" title=\"channel\"></a>channel</h3><p>As we know we should let the process do in order or let other processes know the status from other process we should link them overall.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"some thing\"</span>)</span><br><span class=\"line\">        done &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    &lt;- done</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>the main function is a goroutine and the go keyword let a new goroutine to run if we don’t use the channel to let them commuicate with each other then after the main exit the goroutine could exit right now .</p>\n<p>We can also use the channel to contribute a pipe in two goroutine like this </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sender</span><span class=\"params\">(out <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x:= <span class=\"number\">0</span>;x &lt; <span class=\"number\">100</span> ;x++&#123;</span><br><span class=\"line\">        out &lt;- x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printer</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> in&#123;</span><br><span class=\"line\">        fmt.Println(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    pipe := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sender(pipe)</span><br><span class=\"line\">    printer(pipe)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>and use the range we can do for-loop if there have data in pipe and now we can use the just one channel to use in the pipe view like unix like system.</p>\n<p>And the channel have two type , cache-channel and nocahce-channel , as slice in Go ,the channel have the capacity to contain the data . if the make function don’t set the capacity then will be initialized with 1 and in the two side of the channel if any side don’t prepare rightly the other side should wait for the side .</p>\n<p>And the cache-channel like a queue in concurrency sender send the infromation one side and the other side the receiver will receive the information.</p>\n<p>The channel implementation in Go also have implemented a ring-buffer struct which let a buffer in a ring status , and when write a data into the channel we should know that , we check the full state and then write a data in the buffer and set the head pointer to the new position and the read will read the tail data and then set the tail pointer to the next data stoke . And a ring buffer will link just one type reader and writer in this way can let the handle read and write in the same way ,if we register two types of reader and writer then we could in this situation the one reader read too fast so that the other writer don’t write and then the other reader will read the other writer write data .</p>\n<h2 id=\"synchronize-communication\"><a href=\"#synchronize-communication\" class=\"headerlink\" title=\"synchronize communication\"></a>synchronize communication</h2><p>We have use the channel to do the sample syschonsization , we should know that when a group of goroutine need do something synchronized then we should let them to commuicate with the each other in the same group.</p>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><p>Like the Java nio frame then we should know that the channel could have many but the real handler just have only one ,then we should use a selector to select the all channels and then let the channel event to know what is the next time to do in the next time .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"time\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    c1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">    c2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        time.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">        c1 &lt;- <span class=\"string\">\"one\"</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        time.Sleep(time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\">        c2 &lt;- <span class=\"string\">\"two\"</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> msg1 := &lt;-c1:</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"received\"</span>, msg1)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> msg2 := &lt;-c2:</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"received\"</span>, msg2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We could use only one goroutine to select the event and then send the type to the other , and then handle the writer write data . decoupling the reader and the writer then we should use the select to bind many type writer and reader pair .</p>\n<h1 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h1><h2 id=\"cncurrency-directory-read\"><a href=\"#cncurrency-directory-read\" class=\"headerlink\" title=\"cncurrency directory read\"></a>cncurrency directory read</h2>","site":{"data":{}},"excerpt":"<h1 id=\"Concurrency\"><a href=\"#Concurrency\" class=\"headerlink\" title=\"Concurrency\"></a>Concurrency</h1><p>As we know Rob Pike and his team has implemented the CSP(Concurrency Senquential Process) to be the model of concurrency for Go , and now I will write some practice about the concurrency programming in Go and then the CSP(paper) will write in the next blog article . </p>","more":"<p>parallel and concurrency are always mentioned in the background development, such as the push service which can hold a long link from user device like phone pad or other to the server cluster . And we can send some push information to the user side by the service program . </p>\n<p>In many model like the Java concurrency model there are many problem waiting us to handle , though there are some framwork such as Netty Disruptor and Akka , but this model is just a common model in many concurrency domain .</p>\n<p> Coroutine a new model for us to write the concurrency program in a senquence method do like in Go and the paper describe this model in a paper <strong>oncurrency Senquential Process</strong> writen by S. L. Graham, R. L. Rivest Editors describes the more details in a logical method .</p>\n<h2 id=\"concurrency-essence\"><a href=\"#concurrency-essence\" class=\"headerlink\" title=\"concurrency essence\"></a>concurrency essence</h2><p>In many language we could think that the concurrency or parallel programming are real difficult in action . I ever think the essence of the concurrency in a method to think in the memory model and cpu work way .</p>\n<h3 id=\"why-we-need-the-concurrency\"><a href=\"#why-we-need-the-concurrency\" class=\"headerlink\" title=\"why we need the concurrency ?\"></a>why we need the concurrency ?</h3><p>Single process or thread program don’t raise any wrong in runtime if don’t write some program logic wrong or error , but when the mulit core cpu comming ,we should use the all cpu not just use only one as before .</p>\n<p>For example  thumbnail will be cut from a full size image , we have amny images from the user upload and then we should handle the all images to thumbnails . If we use the single process the all images will be in a queue and the time will bu the sum of the all images handle time . But when we use the parllel programming then we can at lest reduce a half time cpu handle the all images . we can use the enough ability of the cpu.</p>\n<h3 id=\"how-do-the-computer-work-on\"><a href=\"#how-do-the-computer-work-on\" class=\"headerlink\" title=\"how do the computer work on ?\"></a>how do the computer work on ?</h3><p>We should know a concept called context , when a program run on the conputer , they will have a context which contains the all data and the code text , we can also belive that after the compiler working done ,the instructions will be save in the text segment , and the procedure statement will call the specitic instructions to jump and loop .</p>\n<p>All the program context will be save to memeory when the program start , and a single process can execute the instruction step by step . But the problem will raise , when we call the mulit core in cpu to execute the instuction , we don’t confirm which instruction will access the context area rightly that is the problem from the concurrency , mulitithread will access to the context not in order not only reading but writing .So we don’t get the right result as we use the single process model.</p>\n<p>And the switch context will waste some time , so if we don’t design a mechanism to control the behavior for the threads or process we could track in trouble . Dead Lock and Live Lock will let the all system panic.</p>\n<h3 id=\"what-is-the-origin-of-the-concurrency-problem\"><a href=\"#what-is-the-origin-of-the-concurrency-problem\" class=\"headerlink\" title=\"what is the origin of the concurrency problem ?\"></a>what is the origin of the concurrency problem ?</h3><p>As I have infered the problem origin is from the access order , if we let the process access in a memeory area — context then we should know , the time will like the time using single model.</p>\n<p>So many scientist of conputer invent many methods to solve the problem of access order , such as CAS , Lock mechanism , share memeory and so on . And the most famous model called consumer and producer model which can solve the produce data and consume data concurrecny problem.</p>\n<h2 id=\"goroutine-and-channel\"><a href=\"#goroutine-and-channel\" class=\"headerlink\" title=\"goroutine and channel\"></a>goroutine and channel</h2><h3 id=\"goroutine\"><a href=\"#goroutine\" class=\"headerlink\" title=\"goroutine\"></a>goroutine</h3><p>goroutine is a mechanism like CSP , and more like the disruptor in Java , which don’t think the thread and process should fight with the cpu , and the processes in the all programm will use the conmmon context and use the message delivery to work with each other in order .</p>\n<p>The goroutine is the execution entry in Go and they will be linked by the channel , and use the channel can let the gorutinue have a method to commuicate with each other goroutine, and the all goroutine will hole the same context .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    listener,err := net.Listen(<span class=\"string\">\"tcp\"</span>,<span class=\"string\">\"localhost:8000\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">        conn,err := listener.Accept()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            log.Print(err)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> handleConn(conn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleConn</span><span class=\"params\">(c net.Conn)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> c.Close()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">        _,err := io.WriteString(c,time.Now().Format(<span class=\"string\">\"5:04:05\\n\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When a client link to this server then will every second recive a time string , use go func grammer can start a goroutine .</p>\n<h3 id=\"concurrency-safe\"><a href=\"#concurrency-safe\" class=\"headerlink\" title=\"concurrency safe\"></a>concurrency safe</h3><p>We design a judge standard to define the concurrecny safe , we can do the same thing use single process and then do the same thing in the concurrency enviroment and the result is same as the concurrency then we call this parllel program is safe.</p>\n<p>Because the cpu dispatch program process or thread in noorder , and as we can know that the all process occur the unsfe status from the situation they all access a same memeory area , if they don’t do this thing, we should not care of the safe of concurrency.</p>\n<p>Keep the safe of parllel program we should use some methods we call procedure communication </p>\n<h3 id=\"channel\"><a href=\"#channel\" class=\"headerlink\" title=\"channel\"></a>channel</h3><p>As we know we should let the process do in order or let other processes know the status from other process we should link them overall.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"some thing\"</span>)</span><br><span class=\"line\">        done &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    &lt;- done</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>the main function is a goroutine and the go keyword let a new goroutine to run if we don’t use the channel to let them commuicate with each other then after the main exit the goroutine could exit right now .</p>\n<p>We can also use the channel to contribute a pipe in two goroutine like this </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sender</span><span class=\"params\">(out <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x:= <span class=\"number\">0</span>;x &lt; <span class=\"number\">100</span> ;x++&#123;</span><br><span class=\"line\">        out &lt;- x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printer</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> in&#123;</span><br><span class=\"line\">        fmt.Println(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    pipe := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sender(pipe)</span><br><span class=\"line\">    printer(pipe)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>and use the range we can do for-loop if there have data in pipe and now we can use the just one channel to use in the pipe view like unix like system.</p>\n<p>And the channel have two type , cache-channel and nocahce-channel , as slice in Go ,the channel have the capacity to contain the data . if the make function don’t set the capacity then will be initialized with 1 and in the two side of the channel if any side don’t prepare rightly the other side should wait for the side .</p>\n<p>And the cache-channel like a queue in concurrency sender send the infromation one side and the other side the receiver will receive the information.</p>\n<p>The channel implementation in Go also have implemented a ring-buffer struct which let a buffer in a ring status , and when write a data into the channel we should know that , we check the full state and then write a data in the buffer and set the head pointer to the new position and the read will read the tail data and then set the tail pointer to the next data stoke . And a ring buffer will link just one type reader and writer in this way can let the handle read and write in the same way ,if we register two types of reader and writer then we could in this situation the one reader read too fast so that the other writer don’t write and then the other reader will read the other writer write data .</p>\n<h2 id=\"synchronize-communication\"><a href=\"#synchronize-communication\" class=\"headerlink\" title=\"synchronize communication\"></a>synchronize communication</h2><p>We have use the channel to do the sample syschonsization , we should know that when a group of goroutine need do something synchronized then we should let them to commuicate with the each other in the same group.</p>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><p>Like the Java nio frame then we should know that the channel could have many but the real handler just have only one ,then we should use a selector to select the all channels and then let the channel event to know what is the next time to do in the next time .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"time\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    c1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">    c2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        time.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">        c1 &lt;- <span class=\"string\">\"one\"</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        time.Sleep(time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\">        c2 &lt;- <span class=\"string\">\"two\"</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> msg1 := &lt;-c1:</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"received\"</span>, msg1)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> msg2 := &lt;-c2:</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"received\"</span>, msg2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We could use only one goroutine to select the event and then send the type to the other , and then handle the writer write data . decoupling the reader and the writer then we should use the select to bind many type writer and reader pair .</p>\n<h1 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h1><h2 id=\"cncurrency-directory-read\"><a href=\"#cncurrency-directory-read\" class=\"headerlink\" title=\"cncurrency directory read\"></a>cncurrency directory read</h2>"},{"title":"Go-Practice-interface and type","date":"2018-06-14T17:09:48.000Z","_content":"\n# Go Interface \n\nIn many language to communicate to the computer , we have the interface structure to construct the rule between the people and the computer data structure . What is the interface ? In some time I have do this thinking that the interface is the rule for the all class which implement this interface and then will act as a same role \n\n<!--more-->\n\nFor a sample example in real world . we could know that the student is a role in school not only the perimary school middle schoold and the high school even in university . The student must do their duty to do in school , so we can call them be student role . right ?\n\nAnd the the all structure programming language had , we should know that the design method we could let the same behaviors to an interface and let the class to implement the interface and we also need some variables to define the base attribute of this class so the easy method let we know how to implement a real world into computer system .\n\n## In Go \n\nIn Go we get this reality like java the interface{} is the Any type like Java Object type. But what is the type or what is the type information ? I think that the interface is a type absolution in action .\n\nThe type in programming language just do this work to allocate the memory space and originaze the all pointer . But anything exculd the flow the system don't do like this .\n\nDefine an interface in go is really easy \n\n```Go\ntype SomeInterface interface{\n    SomeMethod()\n}\n```\n\nWe can use this grammer to create an interface and then we just let the struct called class to implement the all methods .\n\nWe don't need to do the implementation explicitly like in java use the implement key word , the compiler consider that a class override all method in an interface then it can belive the class is an instance for this interface .\n\nLike in Go standard library the File implement the io.Reader and io.Writer then we can use the file to write and read , and the io.Reader and io.Writer just have method like the interface Read and Write , but don't have any implemention and File will implement the all method to read and write , but how to write the File type don't need to know .\n\nAnd interface in Go can inherite from other interfaces like \n\n```Go\ntype Reader interface{\n    Read()([]byte,error)\n}\n\ntype Writer interface{\n    write(b []byte)(int,error)\n}\n\ntype ReadWriter interface{\n    Reader\n    Writer\n}\n```\n\nWe can know that the ReadWriter must have two methods and then we have aggregating the two interface we defined before I call this as MixIn character in go .\n\nand the all examples display the method to define a interface and inherite to contruct a new interface .\n\n## polymorphism\n\nThe interface instance will be initlize to be nil and nil , and the OOP model in Go most like the OOP in Objective-C , called communication model , the class called as reciver and the methods called selector and the call process called message delivery .\n\n```Go\nfunc main(){\n    var buf *bytes.Buffer\n    buf.read()\n}\n```\n\nWhen define the buf variable then the buf will be nil and nil also be the interface as Reader and then when call , the buf will be nil so the message can be failure .\n\nHow polymorphism do in Go I think like java we just assgin a class which implement the interface we mention before , then we can create many class like the class , and then we just use the interface type pointer to point the class then we can use the method in polymorphism\n\n### Interface assignment \n\nThe memory model like many language , the class construct with pointer and constraint pool like java , we can define the const not only const but also the literal value and these variables can be saved in the meemory area in the .css segment and the method can be saved in the memory segment , and different type struct implement the only interface define in the all program will be in many memory segment .\n\n\bAnd when the method call then the runtime can find the real address of the method which call in the process . \n\nT and T* is the different type in Golang like this \n\n```Go\n\ntype SomeInterface interface{\n    Call() (string,error)\n}\n\ntype SomeStruct struct{\n    Name string\n    Age int32\n}\n\nfunc (self * SomeStruct)Call(string,error){\n    return self.Name ,nil\n}\n\nfunc main(){\n    var s SomeStruct = SomeStruct{\"leemaster\",22}\n    var i SomeInterface\n\n    i = s // wrong\n    i = &s \n}\n\n```\n\nThe wrong sign do what let this statement to be wrong , T and T * is two different type , when we use the s to assign to i then we assign the type T to a interface but the T don't implement the method in the interface but the T* implement the methods ,but why ,because the Go hava carried the truth of the OOP to us which save the self or this pointer to the struct then we can get or set the number but we also can let self as the T type but as we know the Go call a function/method just copy the arguments to the list of argument we modify the arguments struct don't do any effect .\n\n\n# Some example \n\n# standard-library flag\n\nthe flag package which use to handle the commind line arguments \n\n```Go\npackage tempconv\n\nimport(\n\t\"fmt\"\n\t\"flag\"\n)\n\ntype Celsius float64\ntype Fahrenheit float64\n\ntype celsiusFlag struct{Celsius}\n\nconst(\n\tAbsoluteZeroC Celsius = -273.15\n\tFreezingC Celsius = 0\n\tBoolingC Celsius = 0\n)\n\nfunc CToF(c Celsius) Fahrenheit{\n\treturn Fahrenheit(c * 9/5 + 32)\n}\n\nfunc FToC(f Fahrenheit) Celsius{\n\treturn Celsius((f - 32)*5/9)\n}\n\nfunc (f *celsiusFlag) Set(s string) error{\n\tvar unit string\n\tvar value float64\n\tfmt.Sscanf(s,\"%f%s\",&value,&unit)\n\tswitch unit{\n\tcase \"C\":\n\t\tf.Celsius = Celsius(value)\n\t\treturn nil\n\tcase \"F\":\n\t\tf.Celsius = FToC(Fahrenheit(value))\n\t\treturn nil\n\t}\n\treturn fmt.Errorf(\"invalid temperature %q\",s)\n}\n\nfunc (f * celsiusFlag) String() string{\n\treturn fmt.Sprintf(\"%f\",f.Celsius)\n}\n\nfunc CelsiusFlag(name string,value Celsius,usage string) * Celsius{\n\tf := celsiusFlag{value}\n\tflag.CommandLine.Var(&f,name,usage)\n\treturn &f.Celsius\n}\n\n```\n\nafter we create the type and method and function we should use go install command to install the libray in computer .\n\n```Go\npackage main\n\nimport \"leemaster.cn/flag/tempconv\"\n\nimport \"fmt\"\n\nimport \"flag\"\n\nvar temp = tempconv.CelsiusFlag(\"temp\",20.0,\"the temperature\")\n\nfunc main(){\n\n\tflag.Parse()\n\n\tfmt.Println(*temp)\n}\n```\n\n\n\n# Go Package management\n\nwe can see the package inner go file as a moudle to manage , and any module can implement the init() function not only just once \n\nand the runtime find moudule prcesure like this \n\n![go-init-process](http://ww1.sinaimg.cn/mw690/0079qc5ply1fsawh4tqkcj312m0hqk17.jpg)\n","source":"_posts/Go-Practice-interface-and-type.md","raw":"---\ntitle: Go-Practice-interface and type\ndate: 2018-06-14 17:09:48\ncategories:\n- Practice\ntags:\n- Go\n---\n\n# Go Interface \n\nIn many language to communicate to the computer , we have the interface structure to construct the rule between the people and the computer data structure . What is the interface ? In some time I have do this thinking that the interface is the rule for the all class which implement this interface and then will act as a same role \n\n<!--more-->\n\nFor a sample example in real world . we could know that the student is a role in school not only the perimary school middle schoold and the high school even in university . The student must do their duty to do in school , so we can call them be student role . right ?\n\nAnd the the all structure programming language had , we should know that the design method we could let the same behaviors to an interface and let the class to implement the interface and we also need some variables to define the base attribute of this class so the easy method let we know how to implement a real world into computer system .\n\n## In Go \n\nIn Go we get this reality like java the interface{} is the Any type like Java Object type. But what is the type or what is the type information ? I think that the interface is a type absolution in action .\n\nThe type in programming language just do this work to allocate the memory space and originaze the all pointer . But anything exculd the flow the system don't do like this .\n\nDefine an interface in go is really easy \n\n```Go\ntype SomeInterface interface{\n    SomeMethod()\n}\n```\n\nWe can use this grammer to create an interface and then we just let the struct called class to implement the all methods .\n\nWe don't need to do the implementation explicitly like in java use the implement key word , the compiler consider that a class override all method in an interface then it can belive the class is an instance for this interface .\n\nLike in Go standard library the File implement the io.Reader and io.Writer then we can use the file to write and read , and the io.Reader and io.Writer just have method like the interface Read and Write , but don't have any implemention and File will implement the all method to read and write , but how to write the File type don't need to know .\n\nAnd interface in Go can inherite from other interfaces like \n\n```Go\ntype Reader interface{\n    Read()([]byte,error)\n}\n\ntype Writer interface{\n    write(b []byte)(int,error)\n}\n\ntype ReadWriter interface{\n    Reader\n    Writer\n}\n```\n\nWe can know that the ReadWriter must have two methods and then we have aggregating the two interface we defined before I call this as MixIn character in go .\n\nand the all examples display the method to define a interface and inherite to contruct a new interface .\n\n## polymorphism\n\nThe interface instance will be initlize to be nil and nil , and the OOP model in Go most like the OOP in Objective-C , called communication model , the class called as reciver and the methods called selector and the call process called message delivery .\n\n```Go\nfunc main(){\n    var buf *bytes.Buffer\n    buf.read()\n}\n```\n\nWhen define the buf variable then the buf will be nil and nil also be the interface as Reader and then when call , the buf will be nil so the message can be failure .\n\nHow polymorphism do in Go I think like java we just assgin a class which implement the interface we mention before , then we can create many class like the class , and then we just use the interface type pointer to point the class then we can use the method in polymorphism\n\n### Interface assignment \n\nThe memory model like many language , the class construct with pointer and constraint pool like java , we can define the const not only const but also the literal value and these variables can be saved in the meemory area in the .css segment and the method can be saved in the memory segment , and different type struct implement the only interface define in the all program will be in many memory segment .\n\n\bAnd when the method call then the runtime can find the real address of the method which call in the process . \n\nT and T* is the different type in Golang like this \n\n```Go\n\ntype SomeInterface interface{\n    Call() (string,error)\n}\n\ntype SomeStruct struct{\n    Name string\n    Age int32\n}\n\nfunc (self * SomeStruct)Call(string,error){\n    return self.Name ,nil\n}\n\nfunc main(){\n    var s SomeStruct = SomeStruct{\"leemaster\",22}\n    var i SomeInterface\n\n    i = s // wrong\n    i = &s \n}\n\n```\n\nThe wrong sign do what let this statement to be wrong , T and T * is two different type , when we use the s to assign to i then we assign the type T to a interface but the T don't implement the method in the interface but the T* implement the methods ,but why ,because the Go hava carried the truth of the OOP to us which save the self or this pointer to the struct then we can get or set the number but we also can let self as the T type but as we know the Go call a function/method just copy the arguments to the list of argument we modify the arguments struct don't do any effect .\n\n\n# Some example \n\n# standard-library flag\n\nthe flag package which use to handle the commind line arguments \n\n```Go\npackage tempconv\n\nimport(\n\t\"fmt\"\n\t\"flag\"\n)\n\ntype Celsius float64\ntype Fahrenheit float64\n\ntype celsiusFlag struct{Celsius}\n\nconst(\n\tAbsoluteZeroC Celsius = -273.15\n\tFreezingC Celsius = 0\n\tBoolingC Celsius = 0\n)\n\nfunc CToF(c Celsius) Fahrenheit{\n\treturn Fahrenheit(c * 9/5 + 32)\n}\n\nfunc FToC(f Fahrenheit) Celsius{\n\treturn Celsius((f - 32)*5/9)\n}\n\nfunc (f *celsiusFlag) Set(s string) error{\n\tvar unit string\n\tvar value float64\n\tfmt.Sscanf(s,\"%f%s\",&value,&unit)\n\tswitch unit{\n\tcase \"C\":\n\t\tf.Celsius = Celsius(value)\n\t\treturn nil\n\tcase \"F\":\n\t\tf.Celsius = FToC(Fahrenheit(value))\n\t\treturn nil\n\t}\n\treturn fmt.Errorf(\"invalid temperature %q\",s)\n}\n\nfunc (f * celsiusFlag) String() string{\n\treturn fmt.Sprintf(\"%f\",f.Celsius)\n}\n\nfunc CelsiusFlag(name string,value Celsius,usage string) * Celsius{\n\tf := celsiusFlag{value}\n\tflag.CommandLine.Var(&f,name,usage)\n\treturn &f.Celsius\n}\n\n```\n\nafter we create the type and method and function we should use go install command to install the libray in computer .\n\n```Go\npackage main\n\nimport \"leemaster.cn/flag/tempconv\"\n\nimport \"fmt\"\n\nimport \"flag\"\n\nvar temp = tempconv.CelsiusFlag(\"temp\",20.0,\"the temperature\")\n\nfunc main(){\n\n\tflag.Parse()\n\n\tfmt.Println(*temp)\n}\n```\n\n\n\n# Go Package management\n\nwe can see the package inner go file as a moudle to manage , and any module can implement the init() function not only just once \n\nand the runtime find moudule prcesure like this \n\n![go-init-process](http://ww1.sinaimg.cn/mw690/0079qc5ply1fsawh4tqkcj312m0hqk17.jpg)\n","slug":"Go-Practice-interface-and-type","published":1,"updated":"2018-06-14T11:25:22.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85o000m4624fnujhwbi","content":"<h1 id=\"Go-Interface\"><a href=\"#Go-Interface\" class=\"headerlink\" title=\"Go Interface\"></a>Go Interface</h1><p>In many language to communicate to the computer , we have the interface structure to construct the rule between the people and the computer data structure . What is the interface ? In some time I have do this thinking that the interface is the rule for the all class which implement this interface and then will act as a same role </p>\n<a id=\"more\"></a>\n<p>For a sample example in real world . we could know that the student is a role in school not only the perimary school middle schoold and the high school even in university . The student must do their duty to do in school , so we can call them be student role . right ?</p>\n<p>And the the all structure programming language had , we should know that the design method we could let the same behaviors to an interface and let the class to implement the interface and we also need some variables to define the base attribute of this class so the easy method let we know how to implement a real world into computer system .</p>\n<h2 id=\"In-Go\"><a href=\"#In-Go\" class=\"headerlink\" title=\"In Go\"></a>In Go</h2><p>In Go we get this reality like java the interface{} is the Any type like Java Object type. But what is the type or what is the type information ? I think that the interface is a type absolution in action .</p>\n<p>The type in programming language just do this work to allocate the memory space and originaze the all pointer . But anything exculd the flow the system don’t do like this .</p>\n<p>Define an interface in go is really easy </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> SomeInterface <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    SomeMethod()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can use this grammer to create an interface and then we just let the struct called class to implement the all methods .</p>\n<p>We don’t need to do the implementation explicitly like in java use the implement key word , the compiler consider that a class override all method in an interface then it can belive the class is an instance for this interface .</p>\n<p>Like in Go standard library the File implement the io.Reader and io.Writer then we can use the file to write and read , and the io.Reader and io.Writer just have method like the interface Read and Write , but don’t have any implemention and File will implement the all method to read and write , but how to write the File type don’t need to know .</p>\n<p>And interface in Go can inherite from other interfaces like </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read()([]<span class=\"keyword\">byte</span>,error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    write(b []<span class=\"keyword\">byte</span>)(<span class=\"keyword\">int</span>,error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadWriter <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Reader</span><br><span class=\"line\">    Writer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can know that the ReadWriter must have two methods and then we have aggregating the two interface we defined before I call this as MixIn character in go .</p>\n<p>and the all examples display the method to define a interface and inherite to contruct a new interface .</p>\n<h2 id=\"polymorphism\"><a href=\"#polymorphism\" class=\"headerlink\" title=\"polymorphism\"></a>polymorphism</h2><p>The interface instance will be initlize to be nil and nil , and the OOP model in Go most like the OOP in Objective-C , called communication model , the class called as reciver and the methods called selector and the call process called message delivery .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf *bytes.Buffer</span><br><span class=\"line\">    buf.read()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When define the buf variable then the buf will be nil and nil also be the interface as Reader and then when call , the buf will be nil so the message can be failure .</p>\n<p>How polymorphism do in Go I think like java we just assgin a class which implement the interface we mention before , then we can create many class like the class , and then we just use the interface type pointer to point the class then we can use the method in polymorphism</p>\n<h3 id=\"Interface-assignment\"><a href=\"#Interface-assignment\" class=\"headerlink\" title=\"Interface assignment\"></a>Interface assignment</h3><p>The memory model like many language , the class construct with pointer and constraint pool like java , we can define the const not only const but also the literal value and these variables can be saved in the meemory area in the .css segment and the method can be saved in the memory segment , and different type struct implement the only interface define in the all program will be in many memory segment .</p>\n<p>\bAnd when the method call then the runtime can find the real address of the method which call in the process . </p>\n<p>T and T* is the different type in Golang like this </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SomeInterface <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Call() (<span class=\"keyword\">string</span>,error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SomeStruct <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name <span class=\"keyword\">string</span></span><br><span class=\"line\">    Age <span class=\"keyword\">int32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self * SomeStruct)</span><span class=\"title\">Call</span><span class=\"params\">(<span class=\"keyword\">string</span>,error)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.Name ,<span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s SomeStruct = SomeStruct&#123;<span class=\"string\">\"leemaster\"</span>,<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i SomeInterface</span><br><span class=\"line\"></span><br><span class=\"line\">    i = s <span class=\"comment\">// wrong</span></span><br><span class=\"line\">    i = &amp;s </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The wrong sign do what let this statement to be wrong , T and T <em> is two different type , when we use the s to assign to i then we assign the type T to a interface but the T don’t implement the method in the interface but the T</em> implement the methods ,but why ,because the Go hava carried the truth of the OOP to us which save the self or this pointer to the struct then we can get or set the number but we also can let self as the T type but as we know the Go call a function/method just copy the arguments to the list of argument we modify the arguments struct don’t do any effect .</p>\n<h1 id=\"Some-example\"><a href=\"#Some-example\" class=\"headerlink\" title=\"Some example\"></a>Some example</h1><h1 id=\"standard-library-flag\"><a href=\"#standard-library-flag\" class=\"headerlink\" title=\"standard-library flag\"></a>standard-library flag</h1><p>the flag package which use to handle the commind line arguments </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tempconv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"flag\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Celsius <span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Fahrenheit <span class=\"keyword\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> celsiusFlag <span class=\"keyword\">struct</span>&#123;Celsius&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tAbsoluteZeroC Celsius = <span class=\"number\">-273.15</span></span><br><span class=\"line\">\tFreezingC Celsius = <span class=\"number\">0</span></span><br><span class=\"line\">\tBoolingC Celsius = <span class=\"number\">0</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CToF</span><span class=\"params\">(c Celsius)</span> <span class=\"title\">Fahrenheit</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Fahrenheit(c * <span class=\"number\">9</span>/<span class=\"number\">5</span> + <span class=\"number\">32</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FToC</span><span class=\"params\">(f Fahrenheit)</span> <span class=\"title\">Celsius</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Celsius((f - <span class=\"number\">32</span>)*<span class=\"number\">5</span>/<span class=\"number\">9</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *celsiusFlag)</span> <span class=\"title\">Set</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> unit <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value <span class=\"keyword\">float64</span></span><br><span class=\"line\">\tfmt.Sscanf(s,<span class=\"string\">\"%f%s\"</span>,&amp;value,&amp;unit)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> unit&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"C\"</span>:</span><br><span class=\"line\">\t\tf.Celsius = Celsius(value)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"F\"</span>:</span><br><span class=\"line\">\t\tf.Celsius = FToC(Fahrenheit(value))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"invalid temperature %q\"</span>,s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f * celsiusFlag)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%f\"</span>,f.Celsius)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CelsiusFlag</span><span class=\"params\">(name <span class=\"keyword\">string</span>,value Celsius,usage <span class=\"keyword\">string</span>)</span> * <span class=\"title\">Celsius</span></span>&#123;</span><br><span class=\"line\">\tf := celsiusFlag&#123;value&#125;</span><br><span class=\"line\">\tflag.CommandLine.Var(&amp;f,name,usage)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;f.Celsius</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>after we create the type and method and function we should use go install command to install the libray in computer .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"leemaster.cn/flag/tempconv\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = tempconv.CelsiusFlag(<span class=\"string\">\"temp\"</span>,<span class=\"number\">20.0</span>,<span class=\"string\">\"the temperature\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(*temp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Go-Package-management\"><a href=\"#Go-Package-management\" class=\"headerlink\" title=\"Go Package management\"></a>Go Package management</h1><p>we can see the package inner go file as a moudle to manage , and any module can implement the init() function not only just once </p>\n<p>and the runtime find moudule prcesure like this </p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1fsawh4tqkcj312m0hqk17.jpg\" alt=\"go-init-process\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Go-Interface\"><a href=\"#Go-Interface\" class=\"headerlink\" title=\"Go Interface\"></a>Go Interface</h1><p>In many language to communicate to the computer , we have the interface structure to construct the rule between the people and the computer data structure . What is the interface ? In some time I have do this thinking that the interface is the rule for the all class which implement this interface and then will act as a same role </p>","more":"<p>For a sample example in real world . we could know that the student is a role in school not only the perimary school middle schoold and the high school even in university . The student must do their duty to do in school , so we can call them be student role . right ?</p>\n<p>And the the all structure programming language had , we should know that the design method we could let the same behaviors to an interface and let the class to implement the interface and we also need some variables to define the base attribute of this class so the easy method let we know how to implement a real world into computer system .</p>\n<h2 id=\"In-Go\"><a href=\"#In-Go\" class=\"headerlink\" title=\"In Go\"></a>In Go</h2><p>In Go we get this reality like java the interface{} is the Any type like Java Object type. But what is the type or what is the type information ? I think that the interface is a type absolution in action .</p>\n<p>The type in programming language just do this work to allocate the memory space and originaze the all pointer . But anything exculd the flow the system don’t do like this .</p>\n<p>Define an interface in go is really easy </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> SomeInterface <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    SomeMethod()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can use this grammer to create an interface and then we just let the struct called class to implement the all methods .</p>\n<p>We don’t need to do the implementation explicitly like in java use the implement key word , the compiler consider that a class override all method in an interface then it can belive the class is an instance for this interface .</p>\n<p>Like in Go standard library the File implement the io.Reader and io.Writer then we can use the file to write and read , and the io.Reader and io.Writer just have method like the interface Read and Write , but don’t have any implemention and File will implement the all method to read and write , but how to write the File type don’t need to know .</p>\n<p>And interface in Go can inherite from other interfaces like </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read()([]<span class=\"keyword\">byte</span>,error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    write(b []<span class=\"keyword\">byte</span>)(<span class=\"keyword\">int</span>,error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadWriter <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Reader</span><br><span class=\"line\">    Writer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can know that the ReadWriter must have two methods and then we have aggregating the two interface we defined before I call this as MixIn character in go .</p>\n<p>and the all examples display the method to define a interface and inherite to contruct a new interface .</p>\n<h2 id=\"polymorphism\"><a href=\"#polymorphism\" class=\"headerlink\" title=\"polymorphism\"></a>polymorphism</h2><p>The interface instance will be initlize to be nil and nil , and the OOP model in Go most like the OOP in Objective-C , called communication model , the class called as reciver and the methods called selector and the call process called message delivery .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf *bytes.Buffer</span><br><span class=\"line\">    buf.read()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When define the buf variable then the buf will be nil and nil also be the interface as Reader and then when call , the buf will be nil so the message can be failure .</p>\n<p>How polymorphism do in Go I think like java we just assgin a class which implement the interface we mention before , then we can create many class like the class , and then we just use the interface type pointer to point the class then we can use the method in polymorphism</p>\n<h3 id=\"Interface-assignment\"><a href=\"#Interface-assignment\" class=\"headerlink\" title=\"Interface assignment\"></a>Interface assignment</h3><p>The memory model like many language , the class construct with pointer and constraint pool like java , we can define the const not only const but also the literal value and these variables can be saved in the meemory area in the .css segment and the method can be saved in the memory segment , and different type struct implement the only interface define in the all program will be in many memory segment .</p>\n<p>\bAnd when the method call then the runtime can find the real address of the method which call in the process . </p>\n<p>T and T* is the different type in Golang like this </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SomeInterface <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Call() (<span class=\"keyword\">string</span>,error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SomeStruct <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name <span class=\"keyword\">string</span></span><br><span class=\"line\">    Age <span class=\"keyword\">int32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self * SomeStruct)</span><span class=\"title\">Call</span><span class=\"params\">(<span class=\"keyword\">string</span>,error)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.Name ,<span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s SomeStruct = SomeStruct&#123;<span class=\"string\">\"leemaster\"</span>,<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i SomeInterface</span><br><span class=\"line\"></span><br><span class=\"line\">    i = s <span class=\"comment\">// wrong</span></span><br><span class=\"line\">    i = &amp;s </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The wrong sign do what let this statement to be wrong , T and T <em> is two different type , when we use the s to assign to i then we assign the type T to a interface but the T don’t implement the method in the interface but the T</em> implement the methods ,but why ,because the Go hava carried the truth of the OOP to us which save the self or this pointer to the struct then we can get or set the number but we also can let self as the T type but as we know the Go call a function/method just copy the arguments to the list of argument we modify the arguments struct don’t do any effect .</p>\n<h1 id=\"Some-example\"><a href=\"#Some-example\" class=\"headerlink\" title=\"Some example\"></a>Some example</h1><h1 id=\"standard-library-flag\"><a href=\"#standard-library-flag\" class=\"headerlink\" title=\"standard-library flag\"></a>standard-library flag</h1><p>the flag package which use to handle the commind line arguments </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tempconv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"flag\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Celsius <span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Fahrenheit <span class=\"keyword\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> celsiusFlag <span class=\"keyword\">struct</span>&#123;Celsius&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tAbsoluteZeroC Celsius = <span class=\"number\">-273.15</span></span><br><span class=\"line\">\tFreezingC Celsius = <span class=\"number\">0</span></span><br><span class=\"line\">\tBoolingC Celsius = <span class=\"number\">0</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CToF</span><span class=\"params\">(c Celsius)</span> <span class=\"title\">Fahrenheit</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Fahrenheit(c * <span class=\"number\">9</span>/<span class=\"number\">5</span> + <span class=\"number\">32</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FToC</span><span class=\"params\">(f Fahrenheit)</span> <span class=\"title\">Celsius</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Celsius((f - <span class=\"number\">32</span>)*<span class=\"number\">5</span>/<span class=\"number\">9</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *celsiusFlag)</span> <span class=\"title\">Set</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> unit <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value <span class=\"keyword\">float64</span></span><br><span class=\"line\">\tfmt.Sscanf(s,<span class=\"string\">\"%f%s\"</span>,&amp;value,&amp;unit)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> unit&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"C\"</span>:</span><br><span class=\"line\">\t\tf.Celsius = Celsius(value)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"F\"</span>:</span><br><span class=\"line\">\t\tf.Celsius = FToC(Fahrenheit(value))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"invalid temperature %q\"</span>,s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f * celsiusFlag)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%f\"</span>,f.Celsius)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CelsiusFlag</span><span class=\"params\">(name <span class=\"keyword\">string</span>,value Celsius,usage <span class=\"keyword\">string</span>)</span> * <span class=\"title\">Celsius</span></span>&#123;</span><br><span class=\"line\">\tf := celsiusFlag&#123;value&#125;</span><br><span class=\"line\">\tflag.CommandLine.Var(&amp;f,name,usage)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;f.Celsius</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>after we create the type and method and function we should use go install command to install the libray in computer .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"leemaster.cn/flag/tempconv\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = tempconv.CelsiusFlag(<span class=\"string\">\"temp\"</span>,<span class=\"number\">20.0</span>,<span class=\"string\">\"the temperature\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(*temp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Go-Package-management\"><a href=\"#Go-Package-management\" class=\"headerlink\" title=\"Go Package management\"></a>Go Package management</h1><p>we can see the package inner go file as a moudle to manage , and any module can implement the init() function not only just once </p>\n<p>and the runtime find moudule prcesure like this </p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1fsawh4tqkcj312m0hqk17.jpg\" alt=\"go-init-process\"></p>"},{"title":"Java8-stream-record","date":"2018-06-20T23:13:43.000Z","_content":"\n# Java Stream Api \n\nJava8 support the lambda and the stream , and what is the stream conputing method in Java ?\nWe can do this thinking in the java stream api , or , do the same in this way why use the stream to iterate the elements in the container in java not use the tranditional collection Iteratable or Interator interfaces ?\n\n<!--more-->\n\nThe many time we complete the workflow in a pipeline and then we will get a final result like map/reduce , so in the new api in java we can also do thing . And the interation in java why we use the stream not the original collections api to operate the elements , because of the less using memeory.\n\nThis Api based on the Jav7 Fork/Join framework , the design for the java8 stream is this , we see the collections as a data source and then we assign some middle oeprations in the way to the final result , like DFA the original collection be the initlize state and there is also a terminal state for the end .\n\nSo we can use the api to do many thing in java8 to handle the collection and then will releax our development in daily life .\n\n# Stream concept \n\nI think the first time I use the stream is use the java I/O api to read/write file or socket and I also belive the stream is a pattern in the computer . What is stream ? stream is a data delivery pattern let the data from one location to other location , and the data will be spilit to the smallest unit to transport . And then the reciver also receive the data use the same method unit by unit in string the unit is byte which allocate 8 bits to contain the data.\n\nSo if we use this concept in the collection operation we can belive the data can be infinity,we just use the stream api to get and handle , but in the tranditional method we should allocate a space to save the collections total , but in stream we just need use a very samll memeoy to contain the data. because the stream use the pattern lazy-compute , when we use an object the api will product an object .\n\nAnd like the workers in factory the function will be orginazed to one or more pipeline to handle the data .\n\n```java\n\npublic void java7MapOperation(){\n    List<String> list = Array.asList({//add some elements})\n\n    for(String key : list){\n        key = key + \"string\";\n    }\n}\n\n```\n\nuse this long style code to handle the data in map will be more stupid , but in java8 \n\n```java\npublic void java7MapOperation(){\n   List<String> list = Array.asList({//add some elements})\n\n   list = list.stream().map(e -> e + \"string\").collect(Collectors.toList());\n}\n```\n\nwe do this will let the handler to a pipeline part and then will handle the list in a very easy way to handle .\n\n# Usage \n\n* get a stream \n\n* write some Intermediate\n\n    * map (mapToInt, flatMap)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered\n\n* write some Terminal\n\n    * forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator\n\n* write Short-circuiting\n\n    * anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit\n\n## Get a stream\n\nNow we should get stream from a list collection as the datasource we should use in the next time . This operation will be a source for the next step to use .\n\nThere are many method to get a stream , I don't list them , we just know the one truth , we have a stream and then will handle them just in any liner collections \n\n## Write the pipeline function\n\nsome example will write down there .\n\n\n\n## Use as lambda \n\n## Inner iteration","source":"_posts/Java8-stream-record.md","raw":"---\ntitle: Java8-stream-record\ndate: 2018-06-20 23:13:43\ncategories:\n- Practice\ntags:\n- Java\n- Concurrency\n---\n\n# Java Stream Api \n\nJava8 support the lambda and the stream , and what is the stream conputing method in Java ?\nWe can do this thinking in the java stream api , or , do the same in this way why use the stream to iterate the elements in the container in java not use the tranditional collection Iteratable or Interator interfaces ?\n\n<!--more-->\n\nThe many time we complete the workflow in a pipeline and then we will get a final result like map/reduce , so in the new api in java we can also do thing . And the interation in java why we use the stream not the original collections api to operate the elements , because of the less using memeory.\n\nThis Api based on the Jav7 Fork/Join framework , the design for the java8 stream is this , we see the collections as a data source and then we assign some middle oeprations in the way to the final result , like DFA the original collection be the initlize state and there is also a terminal state for the end .\n\nSo we can use the api to do many thing in java8 to handle the collection and then will releax our development in daily life .\n\n# Stream concept \n\nI think the first time I use the stream is use the java I/O api to read/write file or socket and I also belive the stream is a pattern in the computer . What is stream ? stream is a data delivery pattern let the data from one location to other location , and the data will be spilit to the smallest unit to transport . And then the reciver also receive the data use the same method unit by unit in string the unit is byte which allocate 8 bits to contain the data.\n\nSo if we use this concept in the collection operation we can belive the data can be infinity,we just use the stream api to get and handle , but in the tranditional method we should allocate a space to save the collections total , but in stream we just need use a very samll memeoy to contain the data. because the stream use the pattern lazy-compute , when we use an object the api will product an object .\n\nAnd like the workers in factory the function will be orginazed to one or more pipeline to handle the data .\n\n```java\n\npublic void java7MapOperation(){\n    List<String> list = Array.asList({//add some elements})\n\n    for(String key : list){\n        key = key + \"string\";\n    }\n}\n\n```\n\nuse this long style code to handle the data in map will be more stupid , but in java8 \n\n```java\npublic void java7MapOperation(){\n   List<String> list = Array.asList({//add some elements})\n\n   list = list.stream().map(e -> e + \"string\").collect(Collectors.toList());\n}\n```\n\nwe do this will let the handler to a pipeline part and then will handle the list in a very easy way to handle .\n\n# Usage \n\n* get a stream \n\n* write some Intermediate\n\n    * map (mapToInt, flatMap)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered\n\n* write some Terminal\n\n    * forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator\n\n* write Short-circuiting\n\n    * anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit\n\n## Get a stream\n\nNow we should get stream from a list collection as the datasource we should use in the next time . This operation will be a source for the next step to use .\n\nThere are many method to get a stream , I don't list them , we just know the one truth , we have a stream and then will handle them just in any liner collections \n\n## Write the pipeline function\n\nsome example will write down there .\n\n\n\n## Use as lambda \n\n## Inner iteration","slug":"Java8-stream-record","published":1,"updated":"2018-06-22T14:35:52.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85p000o4624l4k8k3mv","content":"<h1 id=\"Java-Stream-Api\"><a href=\"#Java-Stream-Api\" class=\"headerlink\" title=\"Java Stream Api\"></a>Java Stream Api</h1><p>Java8 support the lambda and the stream , and what is the stream conputing method in Java ?<br>We can do this thinking in the java stream api , or , do the same in this way why use the stream to iterate the elements in the container in java not use the tranditional collection Iteratable or Interator interfaces ?</p>\n<a id=\"more\"></a>\n<p>The many time we complete the workflow in a pipeline and then we will get a final result like map/reduce , so in the new api in java we can also do thing . And the interation in java why we use the stream not the original collections api to operate the elements , because of the less using memeory.</p>\n<p>This Api based on the Jav7 Fork/Join framework , the design for the java8 stream is this , we see the collections as a data source and then we assign some middle oeprations in the way to the final result , like DFA the original collection be the initlize state and there is also a terminal state for the end .</p>\n<p>So we can use the api to do many thing in java8 to handle the collection and then will releax our development in daily life .</p>\n<h1 id=\"Stream-concept\"><a href=\"#Stream-concept\" class=\"headerlink\" title=\"Stream concept\"></a>Stream concept</h1><p>I think the first time I use the stream is use the java I/O api to read/write file or socket and I also belive the stream is a pattern in the computer . What is stream ? stream is a data delivery pattern let the data from one location to other location , and the data will be spilit to the smallest unit to transport . And then the reciver also receive the data use the same method unit by unit in string the unit is byte which allocate 8 bits to contain the data.</p>\n<p>So if we use this concept in the collection operation we can belive the data can be infinity,we just use the stream api to get and handle , but in the tranditional method we should allocate a space to save the collections total , but in stream we just need use a very samll memeoy to contain the data. because the stream use the pattern lazy-compute , when we use an object the api will product an object .</p>\n<p>And like the workers in factory the function will be orginazed to one or more pipeline to handle the data .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">java7MapOperation</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; list = Array.asList(&#123;<span class=\"comment\">//add some elements&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String key : list)&#123;</span><br><span class=\"line\">        key = key + <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>use this long style code to handle the data in map will be more stupid , but in java8 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">java7MapOperation</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   List&lt;String&gt; list = Array.asList(&#123;<span class=\"comment\">//add some elements&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">   list = list.stream().map(e -&gt; e + <span class=\"string\">\"string\"</span>).collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we do this will let the handler to a pipeline part and then will handle the list in a very easy way to handle .</p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><ul>\n<li><p>get a stream </p>\n</li>\n<li><p>write some Intermediate</p>\n<ul>\n<li>map (mapToInt, flatMap)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</li>\n</ul>\n</li>\n<li><p>write some Terminal</p>\n<ul>\n<li>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</li>\n</ul>\n</li>\n<li><p>write Short-circuiting</p>\n<ul>\n<li>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Get-a-stream\"><a href=\"#Get-a-stream\" class=\"headerlink\" title=\"Get a stream\"></a>Get a stream</h2><p>Now we should get stream from a list collection as the datasource we should use in the next time . This operation will be a source for the next step to use .</p>\n<p>There are many method to get a stream , I don’t list them , we just know the one truth , we have a stream and then will handle them just in any liner collections </p>\n<h2 id=\"Write-the-pipeline-function\"><a href=\"#Write-the-pipeline-function\" class=\"headerlink\" title=\"Write the pipeline function\"></a>Write the pipeline function</h2><p>some example will write down there .</p>\n<h2 id=\"Use-as-lambda\"><a href=\"#Use-as-lambda\" class=\"headerlink\" title=\"Use as lambda\"></a>Use as lambda</h2><h2 id=\"Inner-iteration\"><a href=\"#Inner-iteration\" class=\"headerlink\" title=\"Inner iteration\"></a>Inner iteration</h2>","site":{"data":{}},"excerpt":"<h1 id=\"Java-Stream-Api\"><a href=\"#Java-Stream-Api\" class=\"headerlink\" title=\"Java Stream Api\"></a>Java Stream Api</h1><p>Java8 support the lambda and the stream , and what is the stream conputing method in Java ?<br>We can do this thinking in the java stream api , or , do the same in this way why use the stream to iterate the elements in the container in java not use the tranditional collection Iteratable or Interator interfaces ?</p>","more":"<p>The many time we complete the workflow in a pipeline and then we will get a final result like map/reduce , so in the new api in java we can also do thing . And the interation in java why we use the stream not the original collections api to operate the elements , because of the less using memeory.</p>\n<p>This Api based on the Jav7 Fork/Join framework , the design for the java8 stream is this , we see the collections as a data source and then we assign some middle oeprations in the way to the final result , like DFA the original collection be the initlize state and there is also a terminal state for the end .</p>\n<p>So we can use the api to do many thing in java8 to handle the collection and then will releax our development in daily life .</p>\n<h1 id=\"Stream-concept\"><a href=\"#Stream-concept\" class=\"headerlink\" title=\"Stream concept\"></a>Stream concept</h1><p>I think the first time I use the stream is use the java I/O api to read/write file or socket and I also belive the stream is a pattern in the computer . What is stream ? stream is a data delivery pattern let the data from one location to other location , and the data will be spilit to the smallest unit to transport . And then the reciver also receive the data use the same method unit by unit in string the unit is byte which allocate 8 bits to contain the data.</p>\n<p>So if we use this concept in the collection operation we can belive the data can be infinity,we just use the stream api to get and handle , but in the tranditional method we should allocate a space to save the collections total , but in stream we just need use a very samll memeoy to contain the data. because the stream use the pattern lazy-compute , when we use an object the api will product an object .</p>\n<p>And like the workers in factory the function will be orginazed to one or more pipeline to handle the data .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">java7MapOperation</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; list = Array.asList(&#123;<span class=\"comment\">//add some elements&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String key : list)&#123;</span><br><span class=\"line\">        key = key + <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>use this long style code to handle the data in map will be more stupid , but in java8 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">java7MapOperation</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   List&lt;String&gt; list = Array.asList(&#123;<span class=\"comment\">//add some elements&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">   list = list.stream().map(e -&gt; e + <span class=\"string\">\"string\"</span>).collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we do this will let the handler to a pipeline part and then will handle the list in a very easy way to handle .</p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><ul>\n<li><p>get a stream </p>\n</li>\n<li><p>write some Intermediate</p>\n<ul>\n<li>map (mapToInt, flatMap)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</li>\n</ul>\n</li>\n<li><p>write some Terminal</p>\n<ul>\n<li>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</li>\n</ul>\n</li>\n<li><p>write Short-circuiting</p>\n<ul>\n<li>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Get-a-stream\"><a href=\"#Get-a-stream\" class=\"headerlink\" title=\"Get a stream\"></a>Get a stream</h2><p>Now we should get stream from a list collection as the datasource we should use in the next time . This operation will be a source for the next step to use .</p>\n<p>There are many method to get a stream , I don’t list them , we just know the one truth , we have a stream and then will handle them just in any liner collections </p>\n<h2 id=\"Write-the-pipeline-function\"><a href=\"#Write-the-pipeline-function\" class=\"headerlink\" title=\"Write the pipeline function\"></a>Write the pipeline function</h2><p>some example will write down there .</p>\n<h2 id=\"Use-as-lambda\"><a href=\"#Use-as-lambda\" class=\"headerlink\" title=\"Use as lambda\"></a>Use as lambda</h2><h2 id=\"Inner-iteration\"><a href=\"#Inner-iteration\" class=\"headerlink\" title=\"Inner iteration\"></a>Inner iteration</h2>"},{"title":"Linux Programming Autotools ","date":"2018-05-22T23:26:00.000Z","_content":"\n# Autotools\n\nWe know the GNU-- \"GNU not unix\" foundation is support the open source software and the autotools is the tool in GNU to create Makefile automatically . The tool package have file children tools , aclocal,autoscan,autoheader,autoconf,automake, they consits the autotools ,and we can use them to contribute a open source code software in C/CPP .\n\nDon't need write makefile any more , until you want to do more effective thing to do .\n\n<!--more-->\n\n# Project Management \n\nI have used the Maven to manage the Java project and the project directory tree like this \n\n```text\nproject\n    |---src\n    |   |---main\n    |   |   |---java\n    |   |   |---resources\n    |   |---test\n    |---pom.xml\n```\n\nAlso we can belive the C/C++ project also have a directory tree in common.\n\n```text\nproject\n    |---lib\n    |---include\n    |---src\n```\n\nthe lib will contain the static library or dynamic library and the include contains the header file , src as you can see contains the source files .\n\n\n","source":"_posts/Linux-Programming-Autotools.md","raw":"---\ntitle: 'Linux Programming Autotools '\ndate: 2018-05-22 23:26:00\ncategories:\n- Linux Programming\ntags:\n- system call\n---\n\n# Autotools\n\nWe know the GNU-- \"GNU not unix\" foundation is support the open source software and the autotools is the tool in GNU to create Makefile automatically . The tool package have file children tools , aclocal,autoscan,autoheader,autoconf,automake, they consits the autotools ,and we can use them to contribute a open source code software in C/CPP .\n\nDon't need write makefile any more , until you want to do more effective thing to do .\n\n<!--more-->\n\n# Project Management \n\nI have used the Maven to manage the Java project and the project directory tree like this \n\n```text\nproject\n    |---src\n    |   |---main\n    |   |   |---java\n    |   |   |---resources\n    |   |---test\n    |---pom.xml\n```\n\nAlso we can belive the C/C++ project also have a directory tree in common.\n\n```text\nproject\n    |---lib\n    |---include\n    |---src\n```\n\nthe lib will contain the static library or dynamic library and the include contains the header file , src as you can see contains the source files .\n\n\n","slug":"Linux-Programming-Autotools","published":1,"updated":"2018-05-22T15:36:16.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85q000s46245n83x3b2","content":"<h1 id=\"Autotools\"><a href=\"#Autotools\" class=\"headerlink\" title=\"Autotools\"></a>Autotools</h1><p>We know the GNU— “GNU not unix” foundation is support the open source software and the autotools is the tool in GNU to create Makefile automatically . The tool package have file children tools , aclocal,autoscan,autoheader,autoconf,automake, they consits the autotools ,and we can use them to contribute a open source code software in C/CPP .</p>\n<p>Don’t need write makefile any more , until you want to do more effective thing to do .</p>\n<a id=\"more\"></a>\n<h1 id=\"Project-Management\"><a href=\"#Project-Management\" class=\"headerlink\" title=\"Project Management\"></a>Project Management</h1><p>I have used the Maven to manage the Java project and the project directory tree like this </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">    |---src</span><br><span class=\"line\">    |   |---main</span><br><span class=\"line\">    |   |   |---java</span><br><span class=\"line\">    |   |   |---resources</span><br><span class=\"line\">    |   |---test</span><br><span class=\"line\">    |---pom.xml</span><br></pre></td></tr></table></figure>\n<p>Also we can belive the C/C++ project also have a directory tree in common.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">    |---lib</span><br><span class=\"line\">    |---include</span><br><span class=\"line\">    |---src</span><br></pre></td></tr></table></figure>\n<p>the lib will contain the static library or dynamic library and the include contains the header file , src as you can see contains the source files .</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Autotools\"><a href=\"#Autotools\" class=\"headerlink\" title=\"Autotools\"></a>Autotools</h1><p>We know the GNU— “GNU not unix” foundation is support the open source software and the autotools is the tool in GNU to create Makefile automatically . The tool package have file children tools , aclocal,autoscan,autoheader,autoconf,automake, they consits the autotools ,and we can use them to contribute a open source code software in C/CPP .</p>\n<p>Don’t need write makefile any more , until you want to do more effective thing to do .</p>","more":"<h1 id=\"Project-Management\"><a href=\"#Project-Management\" class=\"headerlink\" title=\"Project Management\"></a>Project Management</h1><p>I have used the Maven to manage the Java project and the project directory tree like this </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">    |---src</span><br><span class=\"line\">    |   |---main</span><br><span class=\"line\">    |   |   |---java</span><br><span class=\"line\">    |   |   |---resources</span><br><span class=\"line\">    |   |---test</span><br><span class=\"line\">    |---pom.xml</span><br></pre></td></tr></table></figure>\n<p>Also we can belive the C/C++ project also have a directory tree in common.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">    |---lib</span><br><span class=\"line\">    |---include</span><br><span class=\"line\">    |---src</span><br></pre></td></tr></table></figure>\n<p>the lib will contain the static library or dynamic library and the include contains the header file , src as you can see contains the source files .</p>"},{"title":"Go Tutorial - programming in senquence","date":"2018-05-19T10:40:45.000Z","_content":"\n# Why use Go\n\nBefore I was a Java developer in application of web , sometimes had tried Scala and kotlin but not like them as Go .\n\nRecent day I had join the **Meituan-Dianping** cloud computing department , and in the next time I will do something intresting in System Programming , so will use more C and Golang may be will use some Rust to complete the development in my works.\n\n<!--more-->\n\n## Annoying Garbage Collection\n\nBefore I was working with C/C++ in my student life at HEBNU , what the fuck when I use the malloc or free and also in new delete , more and more in the programming forget the free the memory then will let the program run out .\n\n## Concurrency difficult in Java \n\nAlthough the Java concurrency model is really useful in enterprise development in some action ,the package java.util.concurrency is not easy for developer to catch the key in design the system .\n\nNot only the above , but also this , the java.util.nio epoll bug is not fix up as soon, but use the cpp boost and ACE frame is not easy to do some thing effective and then I want choose a program language not only contain the base abstraction but also own the effective ability in concurrency and socket programming .\n\nlet's Go !!!!! \n\n# Go base process \n\n## Base Grammer\n\n* package \n\nthe go pragram will in time run in the main package and the package is the base to manage the library like python and java\n\n* import \n\nuse this keyword will let us to use more effictive library from other developers \n\n* func \n\n```GO\nfunc main(){\n    fmt.Printf(\"Hello word\")\n}\n```\nlike this statement will use the function in action and there are more details in the next chapter \n\n* standar library \n\nGo standar library is very good in practice and I will introduce them in the next articles\n\n## Compile Enviroment\n\n* go run ***.go\n\nuse this run command will tell the go to compile and link and then run the go program\n\n## Variable and Constant\n\n### Variable\nIn every lanaguage the most important thing is define the variable in use , not only the static but the automatic variable and then will use in many way to sign the variable and other.\n\nHere are some Demo\n\n```GO\nvar intVal int\nvar strVal string\n\nvar arrVal1 [10]int\nvar arrVal2 [10]string\n\nvar arrSlice []int \n\nvar maoVal map[string]int\n\nvar funcVal func(par int) int\n\nvar(\n    defVal1 int \n    defVal2 int \n)\n\ninferVal1 := 10\ninferVal2 := \"string\"\n\n```\nThis above code display a base method to define the variable in action .\n\n```GO\nfunc getName() (firstName,midName,lastName string){\n    return \"leemaster\",\"lee\",\"XiaoYu\"\n}\n\n_,_,lastName = getName()\n\nfmt.Printf(lastName)\n```\nanonymity variable like above and then will use **_** to receive then will let the last to get the variable we really need\n\nAnd then we want know the base variable type such as **int、uint、int32、 int64、float32、float64、complex64、complex128**\n\n### Constant\n\nConstant may be same as the constant in java or other program language\n\n```GO\nconst Pi float64 = 3.1415926\n```\n\nIt's easy to use the constant in programming and we can't use the infer in go to get the dynamic type for the constant . like thie below \n\n```GO\nconst PI := 3.1415926\n```\n\nAnd Go had set some defined constants such as **true false iota**\n\n```GO\nconst (\n    c0 = iota\n    c1 = iota \n    c2 = iota\n)\n\nconst (\n    c0 = iota\n    c1 \n    c2\n)\n```\nWhen the compiler find one time iota raised then will let the iota value to be added one and then set the value to the left value(which is the address used to be modified in C defined)\n\nSo use the **const** keyword may can be used in the in enumeration to define some constant will be used in the next program \n\n```GO\nconst (\n    Sunday = iota\n    Monday\n    Tuesday\n    Wednesday\n    Thursday\n    Friday\n    Saturday\n    numberOfDay  // this constant can't be use in the other packages \n)\n```\n\nNo enum keyword and then also can define the enumeration and then use in the package or other package , because the First capital character word can be expose to other packages.\n\n## Type System\n\nType in Go is real useful , be more easier to use in action .\n\n### Base Type \n\n* Boolean Type bool\n* Interger Type type int int32 int64 uint uintptr\n* Float Type float32 float64\n* Complex Type complex32 complex64\n* String Type string\n* Character Type rune\n* Error Type\n\n### Compound Type\n* Pointer like the pointer in C\n* Array [array_size]type\n* Slice []type\n* Map map\n* Channel chan\n* Struct struct \n* Interface \n\n### Attention\n\n* The Integer type may depend on the platform to compile the Go\n* int32 cna't be equal to the int type \n* float type like the C and Java will be init to double type (float64)\n* string in travales will in to the rune type\n* Array type will be as the value type and then will in copy when the function call or other use operation\n\n#### Slice\nSlice maybe more like a pointer in c like **int\\*** to point a memory area , so in Go it's same as C language , the slice we can assume as the alias for the pointer of array . And the slice has the ability for dynamic increment and decrement , so we can use the **make()** function to create an empty slice, the slice will have the capacity and the init capacity , use the make to create . And we can use the **len()** to ge the element counts in a slice and use the **cap()** to get the capacity of the slice.\n\n```GO\nconst ArrayVal [10]int = {1,2,3,4,5,6,7,8,9,10} \n\nsliceVal1 := []int{1,2,3,4,5}\n\nsliceVal2 = ArrayVal[:5]\n\nsliceVal3 = ArrayVal[2:5]\n\nappendSlice = make([]int , 5, 10)\nappendSlice = append(appendSlice , ArrayVal[0:5])\nappendSlice = append(appendSlice , []int{1,2,3})\n// then the value is 1,2,3,4,5,1,2,3\n```\n\nAnd the **copy()** function will copy the elements from first slice to second slice and if the length of two slice is not equality then will based on the short array.\n\n#### Map \nIt's more like the container in Java and C++ , In Java is java.util.Map interface and in C++ it's the std:map ,but in Go it's supported native from the go engine , That is also a reason I use Go to contribute the next project .\n\nThere is a simple demo use Map\n\n```GO\npackage main\nimport \"fmt\"\n\ntype Person struct{\n    ID string\n    Name string \n    Age int32\n}\n\nfunc main(){\n    var personMap map[string] Person\n    personMap = make(map[string] Person)\n\n    personMap[\"LeeMaster\"] = Person{\"12345\",\"LeeMaster\",23}\n\n    person,ok := personMap[\"LeeMaster\"]\n\n    if ok {\n        fmt.Printf(\"%s,%s,%d\",person.Name,person.ID,person.Age)\n    } else {\n        fmt.Printf(\"Not found\")\n    }\n\n    delete(personMap,\"LeeMaster\")\n}\n```\n\nIt's simple to use map type ,like java , but the native method insert and get is very effective and brefily . And delete the element by the key use the **delete()** function to do the same thing in java . \n\n## Control Flow\n\n### if statement\n\n```GO\nif true {\n    // true statements \n} else {\n    // false statements \n}\n\n```\n\nBut it's difficult from java or other lanaguage , Golang don't support the return statement in the if statement .\n\nIn Java : \n\n```Java\npublic int judgeElement(int ele){\n    if(ele > 5){\n        return ele;\n    }else{\n        return 0;\n    }\n}\n```\n\nIn Go :\n\n```GO\nfunc (ele int32) (re int32){\n    if ele > 5 {\n        re = ele\n    } else {\n        re = 0\n    }   \n}\n```\nmore details will show in the next chapter about the functions \n\n### loop statement\n\nNow in Go we just need the iterator to use !\n\nwe just have only keyword **for**\n\n```GO\nfor{\n    fmt.Println(\"Dead Loop\")\n}\n\nfor i := 0 ; i < 10 ;i++{\n     fmt.Println(\"Ten Loop\")\n}\n\nvar demoMap map[string] string\ndemoMap = make(map[string] string)\n\ndemoMap[\"Hello\"] = \"word\"\n// ....\n\nfor k , v := range demoMap{\n    fmt.Printf(\"%s,%s\",k,v)\n}\n```\n\nIn the Go loop statement we don't need the iterator and the interface for use , like the vector<int> :: iterator ,and Java Iterator\n\n### jump statement \n\nLike C goto will use the deep loop to jump \n\n### switch statement\n\nThis statement is like the other language to do so \n\n```GO\nswitch i {\n    case 1 :\n        fmt.Println(\"1\")\n    case 2:\n        fallthrough\n    case 3:\n        fmt.Println(\"3\")\n    case 4,5,6:\n        fmt.Println(\"4,5,6\")\n    default:\n        fmt.Println(\"Default\")\n}\n```\n\n**fallthrough** keyword can let the program to execute the next statement to do , like the situation in C we don't add the break in switch . And Go can also to use many switch case like above 4,5,6 \n\n## Function Usage\n\nFunction is the base for the stracture program and it can orginaze the all logic code in a brefy way , and can wrapp the all data and the flow to do the same thing in many control flow. In function programming Function will as the base member in the all program and then will use the to be the arguments in other functions and as a return value ,we call these function as a closure.\n\n### Function Define\n\nIn Go the function define in the below way .\n\n```GO\nfunc funcNoArgs(){\n    fmt.Println(\"No Return value\")\n}\n\nfunc funcNoArgsReturn() int{\n    return 1\n}\n\nfunc funcManyReturn()(name string,age int){\n    return \"LeeMaster\" , 23\n}\n\nfunc funcManyReturn2()(string,int){\n    return \"LeeMaster\" , 23\n}\n\nfunc funcManyArgs(args ...int) int{\n    var res int\n    res = 0\n    for _,item := range args{\n        res += item\n    }\n    return res \n}\n\nfunc funcAnyType(format string,args ...interface{}){\n\n}\n\n```\n\nIn the demo code we can see many define methods for Function , we can use indeterminacy arguments and many return value not use the struct like in Java use class or interface to return the wrapper .\n\nAnd we can use the interface to translate any types to this function and then we can handle the any type to do many things \n\n### Function Call\n\nwe call a function as Java and C but we can use **_** to put away the return value we don't need \n\n### Function Arguments\n\nGo language support more than one arguments in the same types which we can't ensure before we call the functions the demo is above in the chapter ***Function Define*** \n\nAnd Go also support the arguments the type we don't ensure and then we can use the **interface{}** to infer it\n\n### Function Return Value\n\nFunction return value is also same as the Java and C ,but we don't need receive the all values return from a function , also we don't need translate the class or other struct type to wrapper the function handle result. We call this character as many return value.\n\n### Anonymous Function and Closure\n\nIn Go the function will be seen as a value or pointer to use and translate , we can do as these situation \n\n```GO\nfuncAnoy := func(age int,name string){\n    fmt.Printf(\"%s age is %d \\n\",name,age)\n}\n\nfunc funcCall(){\n    funcAnoy(23,\"LeeMaster\")\n}\n\n```\n\nThe closure is a method to carry the variable from a function to another function and save the situation and will use in the next function ,then we can use the closure.\n\nAnd anoymous function is a method to support the closeure \n\n## Handle Exception\n\n### error interface \n\nIn Go as same as in Java , there is a interface that refer to the error type ,in java we will create our own Exception inplements the Exception interface , but in go we don't need to declare any statement to implements the error interface in expilict , the Go type system support the OOD and OOP use a simple method.\n\n```GO\ntype error interface{\n    Error() string\n}\n```\n\nThis interface will refer to an error and then we need to create our own error to implements the interface method.\n\nfor example \n\n```GO\ntype OwnError struct{\n    Value interface{}\n    Op int\n    Err error\n}\n\nfunc (o * OwnError) Error() string{\n    return o.Value + o.Op + o.Err.Error()\n}\n```\n\nwe don't have any keyword in Go to declare the interface define .\n\n### defer \n\nIn Java and C we need close the file stream after the operation for a file write or read and \nuse defer as try finally block do so .\n\n```GO\nfunc copyFunc(dst,src string)(w int64 , err,error){\n    srcFile , err := os.Open(src)\n    if(err != nil){\n        return \n    }\n    defer srcFile.Close()\n    //...\n}\n```\n\nafter the file open then we need to close the hanlder of this file so we need defer to close the handler \n\n### panic and recover \n\n**panic** is not same as the **os.Exit()** panic will print the wrong string and then jump to the defer register handlers and use the LIFO order to handle . panic confirm that the same goruntinue defer will trigger in the LIFO order , but don't do in the other goruntinue.\n\nThe panic will stop the process in one goruntinue and then will call the defer handler , the defer must register a function and then will get the error type and then chose the handler function which we defined in the same file.\n\nWhen a type or struct inner function implements the interface function then we say the type is satisfies the interface that is differnet from the Java or other .\n\nAnd in the go program the type system say that thing which define the any struct object implement a interface inner function or method then we assume that the struct is the duck type as the interfce implementation then we can use this class in any whare , but the panic will record the error when the class don't define the methods in the interface we should implement in the last time .And we can do this thinking in the Objectve-C in OC we can belive that the class don't have real type system as Java and the functions call most like the message delivery then the message don't find the handler that the inner handler don't throw any wrongs or error in the time just don't do execute this method.\n\nThere are some examples :\n\n```GO\npackage main\n\nimport \"fmt\"\n\nfunc deferFunc(){\n    defer func(){\n        if err := recover();err != nil{\n            fmt.Println(err)\n        }\n    }()\n    panic(\"Panic start\")\n}\n\nfunc main(){\n    deferFunc()\n    fmt.Println(\"Next Trick\")\n}\n```\n\nas this code the panic will use and in the main process the panic will throw the exception and then will let the wrong or error to the defer and then will do the same in the next trick\n\nAnd we can see the deep thing , that when a exception raise in the program and then we can check the exception type and then we can use the interface charge in type to do thins thing.\n\n```GO\n\ntype SomeError interface{\n    Handle(err interface{})\n}\n\ntype PathError struct{\n    Id string\n    Name string\n}\n\nfunc (p * PathError) Handle(err interface{}){\n    fmt.Println(p.Id,p.Name,err)\n}\n\nfunc doBusiness(){\n    defer func(){\n        if e := recover();e != nil{\n            if se,ok := e.(SomeError);ok{\n                se.Handle(\"catch the right wrong type \")\n            }else{\n                panic(e)\n            }\n        }\n    }()\n\n    doPanic()\n\n    fmt.Println(\"success in this function\")\n}\n\nfunc doPanic(){\n    err := &PathError{\"12,345\",\"leemaster\"}\n}\n\n```\n\nWe can use this method to handle the all exception , and then we can use the interface query to query the type real parent and then we can use this example to right handle the all panics and then will do gracefully Exception handle\n\n# Project Management\n\n## Project Structure\n\n## Project Unit Test\n\n## GOPATH\n\n## GO Cli\n","source":"_posts/Go-Tutorial-programming-in-senquence.md","raw":"---\ntitle: Go Tutorial - programming in senquence\ndate: 2018-05-19 10:40:45\ncategories:\n- Tutorial\ntags:\n- Go\n---\n\n# Why use Go\n\nBefore I was a Java developer in application of web , sometimes had tried Scala and kotlin but not like them as Go .\n\nRecent day I had join the **Meituan-Dianping** cloud computing department , and in the next time I will do something intresting in System Programming , so will use more C and Golang may be will use some Rust to complete the development in my works.\n\n<!--more-->\n\n## Annoying Garbage Collection\n\nBefore I was working with C/C++ in my student life at HEBNU , what the fuck when I use the malloc or free and also in new delete , more and more in the programming forget the free the memory then will let the program run out .\n\n## Concurrency difficult in Java \n\nAlthough the Java concurrency model is really useful in enterprise development in some action ,the package java.util.concurrency is not easy for developer to catch the key in design the system .\n\nNot only the above , but also this , the java.util.nio epoll bug is not fix up as soon, but use the cpp boost and ACE frame is not easy to do some thing effective and then I want choose a program language not only contain the base abstraction but also own the effective ability in concurrency and socket programming .\n\nlet's Go !!!!! \n\n# Go base process \n\n## Base Grammer\n\n* package \n\nthe go pragram will in time run in the main package and the package is the base to manage the library like python and java\n\n* import \n\nuse this keyword will let us to use more effictive library from other developers \n\n* func \n\n```GO\nfunc main(){\n    fmt.Printf(\"Hello word\")\n}\n```\nlike this statement will use the function in action and there are more details in the next chapter \n\n* standar library \n\nGo standar library is very good in practice and I will introduce them in the next articles\n\n## Compile Enviroment\n\n* go run ***.go\n\nuse this run command will tell the go to compile and link and then run the go program\n\n## Variable and Constant\n\n### Variable\nIn every lanaguage the most important thing is define the variable in use , not only the static but the automatic variable and then will use in many way to sign the variable and other.\n\nHere are some Demo\n\n```GO\nvar intVal int\nvar strVal string\n\nvar arrVal1 [10]int\nvar arrVal2 [10]string\n\nvar arrSlice []int \n\nvar maoVal map[string]int\n\nvar funcVal func(par int) int\n\nvar(\n    defVal1 int \n    defVal2 int \n)\n\ninferVal1 := 10\ninferVal2 := \"string\"\n\n```\nThis above code display a base method to define the variable in action .\n\n```GO\nfunc getName() (firstName,midName,lastName string){\n    return \"leemaster\",\"lee\",\"XiaoYu\"\n}\n\n_,_,lastName = getName()\n\nfmt.Printf(lastName)\n```\nanonymity variable like above and then will use **_** to receive then will let the last to get the variable we really need\n\nAnd then we want know the base variable type such as **int、uint、int32、 int64、float32、float64、complex64、complex128**\n\n### Constant\n\nConstant may be same as the constant in java or other program language\n\n```GO\nconst Pi float64 = 3.1415926\n```\n\nIt's easy to use the constant in programming and we can't use the infer in go to get the dynamic type for the constant . like thie below \n\n```GO\nconst PI := 3.1415926\n```\n\nAnd Go had set some defined constants such as **true false iota**\n\n```GO\nconst (\n    c0 = iota\n    c1 = iota \n    c2 = iota\n)\n\nconst (\n    c0 = iota\n    c1 \n    c2\n)\n```\nWhen the compiler find one time iota raised then will let the iota value to be added one and then set the value to the left value(which is the address used to be modified in C defined)\n\nSo use the **const** keyword may can be used in the in enumeration to define some constant will be used in the next program \n\n```GO\nconst (\n    Sunday = iota\n    Monday\n    Tuesday\n    Wednesday\n    Thursday\n    Friday\n    Saturday\n    numberOfDay  // this constant can't be use in the other packages \n)\n```\n\nNo enum keyword and then also can define the enumeration and then use in the package or other package , because the First capital character word can be expose to other packages.\n\n## Type System\n\nType in Go is real useful , be more easier to use in action .\n\n### Base Type \n\n* Boolean Type bool\n* Interger Type type int int32 int64 uint uintptr\n* Float Type float32 float64\n* Complex Type complex32 complex64\n* String Type string\n* Character Type rune\n* Error Type\n\n### Compound Type\n* Pointer like the pointer in C\n* Array [array_size]type\n* Slice []type\n* Map map\n* Channel chan\n* Struct struct \n* Interface \n\n### Attention\n\n* The Integer type may depend on the platform to compile the Go\n* int32 cna't be equal to the int type \n* float type like the C and Java will be init to double type (float64)\n* string in travales will in to the rune type\n* Array type will be as the value type and then will in copy when the function call or other use operation\n\n#### Slice\nSlice maybe more like a pointer in c like **int\\*** to point a memory area , so in Go it's same as C language , the slice we can assume as the alias for the pointer of array . And the slice has the ability for dynamic increment and decrement , so we can use the **make()** function to create an empty slice, the slice will have the capacity and the init capacity , use the make to create . And we can use the **len()** to ge the element counts in a slice and use the **cap()** to get the capacity of the slice.\n\n```GO\nconst ArrayVal [10]int = {1,2,3,4,5,6,7,8,9,10} \n\nsliceVal1 := []int{1,2,3,4,5}\n\nsliceVal2 = ArrayVal[:5]\n\nsliceVal3 = ArrayVal[2:5]\n\nappendSlice = make([]int , 5, 10)\nappendSlice = append(appendSlice , ArrayVal[0:5])\nappendSlice = append(appendSlice , []int{1,2,3})\n// then the value is 1,2,3,4,5,1,2,3\n```\n\nAnd the **copy()** function will copy the elements from first slice to second slice and if the length of two slice is not equality then will based on the short array.\n\n#### Map \nIt's more like the container in Java and C++ , In Java is java.util.Map interface and in C++ it's the std:map ,but in Go it's supported native from the go engine , That is also a reason I use Go to contribute the next project .\n\nThere is a simple demo use Map\n\n```GO\npackage main\nimport \"fmt\"\n\ntype Person struct{\n    ID string\n    Name string \n    Age int32\n}\n\nfunc main(){\n    var personMap map[string] Person\n    personMap = make(map[string] Person)\n\n    personMap[\"LeeMaster\"] = Person{\"12345\",\"LeeMaster\",23}\n\n    person,ok := personMap[\"LeeMaster\"]\n\n    if ok {\n        fmt.Printf(\"%s,%s,%d\",person.Name,person.ID,person.Age)\n    } else {\n        fmt.Printf(\"Not found\")\n    }\n\n    delete(personMap,\"LeeMaster\")\n}\n```\n\nIt's simple to use map type ,like java , but the native method insert and get is very effective and brefily . And delete the element by the key use the **delete()** function to do the same thing in java . \n\n## Control Flow\n\n### if statement\n\n```GO\nif true {\n    // true statements \n} else {\n    // false statements \n}\n\n```\n\nBut it's difficult from java or other lanaguage , Golang don't support the return statement in the if statement .\n\nIn Java : \n\n```Java\npublic int judgeElement(int ele){\n    if(ele > 5){\n        return ele;\n    }else{\n        return 0;\n    }\n}\n```\n\nIn Go :\n\n```GO\nfunc (ele int32) (re int32){\n    if ele > 5 {\n        re = ele\n    } else {\n        re = 0\n    }   \n}\n```\nmore details will show in the next chapter about the functions \n\n### loop statement\n\nNow in Go we just need the iterator to use !\n\nwe just have only keyword **for**\n\n```GO\nfor{\n    fmt.Println(\"Dead Loop\")\n}\n\nfor i := 0 ; i < 10 ;i++{\n     fmt.Println(\"Ten Loop\")\n}\n\nvar demoMap map[string] string\ndemoMap = make(map[string] string)\n\ndemoMap[\"Hello\"] = \"word\"\n// ....\n\nfor k , v := range demoMap{\n    fmt.Printf(\"%s,%s\",k,v)\n}\n```\n\nIn the Go loop statement we don't need the iterator and the interface for use , like the vector<int> :: iterator ,and Java Iterator\n\n### jump statement \n\nLike C goto will use the deep loop to jump \n\n### switch statement\n\nThis statement is like the other language to do so \n\n```GO\nswitch i {\n    case 1 :\n        fmt.Println(\"1\")\n    case 2:\n        fallthrough\n    case 3:\n        fmt.Println(\"3\")\n    case 4,5,6:\n        fmt.Println(\"4,5,6\")\n    default:\n        fmt.Println(\"Default\")\n}\n```\n\n**fallthrough** keyword can let the program to execute the next statement to do , like the situation in C we don't add the break in switch . And Go can also to use many switch case like above 4,5,6 \n\n## Function Usage\n\nFunction is the base for the stracture program and it can orginaze the all logic code in a brefy way , and can wrapp the all data and the flow to do the same thing in many control flow. In function programming Function will as the base member in the all program and then will use the to be the arguments in other functions and as a return value ,we call these function as a closure.\n\n### Function Define\n\nIn Go the function define in the below way .\n\n```GO\nfunc funcNoArgs(){\n    fmt.Println(\"No Return value\")\n}\n\nfunc funcNoArgsReturn() int{\n    return 1\n}\n\nfunc funcManyReturn()(name string,age int){\n    return \"LeeMaster\" , 23\n}\n\nfunc funcManyReturn2()(string,int){\n    return \"LeeMaster\" , 23\n}\n\nfunc funcManyArgs(args ...int) int{\n    var res int\n    res = 0\n    for _,item := range args{\n        res += item\n    }\n    return res \n}\n\nfunc funcAnyType(format string,args ...interface{}){\n\n}\n\n```\n\nIn the demo code we can see many define methods for Function , we can use indeterminacy arguments and many return value not use the struct like in Java use class or interface to return the wrapper .\n\nAnd we can use the interface to translate any types to this function and then we can handle the any type to do many things \n\n### Function Call\n\nwe call a function as Java and C but we can use **_** to put away the return value we don't need \n\n### Function Arguments\n\nGo language support more than one arguments in the same types which we can't ensure before we call the functions the demo is above in the chapter ***Function Define*** \n\nAnd Go also support the arguments the type we don't ensure and then we can use the **interface{}** to infer it\n\n### Function Return Value\n\nFunction return value is also same as the Java and C ,but we don't need receive the all values return from a function , also we don't need translate the class or other struct type to wrapper the function handle result. We call this character as many return value.\n\n### Anonymous Function and Closure\n\nIn Go the function will be seen as a value or pointer to use and translate , we can do as these situation \n\n```GO\nfuncAnoy := func(age int,name string){\n    fmt.Printf(\"%s age is %d \\n\",name,age)\n}\n\nfunc funcCall(){\n    funcAnoy(23,\"LeeMaster\")\n}\n\n```\n\nThe closure is a method to carry the variable from a function to another function and save the situation and will use in the next function ,then we can use the closure.\n\nAnd anoymous function is a method to support the closeure \n\n## Handle Exception\n\n### error interface \n\nIn Go as same as in Java , there is a interface that refer to the error type ,in java we will create our own Exception inplements the Exception interface , but in go we don't need to declare any statement to implements the error interface in expilict , the Go type system support the OOD and OOP use a simple method.\n\n```GO\ntype error interface{\n    Error() string\n}\n```\n\nThis interface will refer to an error and then we need to create our own error to implements the interface method.\n\nfor example \n\n```GO\ntype OwnError struct{\n    Value interface{}\n    Op int\n    Err error\n}\n\nfunc (o * OwnError) Error() string{\n    return o.Value + o.Op + o.Err.Error()\n}\n```\n\nwe don't have any keyword in Go to declare the interface define .\n\n### defer \n\nIn Java and C we need close the file stream after the operation for a file write or read and \nuse defer as try finally block do so .\n\n```GO\nfunc copyFunc(dst,src string)(w int64 , err,error){\n    srcFile , err := os.Open(src)\n    if(err != nil){\n        return \n    }\n    defer srcFile.Close()\n    //...\n}\n```\n\nafter the file open then we need to close the hanlder of this file so we need defer to close the handler \n\n### panic and recover \n\n**panic** is not same as the **os.Exit()** panic will print the wrong string and then jump to the defer register handlers and use the LIFO order to handle . panic confirm that the same goruntinue defer will trigger in the LIFO order , but don't do in the other goruntinue.\n\nThe panic will stop the process in one goruntinue and then will call the defer handler , the defer must register a function and then will get the error type and then chose the handler function which we defined in the same file.\n\nWhen a type or struct inner function implements the interface function then we say the type is satisfies the interface that is differnet from the Java or other .\n\nAnd in the go program the type system say that thing which define the any struct object implement a interface inner function or method then we assume that the struct is the duck type as the interfce implementation then we can use this class in any whare , but the panic will record the error when the class don't define the methods in the interface we should implement in the last time .And we can do this thinking in the Objectve-C in OC we can belive that the class don't have real type system as Java and the functions call most like the message delivery then the message don't find the handler that the inner handler don't throw any wrongs or error in the time just don't do execute this method.\n\nThere are some examples :\n\n```GO\npackage main\n\nimport \"fmt\"\n\nfunc deferFunc(){\n    defer func(){\n        if err := recover();err != nil{\n            fmt.Println(err)\n        }\n    }()\n    panic(\"Panic start\")\n}\n\nfunc main(){\n    deferFunc()\n    fmt.Println(\"Next Trick\")\n}\n```\n\nas this code the panic will use and in the main process the panic will throw the exception and then will let the wrong or error to the defer and then will do the same in the next trick\n\nAnd we can see the deep thing , that when a exception raise in the program and then we can check the exception type and then we can use the interface charge in type to do thins thing.\n\n```GO\n\ntype SomeError interface{\n    Handle(err interface{})\n}\n\ntype PathError struct{\n    Id string\n    Name string\n}\n\nfunc (p * PathError) Handle(err interface{}){\n    fmt.Println(p.Id,p.Name,err)\n}\n\nfunc doBusiness(){\n    defer func(){\n        if e := recover();e != nil{\n            if se,ok := e.(SomeError);ok{\n                se.Handle(\"catch the right wrong type \")\n            }else{\n                panic(e)\n            }\n        }\n    }()\n\n    doPanic()\n\n    fmt.Println(\"success in this function\")\n}\n\nfunc doPanic(){\n    err := &PathError{\"12,345\",\"leemaster\"}\n}\n\n```\n\nWe can use this method to handle the all exception , and then we can use the interface query to query the type real parent and then we can use this example to right handle the all panics and then will do gracefully Exception handle\n\n# Project Management\n\n## Project Structure\n\n## Project Unit Test\n\n## GOPATH\n\n## GO Cli\n","slug":"Go-Tutorial-programming-in-senquence","published":1,"updated":"2018-06-01T08:07:45.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85r000u4624tjt6e9ex","content":"<h1 id=\"Why-use-Go\"><a href=\"#Why-use-Go\" class=\"headerlink\" title=\"Why use Go\"></a>Why use Go</h1><p>Before I was a Java developer in application of web , sometimes had tried Scala and kotlin but not like them as Go .</p>\n<p>Recent day I had join the <strong>Meituan-Dianping</strong> cloud computing department , and in the next time I will do something intresting in System Programming , so will use more C and Golang may be will use some Rust to complete the development in my works.</p>\n<a id=\"more\"></a>\n<h2 id=\"Annoying-Garbage-Collection\"><a href=\"#Annoying-Garbage-Collection\" class=\"headerlink\" title=\"Annoying Garbage Collection\"></a>Annoying Garbage Collection</h2><p>Before I was working with C/C++ in my student life at HEBNU , what the fuck when I use the malloc or free and also in new delete , more and more in the programming forget the free the memory then will let the program run out .</p>\n<h2 id=\"Concurrency-difficult-in-Java\"><a href=\"#Concurrency-difficult-in-Java\" class=\"headerlink\" title=\"Concurrency difficult in Java\"></a>Concurrency difficult in Java</h2><p>Although the Java concurrency model is really useful in enterprise development in some action ,the package java.util.concurrency is not easy for developer to catch the key in design the system .</p>\n<p>Not only the above , but also this , the java.util.nio epoll bug is not fix up as soon, but use the cpp boost and ACE frame is not easy to do some thing effective and then I want choose a program language not only contain the base abstraction but also own the effective ability in concurrency and socket programming .</p>\n<p>let’s Go !!!!! </p>\n<h1 id=\"Go-base-process\"><a href=\"#Go-base-process\" class=\"headerlink\" title=\"Go base process\"></a>Go base process</h1><h2 id=\"Base-Grammer\"><a href=\"#Base-Grammer\" class=\"headerlink\" title=\"Base Grammer\"></a>Base Grammer</h2><ul>\n<li>package </li>\n</ul>\n<p>the go pragram will in time run in the main package and the package is the base to manage the library like python and java</p>\n<ul>\n<li>import </li>\n</ul>\n<p>use this keyword will let us to use more effictive library from other developers </p>\n<ul>\n<li>func </li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Hello word\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>like this statement will use the function in action and there are more details in the next chapter </p>\n<ul>\n<li>standar library </li>\n</ul>\n<p>Go standar library is very good in practice and I will introduce them in the next articles</p>\n<h2 id=\"Compile-Enviroment\"><a href=\"#Compile-Enviroment\" class=\"headerlink\" title=\"Compile Enviroment\"></a>Compile Enviroment</h2><ul>\n<li>go run <em>*</em>.go</li>\n</ul>\n<p>use this run command will tell the go to compile and link and then run the go program</p>\n<h2 id=\"Variable-and-Constant\"><a href=\"#Variable-and-Constant\" class=\"headerlink\" title=\"Variable and Constant\"></a>Variable and Constant</h2><h3 id=\"Variable\"><a href=\"#Variable\" class=\"headerlink\" title=\"Variable\"></a>Variable</h3><p>In every lanaguage the most important thing is define the variable in use , not only the static but the automatic variable and then will use in many way to sign the variable and other.</p>\n<p>Here are some Demo</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intVal <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strVal <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrVal1 [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrVal2 [<span class=\"number\">10</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrSlice []<span class=\"keyword\">int</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> maoVal <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcVal <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(par <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">var</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    defVal1 <span class=\"keyword\">int</span> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    defVal2 <span class=\"keyword\">int</span> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">inferVal1</span> := 10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">inferVal2</span> := \"<span class=\"title\">string</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>This above code display a base method to define the variable in action .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getName</span><span class=\"params\">()</span> <span class=\"params\">(firstName,midName,lastName <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"leemaster\"</span>,<span class=\"string\">\"lee\"</span>,<span class=\"string\">\"XiaoYu\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_,_,lastName = getName()</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(lastName)</span><br></pre></td></tr></table></figure>\n<p>anonymity variable like above and then will use <strong>_</strong> to receive then will let the last to get the variable we really need</p>\n<p>And then we want know the base variable type such as <strong>int、uint、int32、 int64、float32、float64、complex64、complex128</strong></p>\n<h3 id=\"Constant\"><a href=\"#Constant\" class=\"headerlink\" title=\"Constant\"></a>Constant</h3><p>Constant may be same as the constant in java or other program language</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Pi <span class=\"keyword\">float64</span> = <span class=\"number\">3.1415926</span></span><br></pre></td></tr></table></figure>\n<p>It’s easy to use the constant in programming and we can’t use the infer in go to get the dynamic type for the constant . like thie below </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PI := <span class=\"number\">3.1415926</span></span><br></pre></td></tr></table></figure>\n<p>And Go had set some defined constants such as <strong>true false iota</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    c0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    c1 = <span class=\"literal\">iota</span> </span><br><span class=\"line\">    c2 = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    c0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    c1 </span><br><span class=\"line\">    c2</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>When the compiler find one time iota raised then will let the iota value to be added one and then set the value to the left value(which is the address used to be modified in C defined)</p>\n<p>So use the <strong>const</strong> keyword may can be used in the in enumeration to define some constant will be used in the next program </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    Sunday = <span class=\"literal\">iota</span></span><br><span class=\"line\">    Monday</span><br><span class=\"line\">    Tuesday</span><br><span class=\"line\">    Wednesday</span><br><span class=\"line\">    Thursday</span><br><span class=\"line\">    Friday</span><br><span class=\"line\">    Saturday</span><br><span class=\"line\">    numberOfDay  <span class=\"comment\">// this constant can't be use in the other packages </span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>No enum keyword and then also can define the enumeration and then use in the package or other package , because the First capital character word can be expose to other packages.</p>\n<h2 id=\"Type-System\"><a href=\"#Type-System\" class=\"headerlink\" title=\"Type System\"></a>Type System</h2><p>Type in Go is real useful , be more easier to use in action .</p>\n<h3 id=\"Base-Type\"><a href=\"#Base-Type\" class=\"headerlink\" title=\"Base Type\"></a>Base Type</h3><ul>\n<li>Boolean Type bool</li>\n<li>Interger Type type int int32 int64 uint uintptr</li>\n<li>Float Type float32 float64</li>\n<li>Complex Type complex32 complex64</li>\n<li>String Type string</li>\n<li>Character Type rune</li>\n<li>Error Type</li>\n</ul>\n<h3 id=\"Compound-Type\"><a href=\"#Compound-Type\" class=\"headerlink\" title=\"Compound Type\"></a>Compound Type</h3><ul>\n<li>Pointer like the pointer in C</li>\n<li>Array [array_size]type</li>\n<li>Slice []type</li>\n<li>Map map</li>\n<li>Channel chan</li>\n<li>Struct struct </li>\n<li>Interface </li>\n</ul>\n<h3 id=\"Attention\"><a href=\"#Attention\" class=\"headerlink\" title=\"Attention\"></a>Attention</h3><ul>\n<li>The Integer type may depend on the platform to compile the Go</li>\n<li>int32 cna’t be equal to the int type </li>\n<li>float type like the C and Java will be init to double type (float64)</li>\n<li>string in travales will in to the rune type</li>\n<li>Array type will be as the value type and then will in copy when the function call or other use operation</li>\n</ul>\n<h4 id=\"Slice\"><a href=\"#Slice\" class=\"headerlink\" title=\"Slice\"></a>Slice</h4><p>Slice maybe more like a pointer in c like <strong>int*</strong> to point a memory area , so in Go it’s same as C language , the slice we can assume as the alias for the pointer of array . And the slice has the ability for dynamic increment and decrement , so we can use the <strong>make()</strong> function to create an empty slice, the slice will have the capacity and the init capacity , use the make to create . And we can use the <strong>len()</strong> to ge the element counts in a slice and use the <strong>cap()</strong> to get the capacity of the slice.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ArrayVal [<span class=\"number\">10</span>]<span class=\"keyword\">int</span> = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">sliceVal1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sliceVal2 = ArrayVal[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">sliceVal3 = ArrayVal[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">appendSlice = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span> , <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">appendSlice = <span class=\"built_in\">append</span>(appendSlice , ArrayVal[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">appendSlice = <span class=\"built_in\">append</span>(appendSlice , []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// then the value is 1,2,3,4,5,1,2,3</span></span><br></pre></td></tr></table></figure>\n<p>And the <strong>copy()</strong> function will copy the elements from first slice to second slice and if the length of two slice is not equality then will based on the short array.</p>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>It’s more like the container in Java and C++ , In Java is java.util.Map interface and in C++ it’s the std:map ,but in Go it’s supported native from the go engine , That is also a reason I use Go to contribute the next project .</p>\n<p>There is a simple demo use Map</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    ID <span class=\"keyword\">string</span></span><br><span class=\"line\">    Name <span class=\"keyword\">string</span> </span><br><span class=\"line\">    Age <span class=\"keyword\">int32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> personMap <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] Person</span><br><span class=\"line\">    personMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] Person)</span><br><span class=\"line\"></span><br><span class=\"line\">    personMap[<span class=\"string\">\"LeeMaster\"</span>] = Person&#123;<span class=\"string\">\"12345\"</span>,<span class=\"string\">\"LeeMaster\"</span>,<span class=\"number\">23</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    person,ok := personMap[<span class=\"string\">\"LeeMaster\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"%s,%s,%d\"</span>,person.Name,person.ID,person.Age)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"Not found\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(personMap,<span class=\"string\">\"LeeMaster\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It’s simple to use map type ,like java , but the native method insert and get is very effective and brefily . And delete the element by the key use the <strong>delete()</strong> function to do the same thing in java . </p>\n<h2 id=\"Control-Flow\"><a href=\"#Control-Flow\" class=\"headerlink\" title=\"Control Flow\"></a>Control Flow</h2><h3 id=\"if-statement\"><a href=\"#if-statement\" class=\"headerlink\" title=\"if statement\"></a>if statement</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// true statements </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// false statements </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But it’s difficult from java or other lanaguage , Golang don’t support the return statement in the if statement .</p>\n<p>In Java : </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">judgeElement</span><span class=\"params\">(<span class=\"keyword\">int</span> ele)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ele &gt; <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In Go :</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ele <span class=\"keyword\">int32</span>)</span> <span class=\"params\">(re <span class=\"keyword\">int32</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ele &gt; <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        re = ele</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        re = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>more details will show in the next chapter about the functions </p>\n<h3 id=\"loop-statement\"><a href=\"#loop-statement\" class=\"headerlink\" title=\"loop statement\"></a>loop statement</h3><p>Now in Go we just need the iterator to use !</p>\n<p>we just have only keyword <strong>for</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Dead Loop\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ;i++&#123;</span><br><span class=\"line\">     fmt.Println(<span class=\"string\">\"Ten Loop\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> demoMap <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">string</span></span><br><span class=\"line\">demoMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demoMap[<span class=\"string\">\"Hello\"</span>] = <span class=\"string\">\"word\"</span></span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k , v := <span class=\"keyword\">range</span> demoMap&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%s,%s\"</span>,k,v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In the Go loop statement we don’t need the iterator and the interface for use , like the vector<int> :: iterator ,and Java Iterator</int></p>\n<h3 id=\"jump-statement\"><a href=\"#jump-statement\" class=\"headerlink\" title=\"jump statement\"></a>jump statement</h3><p>Like C goto will use the deep loop to jump </p>\n<h3 id=\"switch-statement\"><a href=\"#switch-statement\" class=\"headerlink\" title=\"switch statement\"></a>switch statement</h3><p>This statement is like the other language to do so </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> i &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>:</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"4,5,6\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Default\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>fallthrough</strong> keyword can let the program to execute the next statement to do , like the situation in C we don’t add the break in switch . And Go can also to use many switch case like above 4,5,6 </p>\n<h2 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h2><p>Function is the base for the stracture program and it can orginaze the all logic code in a brefy way , and can wrapp the all data and the flow to do the same thing in many control flow. In function programming Function will as the base member in the all program and then will use the to be the arguments in other functions and as a return value ,we call these function as a closure.</p>\n<h3 id=\"Function-Define\"><a href=\"#Function-Define\" class=\"headerlink\" title=\"Function Define\"></a>Function Define</h3><p>In Go the function define in the below way .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcNoArgs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"No Return value\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcNoArgsReturn</span><span class=\"params\">()</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcManyReturn</span><span class=\"params\">()</span><span class=\"params\">(name <span class=\"keyword\">string</span>,age <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"LeeMaster\"</span> , <span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcManyReturn2</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">string</span>,<span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"LeeMaster\"</span> , <span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcManyArgs</span><span class=\"params\">(args ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res <span class=\"keyword\">int</span></span><br><span class=\"line\">    res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _,item := <span class=\"keyword\">range</span> args&#123;</span><br><span class=\"line\">        res += item</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcAnyType</span><span class=\"params\">(format <span class=\"keyword\">string</span>,args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In the demo code we can see many define methods for Function , we can use indeterminacy arguments and many return value not use the struct like in Java use class or interface to return the wrapper .</p>\n<p>And we can use the interface to translate any types to this function and then we can handle the any type to do many things </p>\n<h3 id=\"Function-Call\"><a href=\"#Function-Call\" class=\"headerlink\" title=\"Function Call\"></a>Function Call</h3><p>we call a function as Java and C but we can use <strong>_</strong> to put away the return value we don’t need </p>\n<h3 id=\"Function-Arguments\"><a href=\"#Function-Arguments\" class=\"headerlink\" title=\"Function Arguments\"></a>Function Arguments</h3><p>Go language support more than one arguments in the same types which we can’t ensure before we call the functions the demo is above in the chapter <strong><em>Function Define</em></strong> </p>\n<p>And Go also support the arguments the type we don’t ensure and then we can use the <strong>interface{}</strong> to infer it</p>\n<h3 id=\"Function-Return-Value\"><a href=\"#Function-Return-Value\" class=\"headerlink\" title=\"Function Return Value\"></a>Function Return Value</h3><p>Function return value is also same as the Java and C ,but we don’t need receive the all values return from a function , also we don’t need translate the class or other struct type to wrapper the function handle result. We call this character as many return value.</p>\n<h3 id=\"Anonymous-Function-and-Closure\"><a href=\"#Anonymous-Function-and-Closure\" class=\"headerlink\" title=\"Anonymous Function and Closure\"></a>Anonymous Function and Closure</h3><p>In Go the function will be seen as a value or pointer to use and translate , we can do as these situation </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funcAnoy := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(age <span class=\"keyword\">int</span>,name <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%s age is %d \\n\"</span>,name,age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcCall</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    funcAnoy(<span class=\"number\">23</span>,<span class=\"string\">\"LeeMaster\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The closure is a method to carry the variable from a function to another function and save the situation and will use in the next function ,then we can use the closure.</p>\n<p>And anoymous function is a method to support the closeure </p>\n<h2 id=\"Handle-Exception\"><a href=\"#Handle-Exception\" class=\"headerlink\" title=\"Handle Exception\"></a>Handle Exception</h2><h3 id=\"error-interface\"><a href=\"#error-interface\" class=\"headerlink\" title=\"error interface\"></a>error interface</h3><p>In Go as same as in Java , there is a interface that refer to the error type ,in java we will create our own Exception inplements the Exception interface , but in go we don’t need to declare any statement to implements the error interface in expilict , the Go type system support the OOD and OOP use a simple method.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> error <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Error() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This interface will refer to an error and then we need to create our own error to implements the interface method.</p>\n<p>for example </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> OwnError <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Value <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    Op <span class=\"keyword\">int</span></span><br><span class=\"line\">    Err error</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o * OwnError)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o.Value + o.Op + o.Err.Error()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we don’t have any keyword in Go to declare the interface define .</p>\n<h3 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h3><p>In Java and C we need close the file stream after the operation for a file write or read and<br>use defer as try finally block do so .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">copyFunc</span><span class=\"params\">(dst,src <span class=\"keyword\">string</span>)</span><span class=\"params\">(w <span class=\"keyword\">int64</span> , err,error)</span></span>&#123;</span><br><span class=\"line\">    srcFile , err := os.Open(src)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err != <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> srcFile.Close()</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>after the file open then we need to close the hanlder of this file so we need defer to close the handler </p>\n<h3 id=\"panic-and-recover\"><a href=\"#panic-and-recover\" class=\"headerlink\" title=\"panic and recover\"></a>panic and recover</h3><p><strong>panic</strong> is not same as the <strong>os.Exit()</strong> panic will print the wrong string and then jump to the defer register handlers and use the LIFO order to handle . panic confirm that the same goruntinue defer will trigger in the LIFO order , but don’t do in the other goruntinue.</p>\n<p>The panic will stop the process in one goruntinue and then will call the defer handler , the defer must register a function and then will get the error type and then chose the handler function which we defined in the same file.</p>\n<p>When a type or struct inner function implements the interface function then we say the type is satisfies the interface that is differnet from the Java or other .</p>\n<p>And in the go program the type system say that thing which define the any struct object implement a interface inner function or method then we assume that the struct is the duck type as the interfce implementation then we can use this class in any whare , but the panic will record the error when the class don’t define the methods in the interface we should implement in the last time .And we can do this thinking in the Objectve-C in OC we can belive that the class don’t have real type system as Java and the functions call most like the message delivery then the message don’t find the handler that the inner handler don’t throw any wrongs or error in the time just don’t do execute this method.</p>\n<p>There are some examples :</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferFunc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>();err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            fmt.Println(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"Panic start\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    deferFunc()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Next Trick\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>as this code the panic will use and in the main process the panic will throw the exception and then will let the wrong or error to the defer and then will do the same in the next trick</p>\n<p>And we can see the deep thing , that when a exception raise in the program and then we can check the exception type and then we can use the interface charge in type to do thins thing.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SomeError <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Handle(err <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> PathError <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">string</span></span><br><span class=\"line\">    Name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p * PathError)</span> <span class=\"title\">Handle</span><span class=\"params\">(err <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(p.Id,p.Name,err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doBusiness</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e := <span class=\"built_in\">recover</span>();e != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> se,ok := e.(SomeError);ok&#123;</span><br><span class=\"line\">                se.Handle(<span class=\"string\">\"catch the right wrong type \"</span>)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    doPanic()</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"success in this function\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doPanic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    err := &amp;PathError&#123;<span class=\"string\">\"12,345\"</span>,<span class=\"string\">\"leemaster\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can use this method to handle the all exception , and then we can use the interface query to query the type real parent and then we can use this example to right handle the all panics and then will do gracefully Exception handle</p>\n<h1 id=\"Project-Management\"><a href=\"#Project-Management\" class=\"headerlink\" title=\"Project Management\"></a>Project Management</h1><h2 id=\"Project-Structure\"><a href=\"#Project-Structure\" class=\"headerlink\" title=\"Project Structure\"></a>Project Structure</h2><h2 id=\"Project-Unit-Test\"><a href=\"#Project-Unit-Test\" class=\"headerlink\" title=\"Project Unit Test\"></a>Project Unit Test</h2><h2 id=\"GOPATH\"><a href=\"#GOPATH\" class=\"headerlink\" title=\"GOPATH\"></a>GOPATH</h2><h2 id=\"GO-Cli\"><a href=\"#GO-Cli\" class=\"headerlink\" title=\"GO Cli\"></a>GO Cli</h2>","site":{"data":{}},"excerpt":"<h1 id=\"Why-use-Go\"><a href=\"#Why-use-Go\" class=\"headerlink\" title=\"Why use Go\"></a>Why use Go</h1><p>Before I was a Java developer in application of web , sometimes had tried Scala and kotlin but not like them as Go .</p>\n<p>Recent day I had join the <strong>Meituan-Dianping</strong> cloud computing department , and in the next time I will do something intresting in System Programming , so will use more C and Golang may be will use some Rust to complete the development in my works.</p>","more":"<h2 id=\"Annoying-Garbage-Collection\"><a href=\"#Annoying-Garbage-Collection\" class=\"headerlink\" title=\"Annoying Garbage Collection\"></a>Annoying Garbage Collection</h2><p>Before I was working with C/C++ in my student life at HEBNU , what the fuck when I use the malloc or free and also in new delete , more and more in the programming forget the free the memory then will let the program run out .</p>\n<h2 id=\"Concurrency-difficult-in-Java\"><a href=\"#Concurrency-difficult-in-Java\" class=\"headerlink\" title=\"Concurrency difficult in Java\"></a>Concurrency difficult in Java</h2><p>Although the Java concurrency model is really useful in enterprise development in some action ,the package java.util.concurrency is not easy for developer to catch the key in design the system .</p>\n<p>Not only the above , but also this , the java.util.nio epoll bug is not fix up as soon, but use the cpp boost and ACE frame is not easy to do some thing effective and then I want choose a program language not only contain the base abstraction but also own the effective ability in concurrency and socket programming .</p>\n<p>let’s Go !!!!! </p>\n<h1 id=\"Go-base-process\"><a href=\"#Go-base-process\" class=\"headerlink\" title=\"Go base process\"></a>Go base process</h1><h2 id=\"Base-Grammer\"><a href=\"#Base-Grammer\" class=\"headerlink\" title=\"Base Grammer\"></a>Base Grammer</h2><ul>\n<li>package </li>\n</ul>\n<p>the go pragram will in time run in the main package and the package is the base to manage the library like python and java</p>\n<ul>\n<li>import </li>\n</ul>\n<p>use this keyword will let us to use more effictive library from other developers </p>\n<ul>\n<li>func </li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Hello word\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>like this statement will use the function in action and there are more details in the next chapter </p>\n<ul>\n<li>standar library </li>\n</ul>\n<p>Go standar library is very good in practice and I will introduce them in the next articles</p>\n<h2 id=\"Compile-Enviroment\"><a href=\"#Compile-Enviroment\" class=\"headerlink\" title=\"Compile Enviroment\"></a>Compile Enviroment</h2><ul>\n<li>go run <em>*</em>.go</li>\n</ul>\n<p>use this run command will tell the go to compile and link and then run the go program</p>\n<h2 id=\"Variable-and-Constant\"><a href=\"#Variable-and-Constant\" class=\"headerlink\" title=\"Variable and Constant\"></a>Variable and Constant</h2><h3 id=\"Variable\"><a href=\"#Variable\" class=\"headerlink\" title=\"Variable\"></a>Variable</h3><p>In every lanaguage the most important thing is define the variable in use , not only the static but the automatic variable and then will use in many way to sign the variable and other.</p>\n<p>Here are some Demo</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intVal <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strVal <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrVal1 [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrVal2 [<span class=\"number\">10</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrSlice []<span class=\"keyword\">int</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> maoVal <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcVal <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(par <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">var</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    defVal1 <span class=\"keyword\">int</span> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    defVal2 <span class=\"keyword\">int</span> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">inferVal1</span> := 10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">inferVal2</span> := \"<span class=\"title\">string</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>This above code display a base method to define the variable in action .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getName</span><span class=\"params\">()</span> <span class=\"params\">(firstName,midName,lastName <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"leemaster\"</span>,<span class=\"string\">\"lee\"</span>,<span class=\"string\">\"XiaoYu\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_,_,lastName = getName()</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(lastName)</span><br></pre></td></tr></table></figure>\n<p>anonymity variable like above and then will use <strong>_</strong> to receive then will let the last to get the variable we really need</p>\n<p>And then we want know the base variable type such as <strong>int、uint、int32、 int64、float32、float64、complex64、complex128</strong></p>\n<h3 id=\"Constant\"><a href=\"#Constant\" class=\"headerlink\" title=\"Constant\"></a>Constant</h3><p>Constant may be same as the constant in java or other program language</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Pi <span class=\"keyword\">float64</span> = <span class=\"number\">3.1415926</span></span><br></pre></td></tr></table></figure>\n<p>It’s easy to use the constant in programming and we can’t use the infer in go to get the dynamic type for the constant . like thie below </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PI := <span class=\"number\">3.1415926</span></span><br></pre></td></tr></table></figure>\n<p>And Go had set some defined constants such as <strong>true false iota</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    c0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    c1 = <span class=\"literal\">iota</span> </span><br><span class=\"line\">    c2 = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    c0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    c1 </span><br><span class=\"line\">    c2</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>When the compiler find one time iota raised then will let the iota value to be added one and then set the value to the left value(which is the address used to be modified in C defined)</p>\n<p>So use the <strong>const</strong> keyword may can be used in the in enumeration to define some constant will be used in the next program </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    Sunday = <span class=\"literal\">iota</span></span><br><span class=\"line\">    Monday</span><br><span class=\"line\">    Tuesday</span><br><span class=\"line\">    Wednesday</span><br><span class=\"line\">    Thursday</span><br><span class=\"line\">    Friday</span><br><span class=\"line\">    Saturday</span><br><span class=\"line\">    numberOfDay  <span class=\"comment\">// this constant can't be use in the other packages </span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>No enum keyword and then also can define the enumeration and then use in the package or other package , because the First capital character word can be expose to other packages.</p>\n<h2 id=\"Type-System\"><a href=\"#Type-System\" class=\"headerlink\" title=\"Type System\"></a>Type System</h2><p>Type in Go is real useful , be more easier to use in action .</p>\n<h3 id=\"Base-Type\"><a href=\"#Base-Type\" class=\"headerlink\" title=\"Base Type\"></a>Base Type</h3><ul>\n<li>Boolean Type bool</li>\n<li>Interger Type type int int32 int64 uint uintptr</li>\n<li>Float Type float32 float64</li>\n<li>Complex Type complex32 complex64</li>\n<li>String Type string</li>\n<li>Character Type rune</li>\n<li>Error Type</li>\n</ul>\n<h3 id=\"Compound-Type\"><a href=\"#Compound-Type\" class=\"headerlink\" title=\"Compound Type\"></a>Compound Type</h3><ul>\n<li>Pointer like the pointer in C</li>\n<li>Array [array_size]type</li>\n<li>Slice []type</li>\n<li>Map map</li>\n<li>Channel chan</li>\n<li>Struct struct </li>\n<li>Interface </li>\n</ul>\n<h3 id=\"Attention\"><a href=\"#Attention\" class=\"headerlink\" title=\"Attention\"></a>Attention</h3><ul>\n<li>The Integer type may depend on the platform to compile the Go</li>\n<li>int32 cna’t be equal to the int type </li>\n<li>float type like the C and Java will be init to double type (float64)</li>\n<li>string in travales will in to the rune type</li>\n<li>Array type will be as the value type and then will in copy when the function call or other use operation</li>\n</ul>\n<h4 id=\"Slice\"><a href=\"#Slice\" class=\"headerlink\" title=\"Slice\"></a>Slice</h4><p>Slice maybe more like a pointer in c like <strong>int*</strong> to point a memory area , so in Go it’s same as C language , the slice we can assume as the alias for the pointer of array . And the slice has the ability for dynamic increment and decrement , so we can use the <strong>make()</strong> function to create an empty slice, the slice will have the capacity and the init capacity , use the make to create . And we can use the <strong>len()</strong> to ge the element counts in a slice and use the <strong>cap()</strong> to get the capacity of the slice.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ArrayVal [<span class=\"number\">10</span>]<span class=\"keyword\">int</span> = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">sliceVal1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sliceVal2 = ArrayVal[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">sliceVal3 = ArrayVal[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">appendSlice = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span> , <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">appendSlice = <span class=\"built_in\">append</span>(appendSlice , ArrayVal[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">appendSlice = <span class=\"built_in\">append</span>(appendSlice , []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// then the value is 1,2,3,4,5,1,2,3</span></span><br></pre></td></tr></table></figure>\n<p>And the <strong>copy()</strong> function will copy the elements from first slice to second slice and if the length of two slice is not equality then will based on the short array.</p>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>It’s more like the container in Java and C++ , In Java is java.util.Map interface and in C++ it’s the std:map ,but in Go it’s supported native from the go engine , That is also a reason I use Go to contribute the next project .</p>\n<p>There is a simple demo use Map</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    ID <span class=\"keyword\">string</span></span><br><span class=\"line\">    Name <span class=\"keyword\">string</span> </span><br><span class=\"line\">    Age <span class=\"keyword\">int32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> personMap <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] Person</span><br><span class=\"line\">    personMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] Person)</span><br><span class=\"line\"></span><br><span class=\"line\">    personMap[<span class=\"string\">\"LeeMaster\"</span>] = Person&#123;<span class=\"string\">\"12345\"</span>,<span class=\"string\">\"LeeMaster\"</span>,<span class=\"number\">23</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    person,ok := personMap[<span class=\"string\">\"LeeMaster\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"%s,%s,%d\"</span>,person.Name,person.ID,person.Age)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"Not found\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(personMap,<span class=\"string\">\"LeeMaster\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It’s simple to use map type ,like java , but the native method insert and get is very effective and brefily . And delete the element by the key use the <strong>delete()</strong> function to do the same thing in java . </p>\n<h2 id=\"Control-Flow\"><a href=\"#Control-Flow\" class=\"headerlink\" title=\"Control Flow\"></a>Control Flow</h2><h3 id=\"if-statement\"><a href=\"#if-statement\" class=\"headerlink\" title=\"if statement\"></a>if statement</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// true statements </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// false statements </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But it’s difficult from java or other lanaguage , Golang don’t support the return statement in the if statement .</p>\n<p>In Java : </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">judgeElement</span><span class=\"params\">(<span class=\"keyword\">int</span> ele)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ele &gt; <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In Go :</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ele <span class=\"keyword\">int32</span>)</span> <span class=\"params\">(re <span class=\"keyword\">int32</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ele &gt; <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        re = ele</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        re = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>more details will show in the next chapter about the functions </p>\n<h3 id=\"loop-statement\"><a href=\"#loop-statement\" class=\"headerlink\" title=\"loop statement\"></a>loop statement</h3><p>Now in Go we just need the iterator to use !</p>\n<p>we just have only keyword <strong>for</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Dead Loop\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ;i++&#123;</span><br><span class=\"line\">     fmt.Println(<span class=\"string\">\"Ten Loop\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> demoMap <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">string</span></span><br><span class=\"line\">demoMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demoMap[<span class=\"string\">\"Hello\"</span>] = <span class=\"string\">\"word\"</span></span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k , v := <span class=\"keyword\">range</span> demoMap&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%s,%s\"</span>,k,v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In the Go loop statement we don’t need the iterator and the interface for use , like the vector<int> :: iterator ,and Java Iterator</int></p>\n<h3 id=\"jump-statement\"><a href=\"#jump-statement\" class=\"headerlink\" title=\"jump statement\"></a>jump statement</h3><p>Like C goto will use the deep loop to jump </p>\n<h3 id=\"switch-statement\"><a href=\"#switch-statement\" class=\"headerlink\" title=\"switch statement\"></a>switch statement</h3><p>This statement is like the other language to do so </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> i &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>:</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"4,5,6\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Default\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>fallthrough</strong> keyword can let the program to execute the next statement to do , like the situation in C we don’t add the break in switch . And Go can also to use many switch case like above 4,5,6 </p>\n<h2 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h2><p>Function is the base for the stracture program and it can orginaze the all logic code in a brefy way , and can wrapp the all data and the flow to do the same thing in many control flow. In function programming Function will as the base member in the all program and then will use the to be the arguments in other functions and as a return value ,we call these function as a closure.</p>\n<h3 id=\"Function-Define\"><a href=\"#Function-Define\" class=\"headerlink\" title=\"Function Define\"></a>Function Define</h3><p>In Go the function define in the below way .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcNoArgs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"No Return value\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcNoArgsReturn</span><span class=\"params\">()</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcManyReturn</span><span class=\"params\">()</span><span class=\"params\">(name <span class=\"keyword\">string</span>,age <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"LeeMaster\"</span> , <span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcManyReturn2</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">string</span>,<span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"LeeMaster\"</span> , <span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcManyArgs</span><span class=\"params\">(args ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res <span class=\"keyword\">int</span></span><br><span class=\"line\">    res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _,item := <span class=\"keyword\">range</span> args&#123;</span><br><span class=\"line\">        res += item</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcAnyType</span><span class=\"params\">(format <span class=\"keyword\">string</span>,args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In the demo code we can see many define methods for Function , we can use indeterminacy arguments and many return value not use the struct like in Java use class or interface to return the wrapper .</p>\n<p>And we can use the interface to translate any types to this function and then we can handle the any type to do many things </p>\n<h3 id=\"Function-Call\"><a href=\"#Function-Call\" class=\"headerlink\" title=\"Function Call\"></a>Function Call</h3><p>we call a function as Java and C but we can use <strong>_</strong> to put away the return value we don’t need </p>\n<h3 id=\"Function-Arguments\"><a href=\"#Function-Arguments\" class=\"headerlink\" title=\"Function Arguments\"></a>Function Arguments</h3><p>Go language support more than one arguments in the same types which we can’t ensure before we call the functions the demo is above in the chapter <strong><em>Function Define</em></strong> </p>\n<p>And Go also support the arguments the type we don’t ensure and then we can use the <strong>interface{}</strong> to infer it</p>\n<h3 id=\"Function-Return-Value\"><a href=\"#Function-Return-Value\" class=\"headerlink\" title=\"Function Return Value\"></a>Function Return Value</h3><p>Function return value is also same as the Java and C ,but we don’t need receive the all values return from a function , also we don’t need translate the class or other struct type to wrapper the function handle result. We call this character as many return value.</p>\n<h3 id=\"Anonymous-Function-and-Closure\"><a href=\"#Anonymous-Function-and-Closure\" class=\"headerlink\" title=\"Anonymous Function and Closure\"></a>Anonymous Function and Closure</h3><p>In Go the function will be seen as a value or pointer to use and translate , we can do as these situation </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funcAnoy := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(age <span class=\"keyword\">int</span>,name <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%s age is %d \\n\"</span>,name,age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcCall</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    funcAnoy(<span class=\"number\">23</span>,<span class=\"string\">\"LeeMaster\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The closure is a method to carry the variable from a function to another function and save the situation and will use in the next function ,then we can use the closure.</p>\n<p>And anoymous function is a method to support the closeure </p>\n<h2 id=\"Handle-Exception\"><a href=\"#Handle-Exception\" class=\"headerlink\" title=\"Handle Exception\"></a>Handle Exception</h2><h3 id=\"error-interface\"><a href=\"#error-interface\" class=\"headerlink\" title=\"error interface\"></a>error interface</h3><p>In Go as same as in Java , there is a interface that refer to the error type ,in java we will create our own Exception inplements the Exception interface , but in go we don’t need to declare any statement to implements the error interface in expilict , the Go type system support the OOD and OOP use a simple method.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> error <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Error() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This interface will refer to an error and then we need to create our own error to implements the interface method.</p>\n<p>for example </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> OwnError <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Value <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    Op <span class=\"keyword\">int</span></span><br><span class=\"line\">    Err error</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o * OwnError)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o.Value + o.Op + o.Err.Error()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we don’t have any keyword in Go to declare the interface define .</p>\n<h3 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h3><p>In Java and C we need close the file stream after the operation for a file write or read and<br>use defer as try finally block do so .</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">copyFunc</span><span class=\"params\">(dst,src <span class=\"keyword\">string</span>)</span><span class=\"params\">(w <span class=\"keyword\">int64</span> , err,error)</span></span>&#123;</span><br><span class=\"line\">    srcFile , err := os.Open(src)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err != <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> srcFile.Close()</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>after the file open then we need to close the hanlder of this file so we need defer to close the handler </p>\n<h3 id=\"panic-and-recover\"><a href=\"#panic-and-recover\" class=\"headerlink\" title=\"panic and recover\"></a>panic and recover</h3><p><strong>panic</strong> is not same as the <strong>os.Exit()</strong> panic will print the wrong string and then jump to the defer register handlers and use the LIFO order to handle . panic confirm that the same goruntinue defer will trigger in the LIFO order , but don’t do in the other goruntinue.</p>\n<p>The panic will stop the process in one goruntinue and then will call the defer handler , the defer must register a function and then will get the error type and then chose the handler function which we defined in the same file.</p>\n<p>When a type or struct inner function implements the interface function then we say the type is satisfies the interface that is differnet from the Java or other .</p>\n<p>And in the go program the type system say that thing which define the any struct object implement a interface inner function or method then we assume that the struct is the duck type as the interfce implementation then we can use this class in any whare , but the panic will record the error when the class don’t define the methods in the interface we should implement in the last time .And we can do this thinking in the Objectve-C in OC we can belive that the class don’t have real type system as Java and the functions call most like the message delivery then the message don’t find the handler that the inner handler don’t throw any wrongs or error in the time just don’t do execute this method.</p>\n<p>There are some examples :</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferFunc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>();err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            fmt.Println(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"Panic start\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    deferFunc()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Next Trick\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>as this code the panic will use and in the main process the panic will throw the exception and then will let the wrong or error to the defer and then will do the same in the next trick</p>\n<p>And we can see the deep thing , that when a exception raise in the program and then we can check the exception type and then we can use the interface charge in type to do thins thing.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SomeError <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Handle(err <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> PathError <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">string</span></span><br><span class=\"line\">    Name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p * PathError)</span> <span class=\"title\">Handle</span><span class=\"params\">(err <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(p.Id,p.Name,err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doBusiness</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e := <span class=\"built_in\">recover</span>();e != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> se,ok := e.(SomeError);ok&#123;</span><br><span class=\"line\">                se.Handle(<span class=\"string\">\"catch the right wrong type \"</span>)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    doPanic()</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"success in this function\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doPanic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    err := &amp;PathError&#123;<span class=\"string\">\"12,345\"</span>,<span class=\"string\">\"leemaster\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can use this method to handle the all exception , and then we can use the interface query to query the type real parent and then we can use this example to right handle the all panics and then will do gracefully Exception handle</p>\n<h1 id=\"Project-Management\"><a href=\"#Project-Management\" class=\"headerlink\" title=\"Project Management\"></a>Project Management</h1><h2 id=\"Project-Structure\"><a href=\"#Project-Structure\" class=\"headerlink\" title=\"Project Structure\"></a>Project Structure</h2><h2 id=\"Project-Unit-Test\"><a href=\"#Project-Unit-Test\" class=\"headerlink\" title=\"Project Unit Test\"></a>Project Unit Test</h2><h2 id=\"GOPATH\"><a href=\"#GOPATH\" class=\"headerlink\" title=\"GOPATH\"></a>GOPATH</h2><h2 id=\"GO-Cli\"><a href=\"#GO-Cli\" class=\"headerlink\" title=\"GO Cli\"></a>GO Cli</h2>"},{"title":"Linux Programming Error handle","date":"2018-05-21T21:50:30.000Z","_content":"\n# C Error handler\n\nNot same as Java like , C don't have the try-catch block to catch the exception in runtime ,so sometime we should keep the promise that we will input a pointer to point the error variables in use .\n\n<!--more-->\n\nFor example \n\n```c\nint get_err(int param,int * err)\n{\n    if(param < 0){\n        err = 1;\n        return 0;\n    }else{\n        err = 0;\n        return 1;\n    }\n}\n```\n\nThis function we define to charge if the param is gratter than the zero , if it's letter than the zero we throw a exception in the way assign a 0 to err variable pointer.\n\nIn call \n\n```c\nint main()\n{\n    int err = 0;\n    get_err(-1,&err);\n    if(err){\n        printf(\"less than zero\");\n    }else{\n        printf(\"gratter than zero\");\n    }\n}\n```\n\nUse this promise we can define the function to get an exception .\n\n# Linux Error\n\nBut somethime we need know the reason of the exception why the error raise intime ,so we need a global variables to save the error reason or code to get more details .\n\nAs we know the global variables can save in the global scope ,so the errno variables can be use in anywhere of the program and we can use the extern keyword to extern and use the variable and then the system call can set the errno to identify the details of an exception.\n\nBut now I don't find the location where decalre the errno variable and I can do a fearless assumption that when the system create a process then will declare a int errno in the data segment and then we can use the segment by extern keyword to get the reference of this variable to use in our business code .\n\nAnd we can use the system call **strerror()** to get more detail information of the error.\n\nFor example \n\n```c\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint main()\n{\n    extern int errno;\n\n    int fd ;\n\n    if((fd = open(\"path\",O_WRONLY)) == -1){\n        printf(\"%d -- %s \\n\",errno,strrror(errno));\n    }else{\n        printf(\"open successfully\\n\");\n        close(fd);\n    }\n\n}\n```\n\nThe errno will be seted in a int type to define the error type , and then use the strerror can get some details in a brefy way.\n \n# In Practice\n\nIn system programming we can use this method to get the details of an error , and we can decide which we next to do by the errno type , and then we don't need keep a promise that we decalre a function in the way we define before .","source":"_posts/Linux-Programming-Error-handle.md","raw":"---\ntitle: Linux Programming Error handle\ndate: 2018-05-21 21:50:30\ncategories:\n- Linux Programming\ntags:\n- system call\n---\n\n# C Error handler\n\nNot same as Java like , C don't have the try-catch block to catch the exception in runtime ,so sometime we should keep the promise that we will input a pointer to point the error variables in use .\n\n<!--more-->\n\nFor example \n\n```c\nint get_err(int param,int * err)\n{\n    if(param < 0){\n        err = 1;\n        return 0;\n    }else{\n        err = 0;\n        return 1;\n    }\n}\n```\n\nThis function we define to charge if the param is gratter than the zero , if it's letter than the zero we throw a exception in the way assign a 0 to err variable pointer.\n\nIn call \n\n```c\nint main()\n{\n    int err = 0;\n    get_err(-1,&err);\n    if(err){\n        printf(\"less than zero\");\n    }else{\n        printf(\"gratter than zero\");\n    }\n}\n```\n\nUse this promise we can define the function to get an exception .\n\n# Linux Error\n\nBut somethime we need know the reason of the exception why the error raise intime ,so we need a global variables to save the error reason or code to get more details .\n\nAs we know the global variables can save in the global scope ,so the errno variables can be use in anywhere of the program and we can use the extern keyword to extern and use the variable and then the system call can set the errno to identify the details of an exception.\n\nBut now I don't find the location where decalre the errno variable and I can do a fearless assumption that when the system create a process then will declare a int errno in the data segment and then we can use the segment by extern keyword to get the reference of this variable to use in our business code .\n\nAnd we can use the system call **strerror()** to get more detail information of the error.\n\nFor example \n\n```c\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint main()\n{\n    extern int errno;\n\n    int fd ;\n\n    if((fd = open(\"path\",O_WRONLY)) == -1){\n        printf(\"%d -- %s \\n\",errno,strrror(errno));\n    }else{\n        printf(\"open successfully\\n\");\n        close(fd);\n    }\n\n}\n```\n\nThe errno will be seted in a int type to define the error type , and then use the strerror can get some details in a brefy way.\n \n# In Practice\n\nIn system programming we can use this method to get the details of an error , and we can decide which we next to do by the errno type , and then we don't need keep a promise that we decalre a function in the way we define before .","slug":"Linux-Programming-Error-handle","published":1,"updated":"2018-05-22T02:40:28.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85s000y4624epvu5ydt","content":"<h1 id=\"C-Error-handler\"><a href=\"#C-Error-handler\" class=\"headerlink\" title=\"C Error handler\"></a>C Error handler</h1><p>Not same as Java like , C don’t have the try-catch block to catch the exception in runtime ,so sometime we should keep the promise that we will input a pointer to point the error variables in use .</p>\n<a id=\"more\"></a>\n<p>For example </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_err</span><span class=\"params\">(<span class=\"keyword\">int</span> param,<span class=\"keyword\">int</span> * err)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(param &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        err = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        err = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This function we define to charge if the param is gratter than the zero , if it’s letter than the zero we throw a exception in the way assign a 0 to err variable pointer.</p>\n<p>In call </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> err = <span class=\"number\">0</span>;</span><br><span class=\"line\">    get_err(<span class=\"number\">-1</span>,&amp;err);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"less than zero\"</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"gratter than zero\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use this promise we can define the function to get an exception .</p>\n<h1 id=\"Linux-Error\"><a href=\"#Linux-Error\" class=\"headerlink\" title=\"Linux Error\"></a>Linux Error</h1><p>But somethime we need know the reason of the exception why the error raise intime ,so we need a global variables to save the error reason or code to get more details .</p>\n<p>As we know the global variables can save in the global scope ,so the errno variables can be use in anywhere of the program and we can use the extern keyword to extern and use the variable and then the system call can set the errno to identify the details of an exception.</p>\n<p>But now I don’t find the location where decalre the errno variable and I can do a fearless assumption that when the system create a process then will declare a int errno in the data segment and then we can use the segment by extern keyword to get the reference of this variable to use in our business code .</p>\n<p>And we can use the system call <strong>strerror()</strong> to get more detail information of the error.</p>\n<p>For example </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> errno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((fd = open(<span class=\"string\">\"path\"</span>,O_WRONLY)) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d -- %s \\n\"</span>,errno,strrror(errno));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"open successfully\\n\"</span>);</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The errno will be seted in a int type to define the error type , and then use the strerror can get some details in a brefy way.</p>\n<h1 id=\"In-Practice\"><a href=\"#In-Practice\" class=\"headerlink\" title=\"In Practice\"></a>In Practice</h1><p>In system programming we can use this method to get the details of an error , and we can decide which we next to do by the errno type , and then we don’t need keep a promise that we decalre a function in the way we define before .</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"C-Error-handler\"><a href=\"#C-Error-handler\" class=\"headerlink\" title=\"C Error handler\"></a>C Error handler</h1><p>Not same as Java like , C don’t have the try-catch block to catch the exception in runtime ,so sometime we should keep the promise that we will input a pointer to point the error variables in use .</p>","more":"<p>For example </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_err</span><span class=\"params\">(<span class=\"keyword\">int</span> param,<span class=\"keyword\">int</span> * err)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(param &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        err = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        err = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This function we define to charge if the param is gratter than the zero , if it’s letter than the zero we throw a exception in the way assign a 0 to err variable pointer.</p>\n<p>In call </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> err = <span class=\"number\">0</span>;</span><br><span class=\"line\">    get_err(<span class=\"number\">-1</span>,&amp;err);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"less than zero\"</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"gratter than zero\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use this promise we can define the function to get an exception .</p>\n<h1 id=\"Linux-Error\"><a href=\"#Linux-Error\" class=\"headerlink\" title=\"Linux Error\"></a>Linux Error</h1><p>But somethime we need know the reason of the exception why the error raise intime ,so we need a global variables to save the error reason or code to get more details .</p>\n<p>As we know the global variables can save in the global scope ,so the errno variables can be use in anywhere of the program and we can use the extern keyword to extern and use the variable and then the system call can set the errno to identify the details of an exception.</p>\n<p>But now I don’t find the location where decalre the errno variable and I can do a fearless assumption that when the system create a process then will declare a int errno in the data segment and then we can use the segment by extern keyword to get the reference of this variable to use in our business code .</p>\n<p>And we can use the system call <strong>strerror()</strong> to get more detail information of the error.</p>\n<p>For example </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> errno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((fd = open(<span class=\"string\">\"path\"</span>,O_WRONLY)) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d -- %s \\n\"</span>,errno,strrror(errno));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"open successfully\\n\"</span>);</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The errno will be seted in a int type to define the error type , and then use the strerror can get some details in a brefy way.</p>\n<h1 id=\"In-Practice\"><a href=\"#In-Practice\" class=\"headerlink\" title=\"In Practice\"></a>In Practice</h1><p>In system programming we can use this method to get the details of an error , and we can decide which we next to do by the errno type , and then we don’t need keep a promise that we decalre a function in the way we define before .</p>"},{"title":"Linux Programming File operation","date":"2018-05-21T21:40:09.000Z","_content":"\n# Linux Programming File Operation \n\nFile this concept in the linux system is very common , and then we can use the file to describe everything in the linux system .\n\nThe processes will record in a directory and also some user and anything can be save or via file working . such as the socket , socket is a file describtor in linux in nature . So we can use the common operation in abstract to operate the socket , we can send some bytes and read some bytes to exchange the informations.\n\nAnd the process is also described in file , we record some base information for the process and we can also set some page and segment in use the file interface \n\n<!--more-->\n\n# Linux Design Philosophy\n\nEvery thing in the unix are files or process .\n\n![UNIX SYS](http://ww1.sinaimg.cn/mw690/0079qc5ply1frkz09q41xj31ww1cr0xj.jpg)\n\nIn this picture we can see that the system directory and file will be origanized in a tree ,we call this tree as file tree , and we can mount any other file system on this tree , such we can use usb and the system may be mount this device on the system tree , /dev/xxx , so in this way we can create many mount point to mount many device not only a single usb.\n\n# I/O system \n\nThe I/O system will be devided into two types ,one we call is the block device and another we also call them as character device . But what is the difference between the two device to record ?\n\nBlock Device , the all data will be devided into some block to save ,so the block device we can infer like CD-ROM ,HARD-DISK , the data is saved in block methods , and we need some time to find the block first , after that we can access data randomly in this block .\n\nCharacter Device , maybe ,I think the stream device will be more suitable , just like the water stream from the pipe , the character device read data from one to one , they don't know if there no characters next time ,but in some protocal we can use EOF to present the end of file ,and the character is none ,the read function can return 0 , but we can't access data randomly but in order .\n\n## Base I/O\n\nLinux/Unix have the same abstraction in file system , so they have already provide some effective and common functions for us to do the base file I/O . We can use these file operation functions to operate any file descriptor , well , the all files are represent by the file descriptor .\n\nWe can use the function to get a file descriptor and read or write ,after the all operation achive to the ending , we just need the close to close the file ,and release the all resorces.\n\n* open file \n\n```c\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint fd = open(\"path\",int flags ,... )\n```\n\nthis system call can open a new file descriptor and use the flags to define the open mode , write only read only and wronly ,and so on .\n\n* read file \n\n```c\n#include <unistd.h>\n\nchar buff[1024];\n\nint read(fd,buff,1024)\n```\n\nthis system call can read data into buffer and then return the read counts . If don't read enough this function can reaturn the count in actual.\n\n* write file\n\n```c\n#include <unistd.h>\n\nint write(fd,buffer,size)\n``` \n\nIt's same as the read but this function is write behavior , so we can use the same describtion to describe the write system call .\n\n* close file  \n\n```c\n#include <unistd.h>\n\nclose(fd)\n```\n\nclose a file descriptor .\n\n## fcntl\n\nThis system call can set some attributes fo an open file , and we can change some attribute in a file which open before .\n\n","source":"_posts/Linux-Programming-File-operation.md","raw":"---\ntitle: Linux Programming File operation\ndate: 2018-05-21 21:40:09\ncategories:\n- Linux Programming\ntags:\n- system call\n---\n\n# Linux Programming File Operation \n\nFile this concept in the linux system is very common , and then we can use the file to describe everything in the linux system .\n\nThe processes will record in a directory and also some user and anything can be save or via file working . such as the socket , socket is a file describtor in linux in nature . So we can use the common operation in abstract to operate the socket , we can send some bytes and read some bytes to exchange the informations.\n\nAnd the process is also described in file , we record some base information for the process and we can also set some page and segment in use the file interface \n\n<!--more-->\n\n# Linux Design Philosophy\n\nEvery thing in the unix are files or process .\n\n![UNIX SYS](http://ww1.sinaimg.cn/mw690/0079qc5ply1frkz09q41xj31ww1cr0xj.jpg)\n\nIn this picture we can see that the system directory and file will be origanized in a tree ,we call this tree as file tree , and we can mount any other file system on this tree , such we can use usb and the system may be mount this device on the system tree , /dev/xxx , so in this way we can create many mount point to mount many device not only a single usb.\n\n# I/O system \n\nThe I/O system will be devided into two types ,one we call is the block device and another we also call them as character device . But what is the difference between the two device to record ?\n\nBlock Device , the all data will be devided into some block to save ,so the block device we can infer like CD-ROM ,HARD-DISK , the data is saved in block methods , and we need some time to find the block first , after that we can access data randomly in this block .\n\nCharacter Device , maybe ,I think the stream device will be more suitable , just like the water stream from the pipe , the character device read data from one to one , they don't know if there no characters next time ,but in some protocal we can use EOF to present the end of file ,and the character is none ,the read function can return 0 , but we can't access data randomly but in order .\n\n## Base I/O\n\nLinux/Unix have the same abstraction in file system , so they have already provide some effective and common functions for us to do the base file I/O . We can use these file operation functions to operate any file descriptor , well , the all files are represent by the file descriptor .\n\nWe can use the function to get a file descriptor and read or write ,after the all operation achive to the ending , we just need the close to close the file ,and release the all resorces.\n\n* open file \n\n```c\n#include <sys/stat.h>\n#include <fcntl.h>\n\nint fd = open(\"path\",int flags ,... )\n```\n\nthis system call can open a new file descriptor and use the flags to define the open mode , write only read only and wronly ,and so on .\n\n* read file \n\n```c\n#include <unistd.h>\n\nchar buff[1024];\n\nint read(fd,buff,1024)\n```\n\nthis system call can read data into buffer and then return the read counts . If don't read enough this function can reaturn the count in actual.\n\n* write file\n\n```c\n#include <unistd.h>\n\nint write(fd,buffer,size)\n``` \n\nIt's same as the read but this function is write behavior , so we can use the same describtion to describe the write system call .\n\n* close file  \n\n```c\n#include <unistd.h>\n\nclose(fd)\n```\n\nclose a file descriptor .\n\n## fcntl\n\nThis system call can set some attributes fo an open file , and we can change some attribute in a file which open before .\n\n","slug":"Linux-Programming-File-operation","published":1,"updated":"2018-05-26T12:02:42.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85t00104624t52uqxjd","content":"<h1 id=\"Linux-Programming-File-Operation\"><a href=\"#Linux-Programming-File-Operation\" class=\"headerlink\" title=\"Linux Programming File Operation\"></a>Linux Programming File Operation</h1><p>File this concept in the linux system is very common , and then we can use the file to describe everything in the linux system .</p>\n<p>The processes will record in a directory and also some user and anything can be save or via file working . such as the socket , socket is a file describtor in linux in nature . So we can use the common operation in abstract to operate the socket , we can send some bytes and read some bytes to exchange the informations.</p>\n<p>And the process is also described in file , we record some base information for the process and we can also set some page and segment in use the file interface </p>\n<a id=\"more\"></a>\n<h1 id=\"Linux-Design-Philosophy\"><a href=\"#Linux-Design-Philosophy\" class=\"headerlink\" title=\"Linux Design Philosophy\"></a>Linux Design Philosophy</h1><p>Every thing in the unix are files or process .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frkz09q41xj31ww1cr0xj.jpg\" alt=\"UNIX SYS\"></p>\n<p>In this picture we can see that the system directory and file will be origanized in a tree ,we call this tree as file tree , and we can mount any other file system on this tree , such we can use usb and the system may be mount this device on the system tree , /dev/xxx , so in this way we can create many mount point to mount many device not only a single usb.</p>\n<h1 id=\"I-O-system\"><a href=\"#I-O-system\" class=\"headerlink\" title=\"I/O system\"></a>I/O system</h1><p>The I/O system will be devided into two types ,one we call is the block device and another we also call them as character device . But what is the difference between the two device to record ?</p>\n<p>Block Device , the all data will be devided into some block to save ,so the block device we can infer like CD-ROM ,HARD-DISK , the data is saved in block methods , and we need some time to find the block first , after that we can access data randomly in this block .</p>\n<p>Character Device , maybe ,I think the stream device will be more suitable , just like the water stream from the pipe , the character device read data from one to one , they don’t know if there no characters next time ,but in some protocal we can use EOF to present the end of file ,and the character is none ,the read function can return 0 , but we can’t access data randomly but in order .</p>\n<h2 id=\"Base-I-O\"><a href=\"#Base-I-O\" class=\"headerlink\" title=\"Base I/O\"></a>Base I/O</h2><p>Linux/Unix have the same abstraction in file system , so they have already provide some effective and common functions for us to do the base file I/O . We can use these file operation functions to operate any file descriptor , well , the all files are represent by the file descriptor .</p>\n<p>We can use the function to get a file descriptor and read or write ,after the all operation achive to the ending , we just need the close to close the file ,and release the all resorces.</p>\n<ul>\n<li>open file </li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fd = open(<span class=\"string\">\"path\"</span>,<span class=\"keyword\">int</span> flags ,... )</span><br></pre></td></tr></table></figure>\n<p>this system call can open a new file descriptor and use the flags to define the open mode , write only read only and wronly ,and so on .</p>\n<ul>\n<li>read file </li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(fd,buff,<span class=\"number\">1024</span>)</span></span></span><br></pre></td></tr></table></figure>\n<p>this system call can read data into buffer and then return the read counts . If don’t read enough this function can reaturn the count in actual.</p>\n<ul>\n<li>write file</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">write</span><span class=\"params\">(fd,buffer,size)</span></span></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">It's same as the read but <span class=\"keyword\">this</span> function is write behavior , so we can use the same describtion to describe the write system call .</span><br><span class=\"line\"></span><br><span class=\"line\">* close file  </span><br><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">close(fd)</span><br></pre></td></tr></table></figure>\n<p>close a file descriptor .</p>\n<h2 id=\"fcntl\"><a href=\"#fcntl\" class=\"headerlink\" title=\"fcntl\"></a>fcntl</h2><p>This system call can set some attributes fo an open file , and we can change some attribute in a file which open before .</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Linux-Programming-File-Operation\"><a href=\"#Linux-Programming-File-Operation\" class=\"headerlink\" title=\"Linux Programming File Operation\"></a>Linux Programming File Operation</h1><p>File this concept in the linux system is very common , and then we can use the file to describe everything in the linux system .</p>\n<p>The processes will record in a directory and also some user and anything can be save or via file working . such as the socket , socket is a file describtor in linux in nature . So we can use the common operation in abstract to operate the socket , we can send some bytes and read some bytes to exchange the informations.</p>\n<p>And the process is also described in file , we record some base information for the process and we can also set some page and segment in use the file interface </p>","more":"<h1 id=\"Linux-Design-Philosophy\"><a href=\"#Linux-Design-Philosophy\" class=\"headerlink\" title=\"Linux Design Philosophy\"></a>Linux Design Philosophy</h1><p>Every thing in the unix are files or process .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frkz09q41xj31ww1cr0xj.jpg\" alt=\"UNIX SYS\"></p>\n<p>In this picture we can see that the system directory and file will be origanized in a tree ,we call this tree as file tree , and we can mount any other file system on this tree , such we can use usb and the system may be mount this device on the system tree , /dev/xxx , so in this way we can create many mount point to mount many device not only a single usb.</p>\n<h1 id=\"I-O-system\"><a href=\"#I-O-system\" class=\"headerlink\" title=\"I/O system\"></a>I/O system</h1><p>The I/O system will be devided into two types ,one we call is the block device and another we also call them as character device . But what is the difference between the two device to record ?</p>\n<p>Block Device , the all data will be devided into some block to save ,so the block device we can infer like CD-ROM ,HARD-DISK , the data is saved in block methods , and we need some time to find the block first , after that we can access data randomly in this block .</p>\n<p>Character Device , maybe ,I think the stream device will be more suitable , just like the water stream from the pipe , the character device read data from one to one , they don’t know if there no characters next time ,but in some protocal we can use EOF to present the end of file ,and the character is none ,the read function can return 0 , but we can’t access data randomly but in order .</p>\n<h2 id=\"Base-I-O\"><a href=\"#Base-I-O\" class=\"headerlink\" title=\"Base I/O\"></a>Base I/O</h2><p>Linux/Unix have the same abstraction in file system , so they have already provide some effective and common functions for us to do the base file I/O . We can use these file operation functions to operate any file descriptor , well , the all files are represent by the file descriptor .</p>\n<p>We can use the function to get a file descriptor and read or write ,after the all operation achive to the ending , we just need the close to close the file ,and release the all resorces.</p>\n<ul>\n<li>open file </li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fd = open(<span class=\"string\">\"path\"</span>,<span class=\"keyword\">int</span> flags ,... )</span><br></pre></td></tr></table></figure>\n<p>this system call can open a new file descriptor and use the flags to define the open mode , write only read only and wronly ,and so on .</p>\n<ul>\n<li>read file </li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(fd,buff,<span class=\"number\">1024</span>)</span></span></span><br></pre></td></tr></table></figure>\n<p>this system call can read data into buffer and then return the read counts . If don’t read enough this function can reaturn the count in actual.</p>\n<ul>\n<li>write file</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">write</span><span class=\"params\">(fd,buffer,size)</span></span></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">It's same as the read but <span class=\"keyword\">this</span> function is write behavior , so we can use the same describtion to describe the write system call .</span><br><span class=\"line\"></span><br><span class=\"line\">* close file  </span><br><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">close(fd)</span><br></pre></td></tr></table></figure>\n<p>close a file descriptor .</p>\n<h2 id=\"fcntl\"><a href=\"#fcntl\" class=\"headerlink\" title=\"fcntl\"></a>fcntl</h2><p>This system call can set some attributes fo an open file , and we can change some attribute in a file which open before .</p>"},{"title":"Linux Programming Socket","date":"2018-05-21T21:13:27.000Z","_content":"\n# Linux Socket programming\n\nNetwork programming can support some strightly communication use TCP/UDP which is faster and more effective than HTTP.\n\nAs we know the socket programming is more like a communication software like Wechat , need many clients and servers , server will provide the netwirk service and the client will use the service in one protocal , for example the Chrome will handle the HTTP to get the content of a Html and Dubbo framework use the TCP communication to do the same thing ,we can assume that the server is the background hero to provide the high avilable service and the client will consume the service .\n\n<!--more-->\n\nThe Socket Process like the below picture.\n\n![SOCKET STEPS](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj9v53e49j30fd0d7jth.jpg)\n\n# Prerequisite \n\n## Byte-order\n\n## Socket Function define in C\n\n# Server \n\n# Client\n","source":"_posts/Linux-Programming-Socket.md","raw":"---\ntitle: Linux Programming Socket\ndate: 2018-05-21 21:13:27\ncategories:\n- Linux Programming\ntags:\n- system call\n- socket\n---\n\n# Linux Socket programming\n\nNetwork programming can support some strightly communication use TCP/UDP which is faster and more effective than HTTP.\n\nAs we know the socket programming is more like a communication software like Wechat , need many clients and servers , server will provide the netwirk service and the client will use the service in one protocal , for example the Chrome will handle the HTTP to get the content of a Html and Dubbo framework use the TCP communication to do the same thing ,we can assume that the server is the background hero to provide the high avilable service and the client will consume the service .\n\n<!--more-->\n\nThe Socket Process like the below picture.\n\n![SOCKET STEPS](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj9v53e49j30fd0d7jth.jpg)\n\n# Prerequisite \n\n## Byte-order\n\n## Socket Function define in C\n\n# Server \n\n# Client\n","slug":"Linux-Programming-Socket","published":1,"updated":"2018-05-21T13:50:53.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85u00124624hzs18yu4","content":"<h1 id=\"Linux-Socket-programming\"><a href=\"#Linux-Socket-programming\" class=\"headerlink\" title=\"Linux Socket programming\"></a>Linux Socket programming</h1><p>Network programming can support some strightly communication use TCP/UDP which is faster and more effective than HTTP.</p>\n<p>As we know the socket programming is more like a communication software like Wechat , need many clients and servers , server will provide the netwirk service and the client will use the service in one protocal , for example the Chrome will handle the HTTP to get the content of a Html and Dubbo framework use the TCP communication to do the same thing ,we can assume that the server is the background hero to provide the high avilable service and the client will consume the service .</p>\n<a id=\"more\"></a>\n<p>The Socket Process like the below picture.</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj9v53e49j30fd0d7jth.jpg\" alt=\"SOCKET STEPS\"></p>\n<h1 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite\"></a>Prerequisite</h1><h2 id=\"Byte-order\"><a href=\"#Byte-order\" class=\"headerlink\" title=\"Byte-order\"></a>Byte-order</h2><h2 id=\"Socket-Function-define-in-C\"><a href=\"#Socket-Function-define-in-C\" class=\"headerlink\" title=\"Socket Function define in C\"></a>Socket Function define in C</h2><h1 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h1><h1 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h1>","site":{"data":{}},"excerpt":"<h1 id=\"Linux-Socket-programming\"><a href=\"#Linux-Socket-programming\" class=\"headerlink\" title=\"Linux Socket programming\"></a>Linux Socket programming</h1><p>Network programming can support some strightly communication use TCP/UDP which is faster and more effective than HTTP.</p>\n<p>As we know the socket programming is more like a communication software like Wechat , need many clients and servers , server will provide the netwirk service and the client will use the service in one protocal , for example the Chrome will handle the HTTP to get the content of a Html and Dubbo framework use the TCP communication to do the same thing ,we can assume that the server is the background hero to provide the high avilable service and the client will consume the service .</p>","more":"<p>The Socket Process like the below picture.</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj9v53e49j30fd0d7jth.jpg\" alt=\"SOCKET STEPS\"></p>\n<h1 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite\"></a>Prerequisite</h1><h2 id=\"Byte-order\"><a href=\"#Byte-order\" class=\"headerlink\" title=\"Byte-order\"></a>Byte-order</h2><h2 id=\"Socket-Function-define-in-C\"><a href=\"#Socket-Function-define-in-C\" class=\"headerlink\" title=\"Socket Function define in C\"></a>Socket Function define in C</h2><h1 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h1><h1 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h1>"},{"title":"Objective C Tutorial - I'm dieing","date":"2018-05-24T23:14:57.000Z","_content":"\n# What the fuck programming in OC\n\nRecent day , my friend ask me to help him create an IOS app to make his electronic shop to be more effective . And then I choose the Objective-C , because I think this language will be more like C and Java or C++ , unfortunately this programming language is the worest language I work with.\n\nMessage transformming ? What the fuck in action , and today after I learn this language 5 days , I just know how to create a Object and Class and how to think IOS development in OOD and use OOP to write the project in OC .\n\nI belive that I will not use this language anymore , but I have tracked in this enviroment ,I must create some notes and record the thinking in this language ! More fucking in OC ! \n\n<!--more-->\n\n# Basic Grammer \n\nvariables define and the base control flow are same like C and I don't want to waste time to talk about them .\n\n## Block \n\nThis character can let we implement the pattern called observer and then will use this grammer to create some anonymous function to use .\n\n```objc\n\ntypedef void (^CompletionBlock)();\n@interface SampleClass:NSObject\n- (void)performActionWithCompletion:(CompletionBlock)completionBlock;\n@end\n\n@implementation SampleClass\n\n- (void)performActionWithCompletion:(CompletionBlock)completionBlock{\n\n    NSLog(@\"Action Performed\");\n    completionBlock();\n}\n\n@end\n\nint main()\n{\n    /* my first program in Objective-C */\n    SampleClass *sampleClass = [[SampleClass alloc]init];\n    [sampleClass performActionWithCompletion:^{\n        NSLog(@\"Completion is called to intimate action is performed.\");\n    }];\n    \n    return 0;\n}\n```\n\nNow I finally the common function define in OC , block in OC just delivery a function pointer waiting the next trick in the function who call him, and the real function is the message delivering .\n\n## Methods or Function\n\nDecalre and define a function in my mind are not easy to get in OC , the more details will write in **Message delivery** chacpter.\n\nWe can define a function in this way \n\n```objective-c\n- (void) add :(int) a : (int) b\n{\n    NSLog(@\"%d\",a+b)\n}\n```\n\nI don't know why do this design in this language , but I gradually understand the message model to describe the actual world , in the deep learning. and the next chapter I will do more description for this character.\n\n## Define class \n\nWe can define a class as below .\n\nDeclare\n\n```objc\n@interface Person : NSObject\n{\n    @public NSString * name;\n    @public NSString * address;\n}\n\n- (id) initWithName : (NSString *) name andAddress : (NSString *) address;\n- (void) sayHello ;\n@end\n```\n\nImplementation\n\n```objc\n@implementation Person\n- (id) initWithName : (NSString *) name andAddress : (NSString *) address\n{\n    self = [super init]\n    if(self != nil){\n        self.name = name;\n        self.address = address;\n    }\n    return self; \n}\n- (void) sayHello \n{\n    NSLog(@\"Hello my name is %@ I am live in %@\",self.name,self.address);\n}\n@end\n```\n\nAnd Call in Main \n\n```objc\n\nint main()\n{\n    @autoreleasepool{\n        Person * person = [\n            [Person alloc] initWithName : @\"LeeMaster\" : andAddress : @\"SJZ\"\n        ];\n\n        [person sayHello];\n    }\n\n}\n\n```\n\nWe can define a class use the @interface keyword and implement the class and write the definetion use @implementation , and use + to define a static method and use - to define a dynamic method.\n\nCreate an instance use the init* method , and if we have the no paramters constructor we can just use thei init which is defined by the OC compiler .\n\nThe most funny thing is the message deliver grammer which make me headache these days !\n\n## Inheriting\n\nThe NSObject is the all class in OC world ancestor , so the class inherit from this class as Java class will inherit from the Object.\n\nCreate a parent class\n\n```objc\n@interface Humen : NSObject\n{\n    @protected NSString * name;\n    @protected int age;\n}\n\n- (id) initWithName : (NSString * ) name : andAge : (int) age;\n- (void) sayHello;\n@end\n\n@implementation Humen\n- (id) initWithName : (NSString * ) name : andAge : (int) age\n{\n    self.name = name;\n    self.age = age;\n    return self;\n}\n- (void) sayHello\n{\n    NSLog(@\"Hello My name is %@ and I'm %d \",self.name,self.age);\n}\n@end\n```\n\nCreate a child class\n\n```objc\n@interface Student : Humen\n{\n    @public NSString * address;\n}\n- (void) reportAddress ; \n@end\n\n@implementation Student\n- (id) initWithName : (NSString * ) name : andAge : (int) age : \n       andAddress : (NSString *) address\n{\n    self.name = name;\n    self.age = age;\n    self.address = address;\n    return self;\n}\n- (void) reportAddress\n{\n    [self sayHello];\n    NSLog(@\"My location is %@\",self.address);\n}\n@end\n```\n\n```objc\nint main()\n{\n    @autoreleasepool{\n        Student * student = [[Student alloc] initWithName : @\"LeeMaster\" andAge : 23 : adnAddress : \"SJZ\"];\n\n        [student sayHello];\n        [student reportAddress];\n    }\n}\n```\n\nWhen I wrote this code as above , I suddenly understand the message delivery grammer -- the method call , and the dunamic binding in runtime , so I can delivery a message to nil but the all program don't exit with error code .\n\n## Categories\n\nLike Golang the Objective-C also support the duck type , it belives that when a class implement a method define in the other class , this class can be saw as that class , it's easy understand the duck can speak gaga , when a person speak gaga we can see this person as a duck !\n\nSo to benifit this character we can dynamical add property and methods to a class , we defined before , so use this character we can implement a design pattern , Adaptor-Pattern ,and Bridge-Pattern also Proxy-Pattern.\n\nNow we have defined a class , which have contain the methods sayHello and reportAddress.\n\n```objc\n@interface Person : NSObject\n{\n    @public NSString * name;\n    @public NSString * address;\n}\n\n- (id) initWithName : (NSString * ) name : andAge : (NSString * ) address;\n- (void) sayHello;\n- (void) reportAddress;\n@end\n\n@implementation Person\n- (id) initWithName : (NSString * ) name : andAge : (NSString *) address\n{\n    self.name = naem;\n    self.address = address;\n    return self;\n}\n- (void) sayHello\n{\n    NSLog(@\"My Name is %@\",self.name);\n}\n- (void) reportAddress\n{\n    NSLog(@\"My address is %@\",self.adress)\n}\n@end\n```\n\nBut now we need this class can add a property and a method we can do as this way.\n\n```objc\n@interface Person(student)\n- (void) reportTime;\n@end\n\n@implementation Person(student)\n- (void) reportTime\n{\n    NSLog(@\"now time is 2018\");\n}\n@end\n```\n\nuse this cahracter we can move the method in class which contains long code lines to a new file.m and then split a class implmentation in many way and expend the origin class everytime.\n\n## Extention \n\nThe catergories let a class implementation splited into many files and to manage easily , the Extention really expand the class everytime and everywhere , and most time this character is used to make some private methods.\n\n```objc\n@interface Student : NSObject\n- (void) learning : (int) time;\n@end\n\n@interface Student()\n- (void) hardWorking;\n- (void) lazyWorking;\n@end\n\n@implementation Student\n- (void) learning : (int) time\n{\n    NSLog(@\"I'm learning\");\n    if(time >= 10){\n        [self hardWorking];\n    }else{\n        [self lazeWorking];\n    }\n}\n\n- (void) hardWorking\n{\n    NSLog(@\"I'm learning hard\");\n}\n- (void) lazyWorking\n{\n    NSLog(@\"I'm learning lazily\");\n}\n@end\n```\n\n## Interface -> Protocal\n\nAs the interface in Java and the abstact in C++ , we can belive the protocal is the interface in Objective-C and the protocal declare the methods and all implementation of this protocal must implement the methods . But in objective-c we don't need implement all methods!\n\nDelegate , I think this pattern is the best thing in OC , like the dynamic proxy in Java , we need a protocal and then define the must implement methods and then create a origin class and next create the proxy class to do some addtional thing in next thing.\n\n\n```objc\n@protocol PrintProtocolDelegate\n\n- (void)processCompleted;\n\n@end\n\n@interface PrintClass :NSObject\n{\n    id delegate;\n}\n\n- (void) printDetails;\n- (void) setDelegate:(id)newDelegate;\n@end\n```\n\n```objc\n@implementation PrintClass\n\n- (void)printDetails{\n    NSLog(@\"Printing Details\");\n    [delegate processCompleted];\n}\n\n- (void) setDelegate:(id)newDelegate{\n    delegate = newDelegate;\n}\n\n@end\n```\n\n```objc\n@interface SampleClass:NSObject<PrintProtocolDelegate>\n\n- (void)startAction;\n\n@end\n\n@implementation SampleClass\n\n- (void)startAction{\n    PrintClass *printClass = [[PrintClass alloc]init];\n    [printClass setDelegate:self];\n    [printClass printDetails];\n}\n\n-(void)processCompleted{\n    NSLog(@\"Printing Process Completed\");\n}\n\n@end\n\n```\n\n```objc\nint main(int argc, const char * argv[])\n{\n    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n    SampleClass *sampleClass = [[SampleClass alloc]init];\n    [sampleClass startAction];\n    [pool drain];\n    return 0;\n}\n```\n\nThe origin class can do some thing base , and then call delegate to do next thing , then we can use this pattern to create some program to do in Ios develop.\n\n\n## @property @synthesize\n\n### @property attribute\n\n### Usage Setter and Getter\n\nLike java  setter/getter rule ,the oc have the same rule to use ,and we can do the same thing \n\n# Message delivery\n\nNow this character is the more puzzle thing in the all programming in OC , I dont't know anything in the OOP in the real world , but in a deep thinking then I suddenly understand the method calling function .\n\nFor example , we have a mathmatic teacher and a english teacher , we aussume that the mathmatic teacher don't know how to teach english and the english teacher don't know how to teach the math , so we can write this code .\n\n```objc\n@interface MathTeacher : NSObject\n- (void) teachMath;\n@end\n\n@implementation MathTeacher\n- (void) teachMath\n{\n    NSLog(\"TEACH MATH\");\n}\n@end\n\n```\n\n```objc\n@interface EnglishTeacher : NSObject\n- (void) teachEnglish;\n@end\n\n@implementation EnglishTeacher\n- (void) teachEnglish\n{\n    NSLog(\"TEACH ENGLISH\");\n}\n@end\n``` \n\nIf we do the same thing call EnglishTeach Object to use the teachMath method ,we will get a compile error just now . But in OC we can do the thing to call EnglishTeacher teachMath method but get no error in compiling . Because the dynamic binding in runtime .\n\nBut what is the message delivery ? I think the Object in computer just a memory segment in action and then compile time we can bind the address of a method to an Object memeory model, But the real world this thing will don't present anymore , we just know a person is a teacher , but we don't need know if he can teach the math , all thing we be confirm in the time we call him to tell us how learn math .\n\nAnd the program stack , we can assume that the label paramter will be confirm and then pop the stack and to charge if the next paramter can in the identify type , and this character we call as the duck type .\n\nMessage is the parameter and a function stack ,we can transmit these thing to a stack and we can decide this paramter if we can receive , to this point we can find that is more like a closure in some dynamice programming .\n\n## Dynamic Binding \n\nDynamic binding , in Java ,can support the runtime selection for what to do next time , and select which function and method to call .\n\nIn objective-c we don't need a interface or super class to define the method to use , we belive the message is the final design in Oc , a paramter deliver to an object then the object will use the label to choose how and what to response this message , if we don't define the handler to handle message then OC will do nothing.\n\n# Foundation library","source":"_posts/Objective-C-Tutorial-I-m-dieing.md","raw":"---\ntitle: Objective C Tutorial - I'm dieing\ndate: 2018-05-24 23:14:57\ncategories:\n- Tutorial\ntags:\n- Objective c\n---\n\n# What the fuck programming in OC\n\nRecent day , my friend ask me to help him create an IOS app to make his electronic shop to be more effective . And then I choose the Objective-C , because I think this language will be more like C and Java or C++ , unfortunately this programming language is the worest language I work with.\n\nMessage transformming ? What the fuck in action , and today after I learn this language 5 days , I just know how to create a Object and Class and how to think IOS development in OOD and use OOP to write the project in OC .\n\nI belive that I will not use this language anymore , but I have tracked in this enviroment ,I must create some notes and record the thinking in this language ! More fucking in OC ! \n\n<!--more-->\n\n# Basic Grammer \n\nvariables define and the base control flow are same like C and I don't want to waste time to talk about them .\n\n## Block \n\nThis character can let we implement the pattern called observer and then will use this grammer to create some anonymous function to use .\n\n```objc\n\ntypedef void (^CompletionBlock)();\n@interface SampleClass:NSObject\n- (void)performActionWithCompletion:(CompletionBlock)completionBlock;\n@end\n\n@implementation SampleClass\n\n- (void)performActionWithCompletion:(CompletionBlock)completionBlock{\n\n    NSLog(@\"Action Performed\");\n    completionBlock();\n}\n\n@end\n\nint main()\n{\n    /* my first program in Objective-C */\n    SampleClass *sampleClass = [[SampleClass alloc]init];\n    [sampleClass performActionWithCompletion:^{\n        NSLog(@\"Completion is called to intimate action is performed.\");\n    }];\n    \n    return 0;\n}\n```\n\nNow I finally the common function define in OC , block in OC just delivery a function pointer waiting the next trick in the function who call him, and the real function is the message delivering .\n\n## Methods or Function\n\nDecalre and define a function in my mind are not easy to get in OC , the more details will write in **Message delivery** chacpter.\n\nWe can define a function in this way \n\n```objective-c\n- (void) add :(int) a : (int) b\n{\n    NSLog(@\"%d\",a+b)\n}\n```\n\nI don't know why do this design in this language , but I gradually understand the message model to describe the actual world , in the deep learning. and the next chapter I will do more description for this character.\n\n## Define class \n\nWe can define a class as below .\n\nDeclare\n\n```objc\n@interface Person : NSObject\n{\n    @public NSString * name;\n    @public NSString * address;\n}\n\n- (id) initWithName : (NSString *) name andAddress : (NSString *) address;\n- (void) sayHello ;\n@end\n```\n\nImplementation\n\n```objc\n@implementation Person\n- (id) initWithName : (NSString *) name andAddress : (NSString *) address\n{\n    self = [super init]\n    if(self != nil){\n        self.name = name;\n        self.address = address;\n    }\n    return self; \n}\n- (void) sayHello \n{\n    NSLog(@\"Hello my name is %@ I am live in %@\",self.name,self.address);\n}\n@end\n```\n\nAnd Call in Main \n\n```objc\n\nint main()\n{\n    @autoreleasepool{\n        Person * person = [\n            [Person alloc] initWithName : @\"LeeMaster\" : andAddress : @\"SJZ\"\n        ];\n\n        [person sayHello];\n    }\n\n}\n\n```\n\nWe can define a class use the @interface keyword and implement the class and write the definetion use @implementation , and use + to define a static method and use - to define a dynamic method.\n\nCreate an instance use the init* method , and if we have the no paramters constructor we can just use thei init which is defined by the OC compiler .\n\nThe most funny thing is the message deliver grammer which make me headache these days !\n\n## Inheriting\n\nThe NSObject is the all class in OC world ancestor , so the class inherit from this class as Java class will inherit from the Object.\n\nCreate a parent class\n\n```objc\n@interface Humen : NSObject\n{\n    @protected NSString * name;\n    @protected int age;\n}\n\n- (id) initWithName : (NSString * ) name : andAge : (int) age;\n- (void) sayHello;\n@end\n\n@implementation Humen\n- (id) initWithName : (NSString * ) name : andAge : (int) age\n{\n    self.name = name;\n    self.age = age;\n    return self;\n}\n- (void) sayHello\n{\n    NSLog(@\"Hello My name is %@ and I'm %d \",self.name,self.age);\n}\n@end\n```\n\nCreate a child class\n\n```objc\n@interface Student : Humen\n{\n    @public NSString * address;\n}\n- (void) reportAddress ; \n@end\n\n@implementation Student\n- (id) initWithName : (NSString * ) name : andAge : (int) age : \n       andAddress : (NSString *) address\n{\n    self.name = name;\n    self.age = age;\n    self.address = address;\n    return self;\n}\n- (void) reportAddress\n{\n    [self sayHello];\n    NSLog(@\"My location is %@\",self.address);\n}\n@end\n```\n\n```objc\nint main()\n{\n    @autoreleasepool{\n        Student * student = [[Student alloc] initWithName : @\"LeeMaster\" andAge : 23 : adnAddress : \"SJZ\"];\n\n        [student sayHello];\n        [student reportAddress];\n    }\n}\n```\n\nWhen I wrote this code as above , I suddenly understand the message delivery grammer -- the method call , and the dunamic binding in runtime , so I can delivery a message to nil but the all program don't exit with error code .\n\n## Categories\n\nLike Golang the Objective-C also support the duck type , it belives that when a class implement a method define in the other class , this class can be saw as that class , it's easy understand the duck can speak gaga , when a person speak gaga we can see this person as a duck !\n\nSo to benifit this character we can dynamical add property and methods to a class , we defined before , so use this character we can implement a design pattern , Adaptor-Pattern ,and Bridge-Pattern also Proxy-Pattern.\n\nNow we have defined a class , which have contain the methods sayHello and reportAddress.\n\n```objc\n@interface Person : NSObject\n{\n    @public NSString * name;\n    @public NSString * address;\n}\n\n- (id) initWithName : (NSString * ) name : andAge : (NSString * ) address;\n- (void) sayHello;\n- (void) reportAddress;\n@end\n\n@implementation Person\n- (id) initWithName : (NSString * ) name : andAge : (NSString *) address\n{\n    self.name = naem;\n    self.address = address;\n    return self;\n}\n- (void) sayHello\n{\n    NSLog(@\"My Name is %@\",self.name);\n}\n- (void) reportAddress\n{\n    NSLog(@\"My address is %@\",self.adress)\n}\n@end\n```\n\nBut now we need this class can add a property and a method we can do as this way.\n\n```objc\n@interface Person(student)\n- (void) reportTime;\n@end\n\n@implementation Person(student)\n- (void) reportTime\n{\n    NSLog(@\"now time is 2018\");\n}\n@end\n```\n\nuse this cahracter we can move the method in class which contains long code lines to a new file.m and then split a class implmentation in many way and expend the origin class everytime.\n\n## Extention \n\nThe catergories let a class implementation splited into many files and to manage easily , the Extention really expand the class everytime and everywhere , and most time this character is used to make some private methods.\n\n```objc\n@interface Student : NSObject\n- (void) learning : (int) time;\n@end\n\n@interface Student()\n- (void) hardWorking;\n- (void) lazyWorking;\n@end\n\n@implementation Student\n- (void) learning : (int) time\n{\n    NSLog(@\"I'm learning\");\n    if(time >= 10){\n        [self hardWorking];\n    }else{\n        [self lazeWorking];\n    }\n}\n\n- (void) hardWorking\n{\n    NSLog(@\"I'm learning hard\");\n}\n- (void) lazyWorking\n{\n    NSLog(@\"I'm learning lazily\");\n}\n@end\n```\n\n## Interface -> Protocal\n\nAs the interface in Java and the abstact in C++ , we can belive the protocal is the interface in Objective-C and the protocal declare the methods and all implementation of this protocal must implement the methods . But in objective-c we don't need implement all methods!\n\nDelegate , I think this pattern is the best thing in OC , like the dynamic proxy in Java , we need a protocal and then define the must implement methods and then create a origin class and next create the proxy class to do some addtional thing in next thing.\n\n\n```objc\n@protocol PrintProtocolDelegate\n\n- (void)processCompleted;\n\n@end\n\n@interface PrintClass :NSObject\n{\n    id delegate;\n}\n\n- (void) printDetails;\n- (void) setDelegate:(id)newDelegate;\n@end\n```\n\n```objc\n@implementation PrintClass\n\n- (void)printDetails{\n    NSLog(@\"Printing Details\");\n    [delegate processCompleted];\n}\n\n- (void) setDelegate:(id)newDelegate{\n    delegate = newDelegate;\n}\n\n@end\n```\n\n```objc\n@interface SampleClass:NSObject<PrintProtocolDelegate>\n\n- (void)startAction;\n\n@end\n\n@implementation SampleClass\n\n- (void)startAction{\n    PrintClass *printClass = [[PrintClass alloc]init];\n    [printClass setDelegate:self];\n    [printClass printDetails];\n}\n\n-(void)processCompleted{\n    NSLog(@\"Printing Process Completed\");\n}\n\n@end\n\n```\n\n```objc\nint main(int argc, const char * argv[])\n{\n    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n    SampleClass *sampleClass = [[SampleClass alloc]init];\n    [sampleClass startAction];\n    [pool drain];\n    return 0;\n}\n```\n\nThe origin class can do some thing base , and then call delegate to do next thing , then we can use this pattern to create some program to do in Ios develop.\n\n\n## @property @synthesize\n\n### @property attribute\n\n### Usage Setter and Getter\n\nLike java  setter/getter rule ,the oc have the same rule to use ,and we can do the same thing \n\n# Message delivery\n\nNow this character is the more puzzle thing in the all programming in OC , I dont't know anything in the OOP in the real world , but in a deep thinking then I suddenly understand the method calling function .\n\nFor example , we have a mathmatic teacher and a english teacher , we aussume that the mathmatic teacher don't know how to teach english and the english teacher don't know how to teach the math , so we can write this code .\n\n```objc\n@interface MathTeacher : NSObject\n- (void) teachMath;\n@end\n\n@implementation MathTeacher\n- (void) teachMath\n{\n    NSLog(\"TEACH MATH\");\n}\n@end\n\n```\n\n```objc\n@interface EnglishTeacher : NSObject\n- (void) teachEnglish;\n@end\n\n@implementation EnglishTeacher\n- (void) teachEnglish\n{\n    NSLog(\"TEACH ENGLISH\");\n}\n@end\n``` \n\nIf we do the same thing call EnglishTeach Object to use the teachMath method ,we will get a compile error just now . But in OC we can do the thing to call EnglishTeacher teachMath method but get no error in compiling . Because the dynamic binding in runtime .\n\nBut what is the message delivery ? I think the Object in computer just a memory segment in action and then compile time we can bind the address of a method to an Object memeory model, But the real world this thing will don't present anymore , we just know a person is a teacher , but we don't need know if he can teach the math , all thing we be confirm in the time we call him to tell us how learn math .\n\nAnd the program stack , we can assume that the label paramter will be confirm and then pop the stack and to charge if the next paramter can in the identify type , and this character we call as the duck type .\n\nMessage is the parameter and a function stack ,we can transmit these thing to a stack and we can decide this paramter if we can receive , to this point we can find that is more like a closure in some dynamice programming .\n\n## Dynamic Binding \n\nDynamic binding , in Java ,can support the runtime selection for what to do next time , and select which function and method to call .\n\nIn objective-c we don't need a interface or super class to define the method to use , we belive the message is the final design in Oc , a paramter deliver to an object then the object will use the label to choose how and what to response this message , if we don't define the handler to handle message then OC will do nothing.\n\n# Foundation library","slug":"Objective-C-Tutorial-I-m-dieing","published":1,"updated":"2018-05-26T12:02:40.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85v00154624d8zmpujh","content":"<h1 id=\"What-the-fuck-programming-in-OC\"><a href=\"#What-the-fuck-programming-in-OC\" class=\"headerlink\" title=\"What the fuck programming in OC\"></a>What the fuck programming in OC</h1><p>Recent day , my friend ask me to help him create an IOS app to make his electronic shop to be more effective . And then I choose the Objective-C , because I think this language will be more like C and Java or C++ , unfortunately this programming language is the worest language I work with.</p>\n<p>Message transformming ? What the fuck in action , and today after I learn this language 5 days , I just know how to create a Object and Class and how to think IOS development in OOD and use OOP to write the project in OC .</p>\n<p>I belive that I will not use this language anymore , but I have tracked in this enviroment ,I must create some notes and record the thinking in this language ! More fucking in OC ! </p>\n<a id=\"more\"></a>\n<h1 id=\"Basic-Grammer\"><a href=\"#Basic-Grammer\" class=\"headerlink\" title=\"Basic Grammer\"></a>Basic Grammer</h1><p>variables define and the base control flow are same like C and I don’t want to waste time to talk about them .</p>\n<h2 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h2><p>This character can let we implement the pattern called observer and then will use this grammer to create some anonymous function to use .</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span> (^CompletionBlock)();</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SampleClass</span>:<span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)performActionWithCompletion:(CompletionBlock)completionBlock;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SampleClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)performActionWithCompletion:(CompletionBlock)completionBlock&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Action Performed\"</span>);</span><br><span class=\"line\">    completionBlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* my first program in Objective-C */</span></span><br><span class=\"line\">    SampleClass *sampleClass = [[SampleClass alloc]init];</span><br><span class=\"line\">    [sampleClass performActionWithCompletion:^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Completion is called to intimate action is performed.\"</span>);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now I finally the common function define in OC , block in OC just delivery a function pointer waiting the next trick in the function who call him, and the real function is the message delivering .</p>\n<h2 id=\"Methods-or-Function\"><a href=\"#Methods-or-Function\" class=\"headerlink\" title=\"Methods or Function\"></a>Methods or Function</h2><p>Decalre and define a function in my mind are not easy to get in OC , the more details will write in <strong>Message delivery</strong> chacpter.</p>\n<p>We can define a function in this way </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void) add :(int) a : (int) b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;%d&quot;,a+b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I don’t know why do this design in this language , but I gradually understand the message model to describe the actual world , in the deep learning. and the next chapter I will do more description for this character.</p>\n<h2 id=\"Define-class\"><a href=\"#Define-class\" class=\"headerlink\" title=\"Define class\"></a>Define class</h2><p>We can define a class as below .</p>\n<p>Declare</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> *) name andAddress : (<span class=\"built_in\">NSString</span> *) address;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello ;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>Implementation</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> *) name andAddress : (<span class=\"built_in\">NSString</span> *) address</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span> != <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Hello my name is %@ I am live in %@\"</span>,<span class=\"keyword\">self</span>.name,<span class=\"keyword\">self</span>.address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>And Call in Main </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span>&#123;</span><br><span class=\"line\">        Person * person = [</span><br><span class=\"line\">            [Person alloc] initWithName : <span class=\"string\">@\"LeeMaster\"</span> : andAddress : <span class=\"string\">@\"SJZ\"</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        [person sayHello];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can define a class use the @interface keyword and implement the class and write the definetion use @implementation , and use + to define a static method and use - to define a dynamic method.</p>\n<p>Create an instance use the init* method , and if we have the no paramters constructor we can just use thei init which is defined by the OC compiler .</p>\n<p>The most funny thing is the message deliver grammer which make me headache these days !</p>\n<h2 id=\"Inheriting\"><a href=\"#Inheriting\" class=\"headerlink\" title=\"Inheriting\"></a>Inheriting</h2><p>The NSObject is the all class in OC world ancestor , so the class inherit from this class as Java class will inherit from the Object.</p>\n<p>Create a parent class</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Humen</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@protected</span> <span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\">    <span class=\"keyword\">@protected</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"keyword\">int</span>) age;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Humen</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"keyword\">int</span>) age</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Hello My name is %@ and I'm %d \"</span>,<span class=\"keyword\">self</span>.name,<span class=\"keyword\">self</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>Create a child class</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">Humen</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress ; </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"keyword\">int</span>) age : </span><br><span class=\"line\">       andAddress : (<span class=\"built_in\">NSString</span> *) address</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.address = address;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> sayHello];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"My location is %@\"</span>,<span class=\"keyword\">self</span>.address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span>&#123;</span><br><span class=\"line\">        Student * student = [[Student alloc] initWithName : <span class=\"string\">@\"LeeMaster\"</span> andAge : <span class=\"number\">23</span> : adnAddress : <span class=\"string\">\"SJZ\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        [student sayHello];</span><br><span class=\"line\">        [student reportAddress];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When I wrote this code as above , I suddenly understand the message delivery grammer — the method call , and the dunamic binding in runtime , so I can delivery a message to nil but the all program don’t exit with error code .</p>\n<h2 id=\"Categories\"><a href=\"#Categories\" class=\"headerlink\" title=\"Categories\"></a>Categories</h2><p>Like Golang the Objective-C also support the duck type , it belives that when a class implement a method define in the other class , this class can be saw as that class , it’s easy understand the duck can speak gaga , when a person speak gaga we can see this person as a duck !</p>\n<p>So to benifit this character we can dynamical add property and methods to a class , we defined before , so use this character we can implement a design pattern , Adaptor-Pattern ,and Bridge-Pattern also Proxy-Pattern.</p>\n<p>Now we have defined a class , which have contain the methods sayHello and reportAddress.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"built_in\">NSString</span> * ) address;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"built_in\">NSString</span> *) address</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = naem;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.address = address;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"My Name is %@\"</span>,<span class=\"keyword\">self</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"My address is %@\"</span>,<span class=\"keyword\">self</span>.adress)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>But now we need this class can add a property and a method we can do as this way.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>(<span class=\"title\">student</span>)</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportTime;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span>(<span class=\"title\">student</span>)</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportTime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"now time is 2018\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>use this cahracter we can move the method in class which contains long code lines to a new file.m and then split a class implmentation in many way and expend the origin class everytime.</p>\n<h2 id=\"Extention\"><a href=\"#Extention\" class=\"headerlink\" title=\"Extention\"></a>Extention</h2><p>The catergories let a class implementation splited into many files and to manage easily , the Extention really expand the class everytime and everywhere , and most time this character is used to make some private methods.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) learning : (<span class=\"keyword\">int</span>) time;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span>()</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) hardWorking;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) lazyWorking;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) learning : (<span class=\"keyword\">int</span>) time</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"I'm learning\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(time &gt;= <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> hardWorking];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> lazeWorking];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) hardWorking</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"I'm learning hard\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) lazyWorking</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"I'm learning lazily\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Interface-gt-Protocal\"><a href=\"#Interface-gt-Protocal\" class=\"headerlink\" title=\"Interface -&gt; Protocal\"></a>Interface -&gt; Protocal</h2><p>As the interface in Java and the abstact in C++ , we can belive the protocal is the interface in Objective-C and the protocal declare the methods and all implementation of this protocal must implement the methods . But in objective-c we don’t need implement all methods!</p>\n<p>Delegate , I think this pattern is the best thing in OC , like the dynamic proxy in Java , we need a protocal and then define the must implement methods and then create a origin class and next create the proxy class to do some addtional thing in next thing.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">PrintProtocolDelegate</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)processCompleted;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">PrintClass</span> :<span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> delegate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) printDetails;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) setDelegate:(<span class=\"keyword\">id</span>)newDelegate;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">PrintClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)printDetails&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Printing Details\"</span>);</span><br><span class=\"line\">    [delegate processCompleted];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) setDelegate:(<span class=\"keyword\">id</span>)newDelegate&#123;</span><br><span class=\"line\">    delegate = newDelegate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SampleClass</span>:<span class=\"title\">NSObject</span>&lt;<span class=\"title\">PrintProtocolDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)startAction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SampleClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)startAction&#123;</span><br><span class=\"line\">    PrintClass *printClass = [[PrintClass alloc]init];</span><br><span class=\"line\">    [printClass setDelegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    [printClass printDetails];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)processCompleted&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Printing Process Completed\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSAutoreleasePool</span> * pool = [[<span class=\"built_in\">NSAutoreleasePool</span> alloc] init];</span><br><span class=\"line\">    SampleClass *sampleClass = [[SampleClass alloc]init];</span><br><span class=\"line\">    [sampleClass startAction];</span><br><span class=\"line\">    [pool drain];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The origin class can do some thing base , and then call delegate to do next thing , then we can use this pattern to create some program to do in Ios develop.</p>\n<h2 id=\"property-synthesize\"><a href=\"#property-synthesize\" class=\"headerlink\" title=\"@property @synthesize\"></a>@property @synthesize</h2><h3 id=\"property-attribute\"><a href=\"#property-attribute\" class=\"headerlink\" title=\"@property attribute\"></a>@property attribute</h3><h3 id=\"Usage-Setter-and-Getter\"><a href=\"#Usage-Setter-and-Getter\" class=\"headerlink\" title=\"Usage Setter and Getter\"></a>Usage Setter and Getter</h3><p>Like java  setter/getter rule ,the oc have the same rule to use ,and we can do the same thing </p>\n<h1 id=\"Message-delivery\"><a href=\"#Message-delivery\" class=\"headerlink\" title=\"Message delivery\"></a>Message delivery</h1><p>Now this character is the more puzzle thing in the all programming in OC , I dont’t know anything in the OOP in the real world , but in a deep thinking then I suddenly understand the method calling function .</p>\n<p>For example , we have a mathmatic teacher and a english teacher , we aussume that the mathmatic teacher don’t know how to teach english and the english teacher don’t know how to teach the math , so we can write this code .</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MathTeacher</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) teachMath;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MathTeacher</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) teachMath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">\"TEACH MATH\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<pre><code class=\"lang-objc\">@interface EnglishTeacher : NSObject\n- (void) teachEnglish;\n@end\n\n@implementation EnglishTeacher\n- (void) teachEnglish\n{\n    NSLog(&quot;TEACH ENGLISH&quot;);\n}\n@end\n</code></pre>\n<p>If we do the same thing call EnglishTeach Object to use the teachMath method ,we will get a compile error just now . But in OC we can do the thing to call EnglishTeacher teachMath method but get no error in compiling . Because the dynamic binding in runtime .</p>\n<p>But what is the message delivery ? I think the Object in computer just a memory segment in action and then compile time we can bind the address of a method to an Object memeory model, But the real world this thing will don’t present anymore , we just know a person is a teacher , but we don’t need know if he can teach the math , all thing we be confirm in the time we call him to tell us how learn math .</p>\n<p>And the program stack , we can assume that the label paramter will be confirm and then pop the stack and to charge if the next paramter can in the identify type , and this character we call as the duck type .</p>\n<p>Message is the parameter and a function stack ,we can transmit these thing to a stack and we can decide this paramter if we can receive , to this point we can find that is more like a closure in some dynamice programming .</p>\n<h2 id=\"Dynamic-Binding\"><a href=\"#Dynamic-Binding\" class=\"headerlink\" title=\"Dynamic Binding\"></a>Dynamic Binding</h2><p>Dynamic binding , in Java ,can support the runtime selection for what to do next time , and select which function and method to call .</p>\n<p>In objective-c we don’t need a interface or super class to define the method to use , we belive the message is the final design in Oc , a paramter deliver to an object then the object will use the label to choose how and what to response this message , if we don’t define the handler to handle message then OC will do nothing.</p>\n<h1 id=\"Foundation-library\"><a href=\"#Foundation-library\" class=\"headerlink\" title=\"Foundation library\"></a>Foundation library</h1>","site":{"data":{}},"excerpt":"<h1 id=\"What-the-fuck-programming-in-OC\"><a href=\"#What-the-fuck-programming-in-OC\" class=\"headerlink\" title=\"What the fuck programming in OC\"></a>What the fuck programming in OC</h1><p>Recent day , my friend ask me to help him create an IOS app to make his electronic shop to be more effective . And then I choose the Objective-C , because I think this language will be more like C and Java or C++ , unfortunately this programming language is the worest language I work with.</p>\n<p>Message transformming ? What the fuck in action , and today after I learn this language 5 days , I just know how to create a Object and Class and how to think IOS development in OOD and use OOP to write the project in OC .</p>\n<p>I belive that I will not use this language anymore , but I have tracked in this enviroment ,I must create some notes and record the thinking in this language ! More fucking in OC ! </p>","more":"<h1 id=\"Basic-Grammer\"><a href=\"#Basic-Grammer\" class=\"headerlink\" title=\"Basic Grammer\"></a>Basic Grammer</h1><p>variables define and the base control flow are same like C and I don’t want to waste time to talk about them .</p>\n<h2 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h2><p>This character can let we implement the pattern called observer and then will use this grammer to create some anonymous function to use .</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span> (^CompletionBlock)();</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SampleClass</span>:<span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)performActionWithCompletion:(CompletionBlock)completionBlock;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SampleClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)performActionWithCompletion:(CompletionBlock)completionBlock&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Action Performed\"</span>);</span><br><span class=\"line\">    completionBlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* my first program in Objective-C */</span></span><br><span class=\"line\">    SampleClass *sampleClass = [[SampleClass alloc]init];</span><br><span class=\"line\">    [sampleClass performActionWithCompletion:^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Completion is called to intimate action is performed.\"</span>);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now I finally the common function define in OC , block in OC just delivery a function pointer waiting the next trick in the function who call him, and the real function is the message delivering .</p>\n<h2 id=\"Methods-or-Function\"><a href=\"#Methods-or-Function\" class=\"headerlink\" title=\"Methods or Function\"></a>Methods or Function</h2><p>Decalre and define a function in my mind are not easy to get in OC , the more details will write in <strong>Message delivery</strong> chacpter.</p>\n<p>We can define a function in this way </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void) add :(int) a : (int) b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;%d&quot;,a+b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I don’t know why do this design in this language , but I gradually understand the message model to describe the actual world , in the deep learning. and the next chapter I will do more description for this character.</p>\n<h2 id=\"Define-class\"><a href=\"#Define-class\" class=\"headerlink\" title=\"Define class\"></a>Define class</h2><p>We can define a class as below .</p>\n<p>Declare</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> *) name andAddress : (<span class=\"built_in\">NSString</span> *) address;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello ;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>Implementation</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> *) name andAddress : (<span class=\"built_in\">NSString</span> *) address</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span> != <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Hello my name is %@ I am live in %@\"</span>,<span class=\"keyword\">self</span>.name,<span class=\"keyword\">self</span>.address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>And Call in Main </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span>&#123;</span><br><span class=\"line\">        Person * person = [</span><br><span class=\"line\">            [Person alloc] initWithName : <span class=\"string\">@\"LeeMaster\"</span> : andAddress : <span class=\"string\">@\"SJZ\"</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        [person sayHello];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can define a class use the @interface keyword and implement the class and write the definetion use @implementation , and use + to define a static method and use - to define a dynamic method.</p>\n<p>Create an instance use the init* method , and if we have the no paramters constructor we can just use thei init which is defined by the OC compiler .</p>\n<p>The most funny thing is the message deliver grammer which make me headache these days !</p>\n<h2 id=\"Inheriting\"><a href=\"#Inheriting\" class=\"headerlink\" title=\"Inheriting\"></a>Inheriting</h2><p>The NSObject is the all class in OC world ancestor , so the class inherit from this class as Java class will inherit from the Object.</p>\n<p>Create a parent class</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Humen</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@protected</span> <span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\">    <span class=\"keyword\">@protected</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"keyword\">int</span>) age;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Humen</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"keyword\">int</span>) age</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Hello My name is %@ and I'm %d \"</span>,<span class=\"keyword\">self</span>.name,<span class=\"keyword\">self</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>Create a child class</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">Humen</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress ; </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"keyword\">int</span>) age : </span><br><span class=\"line\">       andAddress : (<span class=\"built_in\">NSString</span> *) address</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.address = address;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> sayHello];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"My location is %@\"</span>,<span class=\"keyword\">self</span>.address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span>&#123;</span><br><span class=\"line\">        Student * student = [[Student alloc] initWithName : <span class=\"string\">@\"LeeMaster\"</span> andAge : <span class=\"number\">23</span> : adnAddress : <span class=\"string\">\"SJZ\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        [student sayHello];</span><br><span class=\"line\">        [student reportAddress];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When I wrote this code as above , I suddenly understand the message delivery grammer — the method call , and the dunamic binding in runtime , so I can delivery a message to nil but the all program don’t exit with error code .</p>\n<h2 id=\"Categories\"><a href=\"#Categories\" class=\"headerlink\" title=\"Categories\"></a>Categories</h2><p>Like Golang the Objective-C also support the duck type , it belives that when a class implement a method define in the other class , this class can be saw as that class , it’s easy understand the duck can speak gaga , when a person speak gaga we can see this person as a duck !</p>\n<p>So to benifit this character we can dynamical add property and methods to a class , we defined before , so use this character we can implement a design pattern , Adaptor-Pattern ,and Bridge-Pattern also Proxy-Pattern.</p>\n<p>Now we have defined a class , which have contain the methods sayHello and reportAddress.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\">    <span class=\"keyword\">@public</span> <span class=\"built_in\">NSString</span> * address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"built_in\">NSString</span> * ) address;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) initWithName : (<span class=\"built_in\">NSString</span> * ) name : andAge : (<span class=\"built_in\">NSString</span> *) address</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = naem;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.address = address;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) sayHello</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"My Name is %@\"</span>,<span class=\"keyword\">self</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"My address is %@\"</span>,<span class=\"keyword\">self</span>.adress)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>But now we need this class can add a property and a method we can do as this way.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>(<span class=\"title\">student</span>)</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportTime;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span>(<span class=\"title\">student</span>)</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) reportTime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"now time is 2018\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>use this cahracter we can move the method in class which contains long code lines to a new file.m and then split a class implmentation in many way and expend the origin class everytime.</p>\n<h2 id=\"Extention\"><a href=\"#Extention\" class=\"headerlink\" title=\"Extention\"></a>Extention</h2><p>The catergories let a class implementation splited into many files and to manage easily , the Extention really expand the class everytime and everywhere , and most time this character is used to make some private methods.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) learning : (<span class=\"keyword\">int</span>) time;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span>()</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) hardWorking;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) lazyWorking;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) learning : (<span class=\"keyword\">int</span>) time</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"I'm learning\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(time &gt;= <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> hardWorking];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> lazeWorking];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) hardWorking</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"I'm learning hard\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) lazyWorking</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"I'm learning lazily\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Interface-gt-Protocal\"><a href=\"#Interface-gt-Protocal\" class=\"headerlink\" title=\"Interface -&gt; Protocal\"></a>Interface -&gt; Protocal</h2><p>As the interface in Java and the abstact in C++ , we can belive the protocal is the interface in Objective-C and the protocal declare the methods and all implementation of this protocal must implement the methods . But in objective-c we don’t need implement all methods!</p>\n<p>Delegate , I think this pattern is the best thing in OC , like the dynamic proxy in Java , we need a protocal and then define the must implement methods and then create a origin class and next create the proxy class to do some addtional thing in next thing.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">PrintProtocolDelegate</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)processCompleted;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">PrintClass</span> :<span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> delegate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) printDetails;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) setDelegate:(<span class=\"keyword\">id</span>)newDelegate;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">PrintClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)printDetails&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Printing Details\"</span>);</span><br><span class=\"line\">    [delegate processCompleted];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) setDelegate:(<span class=\"keyword\">id</span>)newDelegate&#123;</span><br><span class=\"line\">    delegate = newDelegate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SampleClass</span>:<span class=\"title\">NSObject</span>&lt;<span class=\"title\">PrintProtocolDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)startAction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SampleClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)startAction&#123;</span><br><span class=\"line\">    PrintClass *printClass = [[PrintClass alloc]init];</span><br><span class=\"line\">    [printClass setDelegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    [printClass printDetails];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)processCompleted&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Printing Process Completed\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSAutoreleasePool</span> * pool = [[<span class=\"built_in\">NSAutoreleasePool</span> alloc] init];</span><br><span class=\"line\">    SampleClass *sampleClass = [[SampleClass alloc]init];</span><br><span class=\"line\">    [sampleClass startAction];</span><br><span class=\"line\">    [pool drain];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The origin class can do some thing base , and then call delegate to do next thing , then we can use this pattern to create some program to do in Ios develop.</p>\n<h2 id=\"property-synthesize\"><a href=\"#property-synthesize\" class=\"headerlink\" title=\"@property @synthesize\"></a>@property @synthesize</h2><h3 id=\"property-attribute\"><a href=\"#property-attribute\" class=\"headerlink\" title=\"@property attribute\"></a>@property attribute</h3><h3 id=\"Usage-Setter-and-Getter\"><a href=\"#Usage-Setter-and-Getter\" class=\"headerlink\" title=\"Usage Setter and Getter\"></a>Usage Setter and Getter</h3><p>Like java  setter/getter rule ,the oc have the same rule to use ,and we can do the same thing </p>\n<h1 id=\"Message-delivery\"><a href=\"#Message-delivery\" class=\"headerlink\" title=\"Message delivery\"></a>Message delivery</h1><p>Now this character is the more puzzle thing in the all programming in OC , I dont’t know anything in the OOP in the real world , but in a deep thinking then I suddenly understand the method calling function .</p>\n<p>For example , we have a mathmatic teacher and a english teacher , we aussume that the mathmatic teacher don’t know how to teach english and the english teacher don’t know how to teach the math , so we can write this code .</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MathTeacher</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) teachMath;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MathTeacher</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) teachMath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">\"TEACH MATH\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<pre><code class=\"lang-objc\">@interface EnglishTeacher : NSObject\n- (void) teachEnglish;\n@end\n\n@implementation EnglishTeacher\n- (void) teachEnglish\n{\n    NSLog(&quot;TEACH ENGLISH&quot;);\n}\n@end\n</code></pre>\n<p>If we do the same thing call EnglishTeach Object to use the teachMath method ,we will get a compile error just now . But in OC we can do the thing to call EnglishTeacher teachMath method but get no error in compiling . Because the dynamic binding in runtime .</p>\n<p>But what is the message delivery ? I think the Object in computer just a memory segment in action and then compile time we can bind the address of a method to an Object memeory model, But the real world this thing will don’t present anymore , we just know a person is a teacher , but we don’t need know if he can teach the math , all thing we be confirm in the time we call him to tell us how learn math .</p>\n<p>And the program stack , we can assume that the label paramter will be confirm and then pop the stack and to charge if the next paramter can in the identify type , and this character we call as the duck type .</p>\n<p>Message is the parameter and a function stack ,we can transmit these thing to a stack and we can decide this paramter if we can receive , to this point we can find that is more like a closure in some dynamice programming .</p>\n<h2 id=\"Dynamic-Binding\"><a href=\"#Dynamic-Binding\" class=\"headerlink\" title=\"Dynamic Binding\"></a>Dynamic Binding</h2><p>Dynamic binding , in Java ,can support the runtime selection for what to do next time , and select which function and method to call .</p>\n<p>In objective-c we don’t need a interface or super class to define the method to use , we belive the message is the final design in Oc , a paramter deliver to an object then the object will use the label to choose how and what to response this message , if we don’t define the handler to handle message then OC will do nothing.</p>\n<h1 id=\"Foundation-library\"><a href=\"#Foundation-library\" class=\"headerlink\" title=\"Foundation library\"></a>Foundation library</h1>"},{"title":"Spring in action - Bean and Context","date":"2018-06-22T22:37:30.000Z","_content":"\n# Context the stage of a Bean ","source":"_posts/Spring-in-action-Bean-and-Context.md","raw":"---\ntitle: Spring in action - Bean and Context\ndate: 2018-06-22 22:37:30\ncategories:\n- Practice\ntags:\n- Java\n- Spring\n---\n\n# Context the stage of a Bean ","slug":"Spring-in-action-Bean-and-Context","published":1,"updated":"2018-06-23T20:13:12.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85w00164624fkr036c7","content":"<h1 id=\"Context-the-stage-of-a-Bean\"><a href=\"#Context-the-stage-of-a-Bean\" class=\"headerlink\" title=\"Context the stage of a Bean\"></a>Context the stage of a Bean</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Context-the-stage-of-a-Bean\"><a href=\"#Context-the-stage-of-a-Bean\" class=\"headerlink\" title=\"Context the stage of a Bean\"></a>Context the stage of a Bean</h1>"},{"title":"Virtual Box multi-network card configuration","date":"2018-05-21T17:57:58.000Z","_content":"\n# Setup Virtual Machine \n\nI use the virtual box to contribute the enviroment to do some experiment for distributed system like do some hadoop and spark , rabbitmq redis cluster ...\n\n# Set the network bridge \n\nThe all machine will work in virtual isolation and then will simulatie a phycial machine to use then contribute the many cluster enviroment.\n\nBut the network configuration is an importent thing to do ,we need config a network to do the IPC on network so we need a bridge to handle the all data transform .\n\nIt's simple to do .\n\n<!--more-->\n\n![BRIDGE CONFIG](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4df0jj6j30uk0kitb7.jpg)\n\nclick the right button which is a plus sign on the icon then we can create a new bridge to use .\n\n# Set the configuration in centos\n\nI assume that you had setuped the centos or other linux edition .\n\n## Virtual Machine config network card \n\nopen the settings for a virtual machine and select the setting button\n\n![OPEN CARD](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4ghmmvij31680vudsg.jpg)\n\nwhen we choose the network setting we can add a network card to add a new card and then we should generate a new mac address for use \n\n![ADD CARD](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4fyzgz4j311c0r2gpe.jpg)\n\n## In CentOS to config\n\nBecause I choose the CentOS 7 minimum edition so the network is not open after the setup,we need open the network service .\n\n![STEP ONE](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4i8plw5j30o00ff0wh.jpg)\n\nUnder the directory /etc/sysconfig/network-scripts/ is the all network config and which contain the **ifcfg-** prefix file is the network card config .\n\nwe can see the first is the ensp03 is the first card for us to work in the NAT pattern .\nAnd then set some configuration .\n* ONBOOT=yes\n* BOOTPROTO=dhcp\nUse the dhcp pattern we can get a ip address automatic . \n\nAnother we should set it work in the static pattern , it's that this card will work use the static ip address and then we set by ourselves .\n\n![STEP TWO](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4nviphpj30o10fgju2.jpg)\n\nAs we can see we should set the **DEVICE** to define the card name . and then we can use ifconfig or ip addr to find if we set them success .\n\n![STEP THREE](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4qet39ej30o10bytgu.jpg)\n\nAnd the last thing we just use the command service network start or systmctl start network.service\n\n","source":"_posts/Virtual-Box-multi-network-card-configuration.md","raw":"---\ntitle: Virtual Box multi-network card configuration\ndate: 2018-05-21 17:57:58\ncategories:\n- Virtual Machine\ntags:\n- Experiment\n- Configuration\n---\n\n# Setup Virtual Machine \n\nI use the virtual box to contribute the enviroment to do some experiment for distributed system like do some hadoop and spark , rabbitmq redis cluster ...\n\n# Set the network bridge \n\nThe all machine will work in virtual isolation and then will simulatie a phycial machine to use then contribute the many cluster enviroment.\n\nBut the network configuration is an importent thing to do ,we need config a network to do the IPC on network so we need a bridge to handle the all data transform .\n\nIt's simple to do .\n\n<!--more-->\n\n![BRIDGE CONFIG](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4df0jj6j30uk0kitb7.jpg)\n\nclick the right button which is a plus sign on the icon then we can create a new bridge to use .\n\n# Set the configuration in centos\n\nI assume that you had setuped the centos or other linux edition .\n\n## Virtual Machine config network card \n\nopen the settings for a virtual machine and select the setting button\n\n![OPEN CARD](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4ghmmvij31680vudsg.jpg)\n\nwhen we choose the network setting we can add a network card to add a new card and then we should generate a new mac address for use \n\n![ADD CARD](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4fyzgz4j311c0r2gpe.jpg)\n\n## In CentOS to config\n\nBecause I choose the CentOS 7 minimum edition so the network is not open after the setup,we need open the network service .\n\n![STEP ONE](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4i8plw5j30o00ff0wh.jpg)\n\nUnder the directory /etc/sysconfig/network-scripts/ is the all network config and which contain the **ifcfg-** prefix file is the network card config .\n\nwe can see the first is the ensp03 is the first card for us to work in the NAT pattern .\nAnd then set some configuration .\n* ONBOOT=yes\n* BOOTPROTO=dhcp\nUse the dhcp pattern we can get a ip address automatic . \n\nAnother we should set it work in the static pattern , it's that this card will work use the static ip address and then we set by ourselves .\n\n![STEP TWO](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4nviphpj30o10fgju2.jpg)\n\nAs we can see we should set the **DEVICE** to define the card name . and then we can use ifconfig or ip addr to find if we set them success .\n\n![STEP THREE](http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4qet39ej30o10bytgu.jpg)\n\nAnd the last thing we just use the command service network start or systmctl start network.service\n\n","slug":"Virtual-Box-multi-network-card-configuration","published":1,"updated":"2018-05-21T12:25:41.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiruh85x001a4624j1n3wn4f","content":"<h1 id=\"Setup-Virtual-Machine\"><a href=\"#Setup-Virtual-Machine\" class=\"headerlink\" title=\"Setup Virtual Machine\"></a>Setup Virtual Machine</h1><p>I use the virtual box to contribute the enviroment to do some experiment for distributed system like do some hadoop and spark , rabbitmq redis cluster …</p>\n<h1 id=\"Set-the-network-bridge\"><a href=\"#Set-the-network-bridge\" class=\"headerlink\" title=\"Set the network bridge\"></a>Set the network bridge</h1><p>The all machine will work in virtual isolation and then will simulatie a phycial machine to use then contribute the many cluster enviroment.</p>\n<p>But the network configuration is an importent thing to do ,we need config a network to do the IPC on network so we need a bridge to handle the all data transform .</p>\n<p>It’s simple to do .</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4df0jj6j30uk0kitb7.jpg\" alt=\"BRIDGE CONFIG\"></p>\n<p>click the right button which is a plus sign on the icon then we can create a new bridge to use .</p>\n<h1 id=\"Set-the-configuration-in-centos\"><a href=\"#Set-the-configuration-in-centos\" class=\"headerlink\" title=\"Set the configuration in centos\"></a>Set the configuration in centos</h1><p>I assume that you had setuped the centos or other linux edition .</p>\n<h2 id=\"Virtual-Machine-config-network-card\"><a href=\"#Virtual-Machine-config-network-card\" class=\"headerlink\" title=\"Virtual Machine config network card\"></a>Virtual Machine config network card</h2><p>open the settings for a virtual machine and select the setting button</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4ghmmvij31680vudsg.jpg\" alt=\"OPEN CARD\"></p>\n<p>when we choose the network setting we can add a network card to add a new card and then we should generate a new mac address for use </p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4fyzgz4j311c0r2gpe.jpg\" alt=\"ADD CARD\"></p>\n<h2 id=\"In-CentOS-to-config\"><a href=\"#In-CentOS-to-config\" class=\"headerlink\" title=\"In CentOS to config\"></a>In CentOS to config</h2><p>Because I choose the CentOS 7 minimum edition so the network is not open after the setup,we need open the network service .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4i8plw5j30o00ff0wh.jpg\" alt=\"STEP ONE\"></p>\n<p>Under the directory /etc/sysconfig/network-scripts/ is the all network config and which contain the <strong>ifcfg-</strong> prefix file is the network card config .</p>\n<p>we can see the first is the ensp03 is the first card for us to work in the NAT pattern .<br>And then set some configuration .</p>\n<ul>\n<li>ONBOOT=yes</li>\n<li>BOOTPROTO=dhcp<br>Use the dhcp pattern we can get a ip address automatic . </li>\n</ul>\n<p>Another we should set it work in the static pattern , it’s that this card will work use the static ip address and then we set by ourselves .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4nviphpj30o10fgju2.jpg\" alt=\"STEP TWO\"></p>\n<p>As we can see we should set the <strong>DEVICE</strong> to define the card name . and then we can use ifconfig or ip addr to find if we set them success .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4qet39ej30o10bytgu.jpg\" alt=\"STEP THREE\"></p>\n<p>And the last thing we just use the command service network start or systmctl start network.service</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Setup-Virtual-Machine\"><a href=\"#Setup-Virtual-Machine\" class=\"headerlink\" title=\"Setup Virtual Machine\"></a>Setup Virtual Machine</h1><p>I use the virtual box to contribute the enviroment to do some experiment for distributed system like do some hadoop and spark , rabbitmq redis cluster …</p>\n<h1 id=\"Set-the-network-bridge\"><a href=\"#Set-the-network-bridge\" class=\"headerlink\" title=\"Set the network bridge\"></a>Set the network bridge</h1><p>The all machine will work in virtual isolation and then will simulatie a phycial machine to use then contribute the many cluster enviroment.</p>\n<p>But the network configuration is an importent thing to do ,we need config a network to do the IPC on network so we need a bridge to handle the all data transform .</p>\n<p>It’s simple to do .</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4df0jj6j30uk0kitb7.jpg\" alt=\"BRIDGE CONFIG\"></p>\n<p>click the right button which is a plus sign on the icon then we can create a new bridge to use .</p>\n<h1 id=\"Set-the-configuration-in-centos\"><a href=\"#Set-the-configuration-in-centos\" class=\"headerlink\" title=\"Set the configuration in centos\"></a>Set the configuration in centos</h1><p>I assume that you had setuped the centos or other linux edition .</p>\n<h2 id=\"Virtual-Machine-config-network-card\"><a href=\"#Virtual-Machine-config-network-card\" class=\"headerlink\" title=\"Virtual Machine config network card\"></a>Virtual Machine config network card</h2><p>open the settings for a virtual machine and select the setting button</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4ghmmvij31680vudsg.jpg\" alt=\"OPEN CARD\"></p>\n<p>when we choose the network setting we can add a network card to add a new card and then we should generate a new mac address for use </p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4fyzgz4j311c0r2gpe.jpg\" alt=\"ADD CARD\"></p>\n<h2 id=\"In-CentOS-to-config\"><a href=\"#In-CentOS-to-config\" class=\"headerlink\" title=\"In CentOS to config\"></a>In CentOS to config</h2><p>Because I choose the CentOS 7 minimum edition so the network is not open after the setup,we need open the network service .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4i8plw5j30o00ff0wh.jpg\" alt=\"STEP ONE\"></p>\n<p>Under the directory /etc/sysconfig/network-scripts/ is the all network config and which contain the <strong>ifcfg-</strong> prefix file is the network card config .</p>\n<p>we can see the first is the ensp03 is the first card for us to work in the NAT pattern .<br>And then set some configuration .</p>\n<ul>\n<li>ONBOOT=yes</li>\n<li>BOOTPROTO=dhcp<br>Use the dhcp pattern we can get a ip address automatic . </li>\n</ul>\n<p>Another we should set it work in the static pattern , it’s that this card will work use the static ip address and then we set by ourselves .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4nviphpj30o10fgju2.jpg\" alt=\"STEP TWO\"></p>\n<p>As we can see we should set the <strong>DEVICE</strong> to define the card name . and then we can use ifconfig or ip addr to find if we set them success .</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/0079qc5ply1frj4qet39ej30o10bytgu.jpg\" alt=\"STEP THREE\"></p>\n<p>And the last thing we just use the command service network start or systmctl start network.service</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjiruh85400004624at3p1zzr","category_id":"cjiruh85a0003462478jzj4no","_id":"cjiruh85h000c46241iovbpwa"},{"post_id":"cjiruh858000246244rgudsh6","category_id":"cjiruh85e00084624aeyirggs","_id":"cjiruh85n000k4624sh2jgh1t"},{"post_id":"cjiruh85b00054624pg3c882e","category_id":"cjiruh85e00084624aeyirggs","_id":"cjiruh85p000p46243wxyx8jb"},{"post_id":"cjiruh85d00064624x4saf85l","category_id":"cjiruh85n000j4624q33q7ht9","_id":"cjiruh85r000v4624qu8ehcns"},{"post_id":"cjiruh85e00074624rgies3i2","category_id":"cjiruh85p000q4624rof2316c","_id":"cjiruh85u0011462492bn5z7u"},{"post_id":"cjiruh85f000a4624i2o2kbw3","category_id":"cjiruh85s000w46241n3t4ptb","_id":"cjiruh85x00184624zo2u2a63"},{"post_id":"cjiruh85g000b4624em3o8rlk","category_id":"cjiruh85s000w46241n3t4ptb","_id":"cjiruh861001c462474c7vp55"},{"post_id":"cjiruh85w00164624fkr036c7","category_id":"cjiruh85s000w46241n3t4ptb","_id":"cjiruh862001g4624e87coy5k"},{"post_id":"cjiruh85j000f4624ukt38pve","category_id":"cjiruh85x00174624qsv2oolg","_id":"cjiruh863001i46242983b7ir"},{"post_id":"cjiruh85m000h4624fn2zo8xa","category_id":"cjiruh85s000w46241n3t4ptb","_id":"cjiruh864001m4624ddynbqs0"},{"post_id":"cjiruh85o000m4624fnujhwbi","category_id":"cjiruh85s000w46241n3t4ptb","_id":"cjiruh865001q4624q0p5l1l8"},{"post_id":"cjiruh85p000o4624l4k8k3mv","category_id":"cjiruh85s000w46241n3t4ptb","_id":"cjiruh866001t46247n1i3do5"},{"post_id":"cjiruh85q000s46245n83x3b2","category_id":"cjiruh865001p4624wmesrnfv","_id":"cjiruh867001z4624ixn3h2zm"},{"post_id":"cjiruh85r000u4624tjt6e9ex","category_id":"cjiruh85x00174624qsv2oolg","_id":"cjiruh86800234624h3pd8ky8"},{"post_id":"cjiruh85s000y4624epvu5ydt","category_id":"cjiruh865001p4624wmesrnfv","_id":"cjiruh869002746247icxk6yl"},{"post_id":"cjiruh85t00104624t52uqxjd","category_id":"cjiruh865001p4624wmesrnfv","_id":"cjiruh86a002a4624xh5rc6ty"},{"post_id":"cjiruh85u00124624hzs18yu4","category_id":"cjiruh865001p4624wmesrnfv","_id":"cjiruh86a002e46241mz27j1r"},{"post_id":"cjiruh85v00154624d8zmpujh","category_id":"cjiruh85x00174624qsv2oolg","_id":"cjiruh86b002i4624m22kj5p9"},{"post_id":"cjiruh85x001a4624j1n3wn4f","category_id":"cjiruh86a002d4624ivr1ct27","_id":"cjiruh86b002l46244iv16e92"}],"PostTag":[{"post_id":"cjiruh85400004624at3p1zzr","tag_id":"cjiruh85b00044624pgfbw641","_id":"cjiruh85k000g4624gxdq6c88"},{"post_id":"cjiruh85400004624at3p1zzr","tag_id":"cjiruh85e00094624le51fav0","_id":"cjiruh85m000i4624g7lmj281"},{"post_id":"cjiruh858000246244rgudsh6","tag_id":"cjiruh85h000e4624fjrko7e3","_id":"cjiruh85o000n4624lnaved6k"},{"post_id":"cjiruh85b00054624pg3c882e","tag_id":"cjiruh85h000e4624fjrko7e3","_id":"cjiruh85r000t4624eqc0d01u"},{"post_id":"cjiruh85d00064624x4saf85l","tag_id":"cjiruh85q000r4624el7hp3th","_id":"cjiruh85t000z4624txg6ne3j"},{"post_id":"cjiruh85e00074624rgies3i2","tag_id":"cjiruh85s000x4624ve6c4btx","_id":"cjiruh861001b4624oh7frw8n"},{"post_id":"cjiruh85e00074624rgies3i2","tag_id":"cjiruh85v001446242h4a4s20","_id":"cjiruh861001d46241dovulxs"},{"post_id":"cjiruh85f000a4624i2o2kbw3","tag_id":"cjiruh85x00194624t0bj8gj2","_id":"cjiruh864001k4624l3nskwyj"},{"post_id":"cjiruh85f000a4624i2o2kbw3","tag_id":"cjiruh862001f4624nlf5lrxq","_id":"cjiruh864001n4624e2h9xw7x"},{"post_id":"cjiruh85g000b4624em3o8rlk","tag_id":"cjiruh85x00194624t0bj8gj2","_id":"cjiruh865001s4624vphgue44"},{"post_id":"cjiruh85g000b4624em3o8rlk","tag_id":"cjiruh862001f4624nlf5lrxq","_id":"cjiruh866001v4624rlly0c4w"},{"post_id":"cjiruh85j000f4624ukt38pve","tag_id":"cjiruh865001r4624ndwg6qg5","_id":"cjiruh866001x4624akfa03q5"},{"post_id":"cjiruh85m000h4624fn2zo8xa","tag_id":"cjiruh865001r4624ndwg6qg5","_id":"cjiruh86800214624t35fbcmx"},{"post_id":"cjiruh85o000m4624fnujhwbi","tag_id":"cjiruh865001r4624ndwg6qg5","_id":"cjiruh86800254624y8xh7re7"},{"post_id":"cjiruh85p000o4624l4k8k3mv","tag_id":"cjiruh85x00194624t0bj8gj2","_id":"cjiruh86a002c4624w4twenvv"},{"post_id":"cjiruh85p000o4624l4k8k3mv","tag_id":"cjiruh862001f4624nlf5lrxq","_id":"cjiruh86a002f4624g080e9vx"},{"post_id":"cjiruh85q000s46245n83x3b2","tag_id":"cjiruh86a002b46241y5a7xb8","_id":"cjiruh86b002h4624qlpsrq7z"},{"post_id":"cjiruh85r000u4624tjt6e9ex","tag_id":"cjiruh865001r4624ndwg6qg5","_id":"cjiruh86b002k4624v483dltq"},{"post_id":"cjiruh85s000y4624epvu5ydt","tag_id":"cjiruh86a002b46241y5a7xb8","_id":"cjiruh86c002n4624ogtw05jc"},{"post_id":"cjiruh85t00104624t52uqxjd","tag_id":"cjiruh86a002b46241y5a7xb8","_id":"cjiruh86c002p4624c51xtwsf"},{"post_id":"cjiruh85u00124624hzs18yu4","tag_id":"cjiruh86a002b46241y5a7xb8","_id":"cjiruh86d002s4624zc76vtxo"},{"post_id":"cjiruh85u00124624hzs18yu4","tag_id":"cjiruh86c002q4624bu6jidcq","_id":"cjiruh86d002t46240dh9v4qk"},{"post_id":"cjiruh85v00154624d8zmpujh","tag_id":"cjiruh86d002r4624nqbmawu9","_id":"cjiruh86e002v4624o67nw9w5"},{"post_id":"cjiruh85w00164624fkr036c7","tag_id":"cjiruh85x00194624t0bj8gj2","_id":"cjiruh86e002y4624o5s6gioa"},{"post_id":"cjiruh85w00164624fkr036c7","tag_id":"cjiruh86e002w4624vuzq0msi","_id":"cjiruh86e002z4624nalp0gct"},{"post_id":"cjiruh85x001a4624j1n3wn4f","tag_id":"cjiruh86e002x4624in4sdc7a","_id":"cjiruh86f00314624e9v52vk6"},{"post_id":"cjiruh85x001a4624j1n3wn4f","tag_id":"cjiruh86f0030462470tppx2t","_id":"cjiruh86f00324624djihfe00"}],"Tag":[{"name":"Divide and Conquer","_id":"cjiruh85b00044624pgfbw641"},{"name":"Recursion","_id":"cjiruh85e00094624le51fav0"},{"name":"RBAC","_id":"cjiruh85h000e4624fjrko7e3"},{"name":"program note","_id":"cjiruh85q000r4624el7hp3th"},{"name":"Compiler Theory","_id":"cjiruh85s000x4624ve6c4btx"},{"name":"Algorithms","_id":"cjiruh85v001446242h4a4s20"},{"name":"Java","_id":"cjiruh85x00194624t0bj8gj2"},{"name":"Concurrency","_id":"cjiruh862001f4624nlf5lrxq"},{"name":"Go","_id":"cjiruh865001r4624ndwg6qg5"},{"name":"system call","_id":"cjiruh86a002b46241y5a7xb8"},{"name":"socket","_id":"cjiruh86c002q4624bu6jidcq"},{"name":"Objective c","_id":"cjiruh86d002r4624nqbmawu9"},{"name":"Spring","_id":"cjiruh86e002w4624vuzq0msi"},{"name":"Experiment","_id":"cjiruh86e002x4624in4sdc7a"},{"name":"Configuration","_id":"cjiruh86f0030462470tppx2t"}]}}